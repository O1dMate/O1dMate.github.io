(this["webpackJsonpoldmates-templates"]=this["webpackJsonpoldmates-templates"]||[]).push([[0],{74:function(e,t,n){e.exports=n(93)},92:function(e,t,n){},93:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),o=n(8),s=n.n(o),c=n(140),i=n(67),l=n(61),p=n(62),d=n(69),h=n(68),u=n(7),y=n(43);function m(){}m.prototype.getCryptographyData=function(){return[{type:"h3",data:"JavaScript Crypto Module"},{type:"hr"},{type:"h6",data:"Symmetric Encryption (AES-256 Counter-Mode)"},{type:"code",mode:"javascript",data:f},{type:"br"},{type:"hr"},{type:"h6",data:"Hashing (SHA256)"},{type:"code",mode:"javascript",data:g},{type:"br"},{type:"hr"},{type:"h6",data:"Elliptic Curve Diffie-Hellman"},{type:"code",mode:"javascript",data:b}]},m.prototype.getHttpData=function(){return[{type:"h3",data:"Express HTTP(S) Server"},{type:"hr"},{type:"h6",data:"Server Code"},{type:"code",mode:"javascript",data:S},{type:"br"},{type:"h6",data:"Config File"},{type:"code",mode:"javascript",data:k}]},m.prototype.getTcpSocketData=function(){return[{type:"h3",data:"TCP Sockets"},{type:"hr"},{type:"h6",data:"TCP Server"},{type:"code",mode:"javascript",data:v},{type:"br"},{type:"hr"},{type:"h6",data:"TCP Client"},{type:"code",mode:"javascript",data:w}]},m.prototype.getReactChartData=function(){return[{type:"h3",data:"React-ChartJS-2"},{type:"hr"},{type:"h6",data:"Coming Soon"}]},m.prototype.getXlsxData=function(){return[{type:"h3",data:"JavaScript XLSX Module"},{type:"hr"},{type:"h6",data:"Create & Export XLSX Document"},{type:"code",mode:"javascript",data:E},{type:"br"},{type:"h6",data:"The above code will produce this document:"},{type:"image",data:"img/xlsx.png",style:"fill"}]},m.prototype.getUtilFunctionData=function(){return[{type:"h3",data:"Utility Functions"},{type:"hr"},{type:"h6",data:"Sort a list of Objects by a certain key"},{type:"code",mode:"javascript",data:T}]},m.prototype.getSshData=function(){return[{type:"h3",data:"SSH Port Forwarding"},{type:"hr"},{type:"br"},{type:"h4",data:"Local Port Forward"},{type:"br"},{type:"p",data:D},{type:"br"},{type:"p",data:O},{type:"br"},{type:"p",data:P},{type:"code",mode:"ruby",showLineNumbers:!1,fontSize:18,data:x},{type:"br"},{type:"p",data:C},{type:"br"},{type:"hr"},{type:"br"},{type:"h4",data:"Remote Port Forward"},{type:"br"},{type:"p",data:L},{type:"br"},{type:"p",data:R},{type:"code",mode:"ruby",showLineNumbers:!1,fontSize:18,data:j},{type:"br"},{type:"p",data:q},{type:"br"},{type:"p",data:H},{type:"br"},{type:"p",data:F},{type:"code",mode:"ruby",showLineNumbers:!1,fontSize:18,data:N},{type:"br"}]};var f="\nconst crypto = require('crypto');\n\nlet key = Buffer.from('0000111122223333444455556666777788889999aaaabbbbccccddddeeeeffff', 'hex')\nlet iv = Buffer.from('0123456789abcdef0123456789abcdef', 'hex')\nlet secret_msg = Buffer.from('To be Encrypted!', 'utf-8');\n\n// Encrypt\nlet cipher = crypto.createCipheriv('aes-256-ctr', key, iv);\nlet encrypted = cipher.update(secret_msg);\n\n// Decrypt\nlet decipher = crypto.createDecipheriv('aes-256-ctr', key, iv);\nlet decrypted = decipher.update(encrypted, 'hex');\n\nconsole.log(`\\nEncryption Key: ${key.toString('hex')}`)\nconsole.log(`IV: \\t\\t${iv.toString('hex')}\\n`)\n\nconsole.log(`Plain-text: \\t${secret_msg.toString('hex')}`);\nconsole.log(`Encrypted: \\t${encrypted.toString('hex')}`);\nconsole.log(`Encrypted: \\t${encrypted.toString('base64')}`);\nconsole.log(`Decrypted: \\t${decrypted.toString('utf-8')}\\n`);\n",g="\nconst crypto = require('crypto');\n\n// Get a list of supported Hash Algorithms\nconsole.log(crypto.getHashes());\n\nlet msgToHash = 'Password1';\n\nlet hashFunction = crypto.createHash('sha256');\nhashFunction.update(msgToHash);\nconsole.log(hashFunction.digest('hex'));\n",b="\nconst crypto = require('crypto');\n\nconst alice = crypto.createECDH('sect571k1');\nalice.generateKeys();\n\nconst bob = crypto.createECDH('sect571k1');\nbob.generateKeys();\n\nconsole.log(\"\\nAlice Public:\", alice.getPublicKey().toString('base64'))\nconsole.log(\"Alice Private:\", alice.getPrivateKey().toString('base64'))\nconsole.log(\"Bob Public:\", bob.getPublicKey().toString('base64'))\nconsole.log(\"Bob Private:\", bob.getPrivateKey().toString('base64'))\n\nconsole.log(\"Shared Secret: \", alice.computeSecret(bob.getPublicKey(), null, 'base64'))\nconsole.log(\"Shared Secret: \", bob.computeSecret(alice.getPublicKey(), null, 'base64'), \"\\n\")\n",S="\nconst configs = require('./configs/config');\nconst express = require('express');\nconst helmet = require('helmet');\nconst csp = require('helmet-csp')\nconst bodyParser = require('body-parser');\nconst fs = require('fs');\nconst path = require('path');\n\nconst app = express();\nvar server = null;\n\n// Determine if the the server will have TLS Enabled.\nif (!configs.devMode) {\n\t// Load the TLS cert\n\tlet serverOptions = {\n\t\tcert: fs.readFileSync(path.join(__dirname, configs.certPath)),\n\t\tkey: fs.readFileSync(path.join(__dirname, configs.keyPath)),\n\t\tsecureProtocol: 'TLSv1_2_method',\n\t}\n\n\tserver = require('https').Server(serverOptions, app);\n\n\tapp.use(helmet.hsts({\n\t\tmaxAge: 31536000,\n\t\tincludeSubDomains: true,\n\t\tpreload: true\n\t}));\n} else {\n\tserver = require('http').Server(app);\n}\n\n// Determine the Web Server port\nconst SERVER_PORT = (configs.devMode ? configs.devPort : configs.prodPort);\n\n// Support JSON encoded POST request bodies\napp.use(bodyParser.json());\n\n// Harden the Server\napp.use(helmet.xssFilter())\napp.use(helmet.noSniff())\napp.use(helmet.frameguard({ action: 'deny' }))\napp.use(helmet.referrerPolicy({ policy: 'no-referrer' }))\napp.use(csp({\n\tdirectives: {\n\t\tdefaultSrc: [`'none'`],\n\t\tconnectSrc: [`'self'`],\n\t\tstyleSrc: [`'self'`],\n\t\timgSrc: [`'self'`],\n\t\tscriptSrc: [`'self'`],\n\t\tupgradeInsecureRequests: true,\n\t}\n}))\napp.set('etag', false);\napp.set('x-powered-by', false);\n\n// Handle decode error incase an invalid URI is sent.\napp.use((req, res, next) => {\n\ttry {\n\t\tdecodeURIComponent(req.path)\n\t\tnext();\n\t} catch (err) {\n\t\tres.sendStatus(404);\n\t}\n})\n\napp.get('/query/:idOne/:idTwo?/:idThree?', (req, res) => {\n\t// For the URI: /query/1/this/2?u=my%20data&help=true\n\t// req.params = { idOne: '1', idTwo: 'this', idThree: '2' }\n\t// req.query = { u: 'my data', help: 'true' }\n\n\t// Send custom HTTP Status code\n\tres.status(406).send('OK');\n})\n\n// Send a file to the user.\napp.get('/favicon.ico', (req, res) => {\n\tres.sendFile(path.join(__dirname, './images/favicon.ico'));\n})\n\napp.post('/login', (req, res) => {\n\ttry {\n\t\t// Ensure we receive the right params\n\t\tif (req.body && !req.body.hasOwnProperty('username') && req.body.hasOwnProperty('password')) {\n\t\t\t// Get the params from the request\n\t\t\tlet username = req.body.username.toString() || '';\n\t\t\tlet password = req.body.password.toString() || '';\n\n\t\t\t// Perform check to see if the username & password is correct.\n\t\t\tDatabase.user.checkCredentials(username, password, (err) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tres.send({ success: false });\n\t\t\t\t} else {\n\t\t\t\t\t// Generate the session token and calculate expiration date.\n\t\t\t\t\tlet sessionToken = util.randomString(configs.sessionTokenLength);\n\t\t\t\t\tlet expirationTime = (new Date()).getTime() + configs.sessionLength;\n\n\t\t\t\t\t// Store the session & expiration time in the DB.\n\t\t\t\t\tDatabase.user.createSession(sessionToken, new Date(expirationTime));\n\n\t\t\t\t\t// Login was successful, send the cookie back to the user.\n\t\t\t\t\tres.cookie('session-token', sessionToken, {\n\t\t\t\t\t\tsecure: true,\n\t\t\t\t\t\thttpOnly: true,\n\t\t\t\t\t\tsameSite: 'strict',\n\t\t\t\t\t\tmaxAge: configs.sessionLength,\n\t\t\t\t\t}).send({ success: true });\n\t\t\t\t}\n\t\t\t})\n\t\t} else {\n\t\t\tres.send({ success: false });\n\t\t}\n\t} catch (err) {\n\t\tres.send({ success: false });\n\t}\n});\n\n\nserver.listen(SERVER_PORT, () => {\n\tconsole.log(`[-] Server Listening on Port ${SERVER_PORT}`);\n});\n",k="\nconst configs = {\n\t// Server Settings\n\tdevMode: true,\n\tdevPort: 80,\n\tprodPort: 443,\n\tcertPath: './cert/cert.crt',\n\tkeyPath: './cert/cert.key',\n\n\t// Session Configs\n\tsessionTokenLength: 64,\n\tsessionLength: 3600000,     // Session Length in miliseconds\n}\n\nObject.freeze(configs);\n\nmodule.exports = configs;\n",v="\nconst net = require('net');\n\nconst HOST = '127.0.0.1';\nconst PORT = 49494;\n\nnet.createServer((socket) => {\n\tconsole.log(`CONNECTED: ${socket.remoteAddress}: ${socket.remotePort}`);\n\n\tsocket.on('data', (data) => {\n\t\tconsole.log(`DATA ${socket.remoteAddress}: ${data}`);\n\n\t\t// Send the same message back to the client.\n\t\tsocket.write(`FROM SERVER - ${data}`);\n\t});\n\n\tsocket.on('error', (error) => {\n\t\tconsole.error(error);\n\t});\n\n\tsocket.on('close', (data) => {\n\t\tconsole.log(`CLOSED: ${socket.remoteAddress}: ${socket.remotePort}\\n`);\n\t});\n}).listen(PORT, HOST);\n\nconsole.log(`Server listening on  ${HOST}: ${PORT}`);\n",w="\nconst net = require('net');\n\nconst HOST = '127.0.0.1';\nconst PORT = 49494;\n\nlet socket = new net.Socket();\n\nsocket.connect(PORT, HOST, () => {\n\tconsole.log(`CONNECTED TO: ${HOST}: ${PORT}`);\n\n\t// Send a message to the server\n\tsocket.write(\"G'day Server\");\n});\n\nsocket.on('data', (data) => {\n\tconsole.log(`RECEIVED: ${data}`);\n\n\t// Close the connection\n\tsocket.destroy();\n});\n\nsocket.on('close', () => {\n\tconsole.log('Connection closed');\n});\n\nsocket.on('error', (err) => {\n\tconsole.log(`Connection Error: ${err}`);\n});\n",E="\n// import XLSX from 'xlsx'; // Use this for React\nconst XLSX = require('xlsx');\n\n// Create a new blank XLSX Document\nlet workbook = XLSX.utils.book_new();\n\n// The data that will be added to the sheet.\nlet dataForSheet = [\n\t['Column 1', 'Column 2','Column 3','Column 4','Column 5','Column 6'],\n\t['Data 1', 'Data 2','Data 3','Data 4','Data 5','Data 6'],\n\t['Data 7', 'Data 8','Data 9','Data 10'],\n\t['Data 11', 'Data 12','','','Data 13','Data 14','Data 15'],\n];\n\n// Convert the Array data to a sheet.\nlet sheetData = XLSX.utils.aoa_to_sheet(dataForSheet);\n\n// Add the sheet to the workbook\nXLSX.utils.book_append_sheet(workbook, sheetData, 'Sheet 1');\n\n// Save the XLSX File.\nXLSX.writeFile(workbook, 'FILE_NAME.xlsx');\n",T="\n// Sort a list of Objects by a certain key.\nfunction sortListByKey(list, keyToSortBy, reverse) {\n\tif (reverse) {\n\t\t// Sort the list in reverse order (Highest to Lowest)\n\t\tlist.sort((a,b) => {\n\t\t\tif (a[keyToSortBy] > b[keyToSortBy]) return -1;\n\t\t\telse if (a[keyToSortBy] < b[keyToSortBy]) return 1;\n\t\t\treturn 0;\n\t\t})\n\t} else {\n\t\t// Sort the list in normal order (Lowest to Highest)\n\t\tlist.sort((a,b) => {\n\t\t\tif (a[keyToSortBy] > b[keyToSortBy]) return 1;\n\t\t\telse if (a[keyToSortBy] < b[keyToSortBy]) return -1;\n\t\t\treturn 0;\n\t\t})\n\t}\n}\n",D="Let's say the remote host is listening on localhost:3000 and you want to connect to it from your local computer. Perhaps there is a database listening on this port and you don't want to expose it to the network/internet.",O="Using a Local Port Forward we can setup a listener on our local computer, which when we connect to will go through the SSH tunnel to the listener on the remote host.",P="Here is the command that will allow us to do that:",x="ssh -L 1337:localhost:3000 USER@REMOTE_HOST_IP",C="This command will setup a listener on your local machine on localhost:1337. Connecting to this will be the same as if you connected to localhost: 3000 on the remote host.",L="Let's say you have an application listening on localhost:9595 on your local computer and your friend wants to connect to your server. However, both you and your friend networks are behind NAT(i.e.two home networks anywhere in the world) so you can't directly connect to each other.",R="On your computer:",j="ssh -R 9000:localhost:9595 USER@REMOTE_HOST_IP",q="This command will setup a listener on the remote host on localhost:9000. Connecting to the remote host on localhost: 9000 will be the same as if you connected to localhost: 9595 on your local machine.",H="This situation is now the same as a Local Port Forward. The remote host is now listening on localhost: 9000. Your friend can now create a new listener on their computer using a Local Port Forward.",F="On your friends computer:",N="ssh -L 1337:localhost:9000 USER@REMOTE_HOST_IP",_=new m,X={JavaScript:{NodeJS:{Cryptography:{link:"crypto",rawData:_.getCryptographyData()},"Express Server":{link:"http-server",rawData:_.getHttpData()},"TCP Sockets":{link:"tcp-sockets",rawData:_.getTcpSocketData()}},ReactJS:{"React-ChartJS-2":{link:"react-chartjs-2",rawData:_.getReactChartData()}},"XLSX Export":{link:"xlsx",rawData:_.getXlsxData()},"Utility Functions":{link:"util",rawData:_.getUtilFunctionData()}},Networking:{"SSH Port Forwarding":{link:"ssh-portforward",rawData:_.getSshData()}}};function B(){return X}var $=n(48),A=n(51),M=n(25),U=n(131),I=n(13),K=n(137),J=n(134),z=n(136),V=n(135),G=n(141),W=n(142),Y=n(139),Q=n(132),Z=n(143),ee=n(133),te=n(138),ne=n(44),ae=n(65),re=n.n(ae),oe=n(64),se=n.n(oe),ce=n(66),ie=n.n(ce),le=n(63),pe=n.n(le);n(86),n(87),n(88);var de=function(e){switch(e.element.type){case"h1":return r.a.createElement(ne.a,{variant:"h1"},e.element.data);case"h2":return r.a.createElement(ne.a,{variant:"h2"},e.element.data);case"h3":return r.a.createElement(ne.a,{variant:"h3",style:{letterSpacing:"1.5px"}},e.element.data);case"h4":return r.a.createElement(ne.a,{variant:"h4"},e.element.data);case"h5":return r.a.createElement(ne.a,{variant:"h5"},e.element.data);case"h6":return r.a.createElement(ne.a,{variant:"h6"},e.element.data);case"body1":return r.a.createElement(ne.a,{variant:"body1"},e.element.data);case"body2":return r.a.createElement(ne.a,{variant:"body2"},e.element.data);case"hr":return r.a.createElement("hr",null);case"br":return r.a.createElement("br",null);case"code":return r.a.createElement(pe.a,{mode:e.element.mode||"javascript",theme:"monokai",fontSize:e.element.hasOwnProperty("fontSize")?e.element.fontSize:14,setOptions:{tabSize:4,showLineNumbers:!e.element.hasOwnProperty("showLineNumbers")||e.element.showLineNumbers},readOnly:!0,focus:!1,width:"100%",maxLines:1/0,value:e.element.data||""});case"image":return r.a.createElement("img",{src:e.element.data,alt:""});default:return r.a.createElement(ne.a,{variant:"subtitle1"},e.element.data)}},he=Object(U.a)((function(e){var t;return{root:{display:"flex"},drawer:(t={},Object(M.a)(t,e.breakpoints.up("xl"),{width:220,flexShrink:0}),Object(M.a)(t,"backgroundColor","#2e2e38"),t),appBar:Object(M.a)({},e.breakpoints.up("xl"),{width:"calc(100% - ".concat(220,"px)"),marginLeft:220}),menuButton:Object(M.a)({color:"#f6f6fa",marginRight:e.spacing(2)},e.breakpoints.up("xl"),{display:"none"}),drawerPaper:{width:220,backgroundColor:"#2e2e38",borderRight:"1px solid rgba(255,255,255,0.5)"},content:{flexGrow:1,padding:e.spacing(3)},link:{textDecoration:"none"},toolbar:e.mixins.toolbar}}));var ue=function(e){var t=e.window,n=he(),a=Object(I.a)(),o=r.a.useState({}),s=Object(A.a)(o,2),c=s[0],i=s[1],l=r.a.useState(!1),p=Object(A.a)(l,2),d=p[0],h=p[1],u=function(){h(!d)},m=void 0!==t?function(){return t().document.body}:void 0,f=r.a.createElement("div",null,r.a.createElement("div",{className:n.toolbar}),r.a.createElement(V.a,null),function e(t){var a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,o=[];return Object.keys(t).forEach((function(s,l){Object.keys(t[s]).length>0&&!t[s].hasOwnProperty("rawData")?o.push(r.a.createElement(r.a.Fragment,{key:"".concat(a,"_").concat(l)},r.a.createElement(Q.a,null,r.a.createElement(Z.a,{button:!0,onClick:function(){return i(Object($.a)(Object($.a)({},c),{},Object(M.a)({},s,!c[s])))},className:n.link},r.a.createElement(ee.a,{primary:s,className:n.link}),c[s]?r.a.createElement(se.a,{style:{color:"#f6f6fa"}}):r.a.createElement(re.a,{style:{color:"#f6f6fa"}}))),r.a.createElement(J.a,{in:!!c[s],timeout:"auto",unmountOnExit:!0},e(t[s],a)))):o.push(r.a.createElement(y.b,{to:t[s].link,key:"".concat(a,"_").concat(l),style:{paddingLeft:"".concat(12*a,"px")},className:n.link},r.a.createElement(Z.a,{button:!0,className:n.link},r.a.createElement(ee.a,{primary:s}))))})),r.a.createElement(Q.a,{style:{paddingLeft:"".concat(12*a,"px")}},o)}(B()),r.a.createElement(V.a,null)),g=e.rawData&&Array.isArray(e.rawData)?e.rawData:[{type:"h3",data:"No Data for Page"}];return r.a.createElement("div",{className:n.root},r.a.createElement(z.a,null),r.a.createElement(K.a,{position:"fixed",className:n.appBar},r.a.createElement(te.a,null,r.a.createElement(Y.a,{color:"inherit",edge:"start",onClick:u,className:n.menuButton},r.a.createElement(ie.a,null)),r.a.createElement(ne.a,{variant:"h6",noWrap:!0},"Oldmate's Templates"))),r.a.createElement("nav",{className:n.drawer},r.a.createElement(W.a,{xlUp:!0},r.a.createElement(G.a,{container:m,variant:"temporary",anchor:"rtl"===a.direction?"right":"left",open:d,onClose:u,classes:{paper:n.drawerPaper},ModalProps:{keepMounted:!0}},f)),r.a.createElement(W.a,{lgDown:!0},r.a.createElement(G.a,{classes:{paper:n.drawerPaper},variant:"permanent",open:!0},f))),r.a.createElement("main",{className:n.content},r.a.createElement(te.a,null),g.map((function(e,t){return r.a.createElement(r.a.Fragment,{key:t},r.a.createElement(de,{element:e}))}))))},ye=[{type:"h3",data:"Home"},{type:"hr"},{type:"h6",data:"Welcome to my template site. This site contains random useful code snippets for certain situtions. Feel free to have a look around and use what you like."}],me=function(e){Object(d.a)(n,e);var t=Object(h.a)(n);function n(e){var a;return Object(l.a)(this,n),(a=t.call(this,e)).siteData=B(),a.cleanName=function(e){return e.toLowerCase().match(/[a-z0-9-]+/).join("")},a.state={},a}return Object(p.a)(n,[{key:"buildRouterRecursive",value:function(e,t){var n=this;Object.keys(e).forEach((function(a,o){if(Object.keys(e[a]).length>0&&!e[a].hasOwnProperty("rawData"))n.buildRouterRecursive(e[a],t);else{var s=n.cleanName(a),c=r.a.createElement(u.b,{key:"".concat(s,"_").concat(o),path:"/".concat(e[a].link)},r.a.createElement(ue,{rawData:e[a].rawData}));t.push(c)}}))}},{key:"render",value:function(){var e=[];return this.buildRouterRecursive(this.siteData,e),r.a.createElement(y.a,null,r.a.createElement(u.d,null,r.a.createElement(u.b,{path:"/home"},r.a.createElement(ue,{rawData:ye})),e,r.a.createElement(u.a,{to:"/home"})))}}]),n}(r.a.Component),fe=(n(92),Object(i.a)({typography:{fontFamily:"Oxygen",useNextVariants:!0},overrides:{MuiTypography:{h1:{color:"#f6f6fa"},h2:{color:"#f6f6fa"},h3:{color:"#f6f6fa"},h4:{color:"#f6f6fa"},h5:{color:"#f6f6fa"},h6:{color:"#f6f6fa"},body1:{color:"#f6f6fa"},body2:{color:"#f6f6fa"},subtitle1:{color:"#f6f6fa"}},MuiDivider:{root:{backgroundColor:"rgba(255,255,255,0.5)"}},MuiBreadcrumbs:{root:{color:"#f6f6fa"}},MuiTouchRipple:{root:{color:"#f6f6fa"}},MuiIconButton:{root:{padding:0,marginLeft:10,marginRight:10,color:"#f6f6fa","&:hover":{boxShadow:"0 0 24px 0px"}}}}}));s.a.render(r.a.createElement(c.a,{theme:fe},r.a.createElement(r.a.Fragment,null,r.a.createElement(me,null))),document.getElementById("root"))}},[[74,1,2]]]);